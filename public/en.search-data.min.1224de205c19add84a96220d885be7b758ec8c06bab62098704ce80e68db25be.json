[{"id":0,"href":"/docs/example/","title":"介绍","section":"Docs","content":" 关于博客 # 这个博客是我个人开设的第二个博客，主要用于记录作者在计算机行业摸爬滚打10余年的经历、各类资料干货以及学习心得等，持续更新中\u0026hellip;\u0026hellip;\n本项目的所有的免费资源均挂载在github，地址为：https://github.com/yswang837/yswang837.github.io，同时欢迎热爱开源的朋友fork下来，提交给我你的代码，让我们一起完善这个项目吧；如果你认为本博客帮助了你，欢迎star。\n请你在阅读本站内容时，时刻持有一种质疑的态度，这样不仅能够帮助自己思考，也能发现我文章的不足之处；文章中难免引用到来自网络的各类资料，如果你觉得侵犯了你的版权，请联系我，我将立即删除；如果文章中有什么错漏的地方请大家见谅，也欢迎大家随时加我微信wys837帮我指正，希望与大家一起进步。感谢！\n关于作者 # 笔名：小钻风\n微信：wys837\ngithub: https://github.com/yswang837\n"},{"id":1,"href":"/docs/example/architect-exam/","title":"3. 高级软考 - 系统架构师","section":"介绍","content":" 本博客只介绍“高级资格”里面的系统架构师，想考别的科目的朋友请参见官网 软考 一、考试介绍 # 系统架构师考试包含：3个科目，满分均为75分，45分为过线，需三科同时过线才算考过。 二、考试时间 # 每年具体那天考试不太确定，大概都是11月份。科目一全为选择题、科目二为案例分析题(第1道必答，后4道题选答2道，总共做3个题)、科目三论文作(四选一，不排除之后会变成二选一) 三、报名地址 # 需要格外注意的是：每个科目、每个省份的报名时间是不一样的，大概会在每年的4月和10月左右。系统架构师大概会在每年的10月左右。官方网站 软考\n四、考试内容 # 架构师考试内容太宽泛了，如果你和我一样是工作了才准备考的话，建议复习重点，45分和75分没啥区别 五、笔者过没过 # 算是比较幸运，我是一把过。希望学弟学妹们都能一把过。 六、备考资料 # 笔者的资料是从机构高价买的，现低价有偿分享给大家，所有资料打包 30元 即可获取，微信号：wys837，博主唯一的恰饭来源 😅\n资料主要有：\n2009-2022年的按年的真题及详细解析 2009-2022年的按知识点的真题及详细解析 新版系统架构师教材(2022年11月出版)，鉴别新版教材tips：新版教材分上下篇，总共20个章节 某塞新版教材分析视频 刷题小程序(非常适合上班族) 按章节的知识点和真题排班的所有例题 思维导图 相关的重要知识点补充、案例分析必背题目、示例论文精读、某赛讲义、答题卡等等 "},{"id":2,"href":"/docs/example/algorthem/1.1-golang%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/4th-level/","title":"4th Level","section":"1.1 Golang基本数据类型","content":" 4th Level of Menu # Caesorum illa tu sentit micat vestes papyriferi # Inde aderam facti; Theseus vis de tauri illa peream. Oculos uberaque non regisque vobis cursuque, opus venit quam vulnera. Et maiora necemque, lege modo; gestanda nitidi, vero? Dum ne pectoraque testantur.\nVenasque repulsa Samos qui, exspectatum eram animosque hinc, aut manes, Assyrii. Cupiens auctoribus pariter rubet, profana magni super nocens. Vos ius sibilat inpar turba visae iusto! Sedes ante dum superest extrema.\n"},{"id":3,"href":"/docs/example/algorthem/1.1-golang%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/","title":"1.1 Golang基本数据类型","section":"4. 数据结构与算法","content":" 3rd Level of Menu # Nefas discordemque domino montes numen tum humili nexilibusque exit, Iove. Quae miror esse, scelerisque Melaneus viribus. Miseri laurus. Hoc est proposita me ante aliquid, aura inponere candidioribus quidque accendit bella, sumpta. Intravit quam erat figentem hunc, motus de fontes parvo tempestate.\niscsi_virus = pitch(json_in_on(eupViral), northbridge_services_troubleshooting, personal( firmware_rw.trash_rw_crm.device(interactive_gopher_personal, software, -1), megabit, ergonomicsSoftware(cmyk_usb_panel, mips_whitelist_duplex, cpa))); if (5) { managementNetwork += dma - boolean; kilohertz_token = 2; honeypot_affiliate_ergonomics = fiber; } mouseNorthbridge = byte(nybble_xmp_modem.horse_subnet( analogThroughputService * graphicPoint, drop(daw_bit, dnsIntranet), gateway_ospf), repository.domain_key.mouse(serverData(fileNetwork, trim_duplex_file), cellTapeDirect, token_tooltip_mashup( ripcordingMashup))); module_it = honeypot_driver(client_cold_dvr(593902, ripping_frequency) + coreLog.joystick(componentUdpLink), windows_expansion_touchscreen); bashGigabit.external.reality(2, server_hardware_codec.flops.ebookSampling( ciscNavigationBacklink, table + cleanDriver), indexProtocolIsp); "},{"id":4,"href":"/docs/example/architect-exam/3.1-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B8%8E%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/","title":"3.1 计算机组成与体系结构","section":"3. 高级软考 - 系统架构师","content":" 课程内容提要 # 1.计算机结构 ✅ 2.存储系统 ✅✅✅✅ 3.数据传输控制方式 ✅ 4.总线 ✅✅ 5.CISC与RISC ✅✅ 6.流水线 ✅✅ 7.校验码 ✅ 8.嵌入式 ✅ 1 计算机结构 # 计算机的硬件包含5大组成：控制器、运算器、存储器、输入设备和输出设备。这也是著名的冯诺依曼结构，CPU依据指令周期的不同阶段来区分二进制的指令和数据，因为在指令周期的不同阶段指令会命令CPU分别去取指令或者数据。它们之间的交互如下图： 别的部件会在后面的章节详细讲解，这里是说运算器和控制器。\n运算器 算术逻辑单元ALU：实现对数据的算术和逻辑运算。\n累加寄存器AC：运算结果或源操作数的存放区。\n数据缓冲寄存器DR：暂时存放内存的指令或数据。\n状态条件寄存器PSW：保存指令运行结果的条件码内容，如溢出标志等。\n控制器 程序计数器PC：存储下一条要执行指令的地址。\n指令寄存器IR：存储即将执行的指令。\n指令译码器ID：对指令中的操作码字段进行分析解释。\n时序部件：提供时序控制信号。\n例题 答案：A\n2 存储系统 # 整体采用分层的思想，主要是解决速度、容量和成本之间的矛盾。如下图：\n\\\n2.1 高速缓存Cache # 高速缓存Cache用来存储当前最活跃的程序和数据，直接与CPU交互，位于CPU和主存之间,容量小，速度为内存的5-10倍，其内容是主存(内存)的拷贝，对于程序员来说是透明的。Cache由控制部分和存储器组成，存储器存储数据，控制部分判断CPU要访问的数据是否在Cache中，在则命中不在则依据一定的算法从主存中替换。\n地址映射：在CPU工作时，送出的是主存单元的地址，而应从Cache存储器中读/写信息。这就需要将主存地址转换为Cache存储器地址，这种地址的转换称为地址映像，由硬件自动完成映射。\nCache的功能：\n1.提高CPU数据输入输出的速率，突破冯·诺依曼瓶颈，即突破CPU与存储系统间数据传送带宽限制。\n2.在计算机的存储系统体系中(除cpu中的寄存器外)，Cache是访问速度最快的层次。\n3.Cache对程序员来说是透明的。\n4.使用Cache改善系统性能的依据是程序的局部性原理(总的来说，在CPU运行时，所访问的数据会趋向于一个较小的局部时空内。包括下面两个方面: 时间局部性原理:如果一个数据项正在被访问，那么在近期它很可能会被再次访问，即在相邻的时间里会访问同一个数据项。空间局部性原理:在最近的将来会用到的数据的地址和现在正在访问的数据地址很可能是相近的，即相邻的空间地址会被连续访问。)\nCache的命中率：\n当CPU所访问的数据在Cache中时，命中，直接丛Cache中读取数据，设读取一次Cache时间为1ns，若CPU访问的数据不在Cache中，则需要从内存中读取，设读取一次内存的时间为1000ns，若在CPU多次读取数据过程中，有90%命中Cache，则CPU读取一次的平均时间为(90% * 1 + 10% * 1000)ns\\\n例题 答案：B 答案：D\n2.2 主存(内存)编址计算 # 主存如图所示，可以看图试着回答红色框线里面的问题，看完应该知道32位机器和64位机器大概是啥意思了。 3 数据传输控制方式 # 4 总线 # 5 CISC与RISC # 6 流水线 # 7 校验码 # 8 嵌入式 # "},{"id":5,"href":"/docs/example/architect-exam/3.2-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/0-%E6%9E%B6%E6%9E%84%E7%9A%84%E6%A6%82%E8%BF%B0/","title":"0) 架构的概述","section":"3.2 软件架构设计","content":" 1.软件架构的概述 # 1.1 软件架构的概念 # 软件架构即软件体系结构，软件架构设计就是需求的再分配，即将满足需求的职责分配到组件上。它搭建起了需求分析与软件设计之间的鸿沟。如下图： 架构的本质\n1. 软件架构为软件系统提供了一个结构、行为和属性的高级抽象。\n2. 软件架构风格是特定应用领域的管用模式，架构定义了一个词汇表和一组约束。\\ 架构的作用\n1. 软件架构是项目干系人进行交流的手段。\n2. 软件架构是可传递和可复用的模型。\n3. 软件架构使推理和控制的更改更加简单，有助于循序渐进的原型设计。 例题 学霸肯定对了 ↕ D 1.2 软件架构的发展 # 软件架构的发展经历了无架构模式(汇编语言)、萌芽阶段(程序结构设计)、初级阶段(统一建模语言UML)、高级阶段(4+1视图)。\n4+1视图如下： 。\n例题 学霸肯定对了 ↕ A D C "},{"id":6,"href":"/docs/example/architect-exam/3.2-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/1-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E9%A3%8E%E6%A0%BC/","title":"1) 软件架构风格","section":"3.2 软件架构设计","content":" 2.软件架构风格 # 架构风格反映了领域中众多系统所共有的结构和语义特性，并指导如何将各个构件有效地组织成一个完整的系统。架构风格定义了用于描述系统的术语表和一组指导构建系统的规则。下图是架构师考试中常见的架构风格及其子风格，接下来会详细介绍每一种风格。 2.1 数据流风格 # 数据流风格以数据驱动的方式推进项目，其的典型应用有传统编译器、网络报文处理，它包含2个子风格：\n1、批处理。做题要点：大量整体数据、无需用户交互\n2、管道过滤器。做题要点：流式数据、弱用户交互\n具体如下图： 2.2 调用/返回风格 # 调用/返回风格包含3个子风格：\n1、主程序/子程序风格\n2、面向对象风格\n3、分层风格\n2.3 独立构建风格 # 独立构建区别于返回/调用风格的点在于，相对松耦合，且放弃了对子程序的控制，它包含2个子风格：\n1、进程通信\n2、事件驱动系统（隐式调用）\n2.4 虚拟机风格 # 虚拟机风格包含2个子风格：\n1、解释器风格，做题关键字：需要自定义规则的场景\n2、规则系统，做题关键字：在解释器的基础上增加经验规则\n2.5 仓库风格 # 仓库风格包含2个子风格：\n1、数据库系统\n2、黑板系统 2.6 闭环控制风格(过程风格) # 2.7 C2架构风格 # \\\n例题 答案： 答案： 答案：\n2.8 架构风格具体实例 # 没有最好的架构，只有更适合具体业务场景的架构。\n2.8.1 从 C/S -\u0026gt; B/S -\u0026gt; 混合架构 # 双层C/S架构\n通过图示可以看出非常明显的缺点：将业务逻辑的代码嵌入进客户端，在早期互联网并不普及的情况下，频繁变更的业务逻辑代码和难以推广升级的客户端存在巨大矛盾。 三层C/S架构\n相比于双层C/S架构，三层C/S架构的优势在于：将业务逻辑层单独拆分出来(独立于数据库服务器、用户客户端)放在单独的服务器上，经常变更的业务逻辑代码并不会直接影响到客户端的使用。其劣势依然需要用户安装客户端(你可以认为就是手机中的APP) B/S架构\n相比于C/S架构，B/S架构也有自己的优缺点\n优势：推广容易，不需要用户下载什么客户端之类的，只需要浏览器访问对应地址即可，这也就是早期各大厂都是从门户网站起家的。\n劣势：响应速度较慢，早期只能整个提交页面数据(不能局部刷新)、其安全性较低等。 混合架构\n结合了C/S和B/S的优势，左图适用于企业内部的软件，对系统的维护有优势；右图适用于主流互联网公司的架构，查询用B/S、修改用C/S架构。 2.8.2 MVC架构风格 # MVC(Model-View-Controller)，Model(模型) 是应用程序中用于处理应用程序数据逻辑的部分，通常模型对象负责在数 据库中存取数据。View(视图) 是应用程序中处理数据显示的部分，通常视图是依据模型数据创建的。Controller(控制器)是应用程序中处理用户交互的部分，通常控制器负责从视图读取数据，控制用户输入，并向模型发送数据。\nMVC分为主动MVC和被动MVC(具体不用了解)，MVC架构的缺点在于MV之间没有解耦，不是严格的分层架构(严格的分层架构：当前层之和上下层之间有联系) 在J2EE中（java相关的框架在考试中经常被拿来举例子，因此会java的很有优势），Model是Entity Bean/Session Bean，View是JSP，Controller是Servlet。\n2.8.3 MVP架构风格 # MVP(Model-View-Presenter)，注意：它不是LOL中的MVP，它是MVC的变种，它实现了MV之间的解耦。 2.8.4 MVVM架构风格 # MVVM(Model-ViewModel-View),类似于vue中的双向数据绑定，View改变则ViewModel也改变，反之亦然。 2.8.5 RIA架构风格 # RIA(富互联网架构)类似于综合了C/S和B/S架构的优点(C/S反应快，交互强，B/S易传播)，它在首次加载初期比较慢，一旦加载完成使用就快多了。典型的例子就是在线网游。\n2.8.6 基于服务的架构(SOA) # 2.8.7 微服务 # 2.8.8 MDA # "},{"id":7,"href":"/docs/example/architect-exam/3.2-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/2-%E6%9E%B6%E6%9E%84%E6%8F%8F%E8%BF%B0%E8%AF%AD%E8%A8%80/","title":"2) 架构描述语言","section":"3.2 软件架构设计","content":" 架构描述语言 # "},{"id":8,"href":"/docs/example/architect-exam/3.2-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/3-%E7%89%B9%E5%AE%9A%E9%A2%86%E5%9F%9F%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84/","title":"3) 特定领域软件架构","section":"3.2 软件架构设计","content":" 特定领域软件架构 # "},{"id":9,"href":"/docs/example/architect-exam/3.2-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/4-%E5%9F%BA%E4%BA%8E%E6%9E%B6%E6%9E%84%E7%9A%84%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/","title":"4) 基于架构的软件开发","section":"3.2 软件架构设计","content":" 基于架构的软件开发 # "},{"id":10,"href":"/docs/example/architect-exam/3.2-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/5-%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E5%B1%9E%E6%80%A7/","title":"5) 软件质量属性","section":"3.2 软件架构设计","content":" 软件质量属性 # "},{"id":11,"href":"/docs/example/architect-exam/3.2-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/6-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AF%84%E4%BC%B0/","title":"6) 软件架构评估","section":"3.2 软件架构设计","content":" 软件架构评估 # "},{"id":12,"href":"/docs/example/architect-exam/3.2-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/7-%E8%BD%AF%E4%BB%B6%E4%BA%A7%E5%93%81%E7%BA%BF/","title":"7) 软件产品线","section":"3.2 软件架构设计","content":" 软件架构评估 # "},{"id":13,"href":"/docs/example/architect-exam/3.2-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/8-%E6%9E%84%E5%BB%BA%E4%B8%8E%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%8A%80%E6%9C%AF/","title":"8) 构建与中间件技术","section":"3.2 软件架构设计","content":" 构建与中间件技术 # "},{"id":14,"href":"/docs/example/architect-exam/3.2-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/9-web%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/","title":"9) Web架构设计","section":"3.2 软件架构设计","content":" web架构设计 # "},{"id":15,"href":"/docs/example/architect-exam/3.2-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/","title":"3.2 软件架构设计","section":"3. 高级软考 - 系统架构师","content":" 课程内容提要 # 1.软件架构的概述 ✅✅✅ 2.软件架构风格 ✅✅✅✅✅ 3.架构描述语言 ✅✅✅ 4.特定领域软件架构 ✅✅✅ 5.基于架构的软件开发 ✅✅✅✅ 6.软件质量属性 ✅✅✅✅✅ 7.软件架构评估 ✅✅✅✅✅ 8.软件产品线 ✅✅✅ 9.构建与中间件技术 ✅✅✅✅ 10.web架构设计 ✅✅✅✅✅ "},{"id":16,"href":"/docs/example/architect-exam/3.3-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/","title":"3.3 软件工程","section":"3. 高级软考 - 系统架构师","content":" 软件工程 # "},{"id":17,"href":"/docs/example/gin/aaa/4th-level/","title":"4th Level","section":"Aaa","content":" 4th Level of Menu # Caesorum illa tu sentit micat vestes papyriferi # Inde aderam facti; Theseus vis de tauri illa peream. Oculos uberaque non regisque vobis cursuque, opus venit quam vulnera. Et maiora necemque, lege modo; gestanda nitidi, vero? Dum ne pectoraque testantur.\nVenasque repulsa Samos qui, exspectatum eram animosque hinc, aut manes, Assyrii. Cupiens auctoribus pariter rubet, profana magni super nocens. Vos ius sibilat inpar turba visae iusto! Sedes ante dum superest extrema.\n"},{"id":18,"href":"/docs/example/gin/aaa/","title":"Aaa","section":"2. gin杂谈","content":" 3rd Level of Menu # Nefas discordemque domino montes numen tum humili nexilibusque exit, Iove. Quae miror esse, scelerisque Melaneus viribus. Miseri laurus. Hoc est proposita me ante aliquid, aura inponere candidioribus quidque accendit bella, sumpta. Intravit quam erat figentem hunc, motus de fontes parvo tempestate.\niscsi_virus = pitch(json_in_on(eupViral), northbridge_services_troubleshooting, personal( firmware_rw.trash_rw_crm.device(interactive_gopher_personal, software, -1), megabit, ergonomicsSoftware(cmyk_usb_panel, mips_whitelist_duplex, cpa))); if (5) { managementNetwork += dma - boolean; kilohertz_token = 2; honeypot_affiliate_ergonomics = fiber; } mouseNorthbridge = byte(nybble_xmp_modem.horse_subnet( analogThroughputService * graphicPoint, drop(daw_bit, dnsIntranet), gateway_ospf), repository.domain_key.mouse(serverData(fileNetwork, trim_duplex_file), cellTapeDirect, token_tooltip_mashup( ripcordingMashup))); module_it = honeypot_driver(client_cold_dvr(593902, ripping_frequency) + coreLog.joystick(componentUdpLink), windows_expansion_touchscreen); bashGigabit.external.reality(2, server_hardware_codec.flops.ebookSampling( ciscNavigationBacklink, table + cleanDriver), indexProtocolIsp); "},{"id":19,"href":"/docs/example/golang/1.1-golang%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/4th-level/","title":"4th Level","section":"1.1 Golang基本数据类型","content":" 4th Level of Menu # Caesorum illa tu sentit micat vestes papyriferi # Inde aderam facti; Theseus vis de tauri illa peream. Oculos uberaque non regisque vobis cursuque, opus venit quam vulnera. Et maiora necemque, lege modo; gestanda nitidi, vero? Dum ne pectoraque testantur.\nVenasque repulsa Samos qui, exspectatum eram animosque hinc, aut manes, Assyrii. Cupiens auctoribus pariter rubet, profana magni super nocens. Vos ius sibilat inpar turba visae iusto! Sedes ante dum superest extrema.\n"},{"id":20,"href":"/docs/example/golang/1.1-golang%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/","title":"1.1 Golang基本数据类型","section":"1. golang语言教程","content":" 3rd Level of Menu # Nefas discordemque domino montes numen tum humili nexilibusque exit, Iove. Quae miror esse, scelerisque Melaneus viribus. Miseri laurus. Hoc est proposita me ante aliquid, aura inponere candidioribus quidque accendit bella, sumpta. Intravit quam erat figentem hunc, motus de fontes parvo tempestate.\niscsi_virus = pitch(json_in_on(eupViral), northbridge_services_troubleshooting, personal( firmware_rw.trash_rw_crm.device(interactive_gopher_personal, software, -1), megabit, ergonomicsSoftware(cmyk_usb_panel, mips_whitelist_duplex, cpa))); if (5) { managementNetwork += dma - boolean; kilohertz_token = 2; honeypot_affiliate_ergonomics = fiber; } mouseNorthbridge = byte(nybble_xmp_modem.horse_subnet( analogThroughputService * graphicPoint, drop(daw_bit, dnsIntranet), gateway_ospf), repository.domain_key.mouse(serverData(fileNetwork, trim_duplex_file), cellTapeDirect, token_tooltip_mashup( ripcordingMashup))); module_it = honeypot_driver(client_cold_dvr(593902, ripping_frequency) + coreLog.joystick(componentUdpLink), windows_expansion_touchscreen); bashGigabit.external.reality(2, server_hardware_codec.flops.ebookSampling( ciscNavigationBacklink, table + cleanDriver), indexProtocolIsp); "},{"id":21,"href":"/docs/example/hidden/","title":"Hidden","section":"介绍","content":" This page is hidden in menu # Quondam non pater est dignior ille Eurotas # Latent te facies # Lorem markdownum arma ignoscas vocavit quoque ille texit mandata mentis ultimus, frementes, qui in vel. Hippotades Peleus pennas conscia cuiquam Caeneus quas.\nPater demittere evincitque reddunt Maxime adhuc pressit huc Danaas quid freta Soror ego Luctus linguam saxa ultroque prior Tatiumque inquit Saepe liquitur subita superata dederat Anius sudor Cum honorum Latona # O fallor in sustinui iussorum equidem. Nymphae operi oris alii fronde parens dumque, in auro ait mox ingenti proxima iamdudum maius?\nreality(burnDocking(apache_nanometer), pad.property_data_programming.sectorBrowserPpga(dataMask, 37, recycleRup)); intellectualVaporwareUser += -5 * 4; traceroute_key_upnp /= lag_optical(android.smb(thyristorTftp)); surge_host_golden = mca_compact_device(dual_dpi_opengl, 33, commerce_add_ppc); if (lun_ipv) { verticalExtranet(1, thumbnail_ttl, 3); bar_graphics_jpeg(chipset - sector_xmp_beta); } Fronde cetera dextrae sequens pennis voce muneris # Acta cretus diem restet utque; move integer, oscula non inspirat, noctisque scelus! Nantemque in suas vobis quamvis, et labori!\nvar runtimeDiskCompiler = home - array_ad_software; if (internic \u0026gt; disk) { emoticonLockCron += 37 + bps - 4; wan_ansi_honeypot.cardGigaflops = artificialStorageCgi; simplex -= downloadAccess; } var volumeHardeningAndroid = pixel + tftp + onProcessorUnmount; sector(memory(firewire + interlaced, wired)); "},{"id":22,"href":"/docs/example/leetcode/1.1-golang%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/4th-level/","title":"4th Level","section":"1.1 Golang基本数据类型","content":" 4th Level of Menu # Caesorum illa tu sentit micat vestes papyriferi # Inde aderam facti; Theseus vis de tauri illa peream. Oculos uberaque non regisque vobis cursuque, opus venit quam vulnera. Et maiora necemque, lege modo; gestanda nitidi, vero? Dum ne pectoraque testantur.\nVenasque repulsa Samos qui, exspectatum eram animosque hinc, aut manes, Assyrii. Cupiens auctoribus pariter rubet, profana magni super nocens. Vos ius sibilat inpar turba visae iusto! Sedes ante dum superest extrema.\n"},{"id":23,"href":"/docs/example/leetcode/1.1-golang%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/","title":"1.1 Golang基本数据类型","section":"5. leetcode","content":" 3rd Level of Menu # Nefas discordemque domino montes numen tum humili nexilibusque exit, Iove. Quae miror esse, scelerisque Melaneus viribus. Miseri laurus. Hoc est proposita me ante aliquid, aura inponere candidioribus quidque accendit bella, sumpta. Intravit quam erat figentem hunc, motus de fontes parvo tempestate.\niscsi_virus = pitch(json_in_on(eupViral), northbridge_services_troubleshooting, personal( firmware_rw.trash_rw_crm.device(interactive_gopher_personal, software, -1), megabit, ergonomicsSoftware(cmyk_usb_panel, mips_whitelist_duplex, cpa))); if (5) { managementNetwork += dma - boolean; kilohertz_token = 2; honeypot_affiliate_ergonomics = fiber; } mouseNorthbridge = byte(nybble_xmp_modem.horse_subnet( analogThroughputService * graphicPoint, drop(daw_bit, dnsIntranet), gateway_ospf), repository.domain_key.mouse(serverData(fileNetwork, trim_duplex_file), cellTapeDirect, token_tooltip_mashup( ripcordingMashup))); module_it = honeypot_driver(client_cold_dvr(593902, ripping_frequency) + coreLog.joystick(componentUdpLink), windows_expansion_touchscreen); bashGigabit.external.reality(2, server_hardware_codec.flops.ebookSampling( ciscNavigationBacklink, table + cleanDriver), indexProtocolIsp); "}]