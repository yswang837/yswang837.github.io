[{"id":0,"href":"/docs/example/architect-exam/3.10-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/1-%E6%9E%B6%E6%9E%84%E7%9A%84%E6%A6%82%E8%BF%B0/","title":"1) 软件架构的概述","section":"3.10 软件架构设计","content":" 1 软件架构的概述 ✅✅✅ # 1.1 软件架构的概念 ✅✅✅ # 从本质上看，需求和软件架构设计面临的是不同的对象：一个是问题空间；另一个是解空间。保持两者的可追踪性和转换，一直是软件工程领城追求的目标。\n软件架构设计是降低成本、改进质量、按时和按需交付产品的关键因素。软件架构设计能够满足系统的性能、安全性、可维护性等品质，软件架构设计能够帮助项目干系人(Stakeholder)更好地理解软件结构；软件架构设计能够有效地管理系统的复杂性，并降低系统维护费用，软件架构设计对系统开发具有指导性；软件架构设计为系统复用奠定的基础;软件架构设计能够支持冲突分析。总体来说，软件架构设计更在意的是性能、质量、成本、安全、可靠、易维护等，对于功能需求，软件架构设计并不在意。架构设计的目标是把项目做好，而不是把项目做完。\n软件架构贯穿于软件的整个生命周期，但在不同的阶段对软件架构的关注力度并不相同。其中需求分析阶段主要关注问题域；设计阶段主要将需求转换为软件架构模型，软件实现阶段主要关注将架构设计转换为实际的代码，软件部署阶段主要通过组装软件组件提高系统的实现效率。其中设计与实现阶段在软件架构上的工作最多，也最重要，因此关注力度最大。\n在架构描述阶段，描述了构成系统的抽象组件以及各个组件之间的连接规则，特别是相对细致地描述了组件之间的交互关系。在架构实现阶段，这些抽象组件被细化为实际的组件，比如具体类或者对象。软件系统架构不仅指定了软件系统的组织和拓扑结构，而且显示了系统需求和组件之间的对应关系，包括设计决策的基本方法和基本原理。\n软件架构即软件体系结构，软件架构设计过程就是需求的分配过程，即将满足需求的职责分配到组件上。它搭建起了需求分析(偏业务)与软件设计(偏技术)之间的鸿沟。如下图：\n架构的本质：软件架构为软件系统提供了一个结构、行为和属性的高级抽象。\n架构的作用\n1. 软件架构是项目干系人进行交流的手段。\n2. 在设计变更相对容易的阶段，考虑系统结构的可选方案。\n3. 展现软件的结构、属性与内部交互关系。\n例题 学霸肯定对了 ↕ D\n架构设计更关注性能、质量、成本、安全、可靠、易维护等非功能需求，而功能需求不是架构重点关注的\n1.2 软件架构的发展 ✅✅✅ # 软件架构的发展经历了无架构模式(汇编语言)、萌芽阶段(程序结构设计：顺序分支循环)、初级阶段(统一建模语言UML)、高级阶段(4+1视图)。\n4+1视图如下：多视图是一种描述软件架构的重要途径，体现了关注点分离的思想。 整体来说架构视图和UML视图是一致的，需要单独记忆的是，逻辑视图在前者表示功能需求、对应于后者的类和对象；架构视图中的物理视图在UML视图中叫做部署视图；进程视图又叫过程视图。其中的1，在架构视图中指的是场景，在UML视图中指的是用例。\n。\n例题 学霸肯定对了 ↕ A D C 1.3 架构描述语言 ✅ # ADL(Architect Describe Language)，它由三个基本的元素构成：\n1、构件：计算或者存储数据的单元。\n2、连接件：用于构件之间交互建模的连接块。\n3、架构配置：描述架构的构件与连接件的连接图。\n学霸肯定对了 ↕ C "},{"id":1,"href":"/docs/example/architect-exam/3.1-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B8%8E%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/","title":"3.1 计算机组成与体系结构","section":"3. 高级软考 - 系统架构师","content":" 目录 ✌ # 本章内容的考试方式主要集中在上午的选择题里面，约2~4分，占比2.7%~5.3%\n1 计算机结构 ✅✅ # 计算机的硬件包含5大组成：运算器、控制器、存储器、输入和输出设备。CPU依据指令周期的不同阶段来区分二进制的指令和数据，因为在指令周期的不同阶段指令会命令CPU分别去取指令或者数据。\n它们之间的交互如下图（别的部件会在后面的章节详细讲解，本节会说到运算器和控制器）： 程序员是可以通过汇编语言直接操作CPU中的寄存器的，如AX、BX等；也可以直接操作内存、外存；然而cache对于程序员来说是透明的。\nCPU与别的部件交换信息通常是同步方式；如：CPU访问内存通常是同步方式，CPU与PCI总线交换信息通常是同步方式，CPU与I/0接口交换信息通常是同步方式，I/O接口与打印机交换信息则通常采用基于缓存池的异步方式。\n总线标准是种局部并行总线标准，常用来表示个人计算机中使用最为广泛的接口，几乎所有的主板产品上都带有这种插槽。图形用户界面GUI常用来表示采用图形方式显示的计算机操作用户界面。应用程序接口API是一些预先定义的函数，目的是提供应用程序与开发人员基于某软件或硬件得以访问一组例程的能力，开发人员无须访问源码或理解内部工作机制的细节。\n冯诺依曼结构 现代pc计算机一般采用的结构，指令和数据存储在一起、指令和数据都是通过相同的数据总线传输，通过不同的周期来区分数据和指令。\n哈佛结构 一般用于嵌入式系统处理器DSP(数字信号处理器)，指令和数据可并行分开存储与传输。\n1.1 运算器 ✅ # 算术逻辑单元(Arithmetic and Logic Unit, ALU)：实现对数据的算术和逻辑运算。\n累加寄存器(Accumulator register, AC)：通用寄存器、运算结果或源操作数的存放区。\n数据缓冲寄存器(Data Register, DR)：暂时存放内存的指令或数据。\n程序状态寄存器(Program Status Word, PSW)：保存指令运行结果的条件码内容，如溢出标志、进位等。\n1.2 控制器 ✅ # 程序计数器(Program Count, PC)：存储下一条要执行指令的地址。\n指令寄存器(Instruction Register, IR)：存储即将执行的指令内容。\n指令译码器(Instruction Decoder, ID)：对指令中的操作码字段进行分析解释。\n时序部件：提供时序控制信号。\n例题 学霸肯定对了 ↕ 答案：A\n计算机执行程序时，在一个指令周期的过程中，为了能够从内存中读指令操作码，首先是将程序计数器(PC)的内容送到地址总线上，PC-\u0026gt;IR。\n学霸肯定对了 ↕ 答案：B 2 存储系统 ✅✅✅✅ # 整体采用分层的思想，主要是解决速度、容量和成本之间的矛盾。cache内存外存成为三级存储结构.如下图： 虚拟存储器可以认为是一个由“内存”+“外存”配合而成的容量非常大的逻辑存储模型(页面置换算法决定了其容量比内存加外存都大)，当虚拟存储器发生页面失效时(其实就是页面失效)，需要进行外部地址变换，即实现虚地址到辅存物理地址的变换。\n2.1 Cache ✅✅✅✅ # 高速缓存Cache在物理上是集成在CPU上的 (linux系统可通过lscpu命令查看)，它用来存储当前最活跃的程序和数据，直接与CPU交互，位于CPU和主存之间,容量小，速度为内存的5-10倍，其内容是主存(内存)的拷贝，对于程序员来说是透明的。Cache由控制部分和存储器组成，存储器存储数据，控制部分判断CPU要访问的数据是否在Cache中，在则称为命中，不在则依据一定的算法从主存中获取数据，主存中没有则通过页面置换算法从外存中调取。\n地址映射：在CPU工作时，送出的是主存单元的地址，而应从Cache存储器中读/写信息。这就需要将主存地址转换为Cache存储器地址，这种地址的转换称为地址映像，由硬件自动完成映射。\nCache的命中率 当CPU所访问的数据在Cache中时，命中，直接丛Cache中读取数据，设读取一次Cache时间为1ns，若CPU访问的数据不在Cache中，则需要从内存中读取，设读取一次内存的时间为1000ns，若在CPU多次读取数据过程中，有90%命中Cache(90%一般由cache的算法决定)，则CPU读取一次的平均时间为(90% * 1 + 10% * 1000)ns。\nCache的功能 1.提高CPU数据输入输出的速率，突破冯·诺依曼瓶颈，即突破CPU与存储系统间数据传送带宽限制。\n2.在计算机的存储系统体系中(除cpu中的寄存器外)，Cache是访问速度最快的层次。\n3.使用Cache能改善系统性能的依据在于：程序的局部性原理。总的来说，在CPU运行时，所访问的数据会趋向于一个较小的局部时空内。包括下面两个方面:时间局部性原理：如果一个数据项正在被访问，那么在近期它很可能会被再次访问(代码里面的循环)，即在相邻的时间里会访问同一个数据项。空间局部性原理：在最近的将来会用到的数据的地址和现在正在访问的数据地址很可能是相近的，即相邻的空间地址会被连续访问(数组)。\n例题 学霸肯定对了 ↕ 答案：B 学霸肯定对了 ↕ 答案：D 学霸肯定对了 ↕ 答案：A 2.2 主存(内存)编址计算 ✅✅✅✅ # 主存如图所示，可以看图试着回答红色框线里面的问题，图中一个存储单元存放了4个bit位，每个存储单元的地址就是我们熟悉的指针，看完应该要知道字长为32位机器和64位机器大概是啥意思了。 特别提醒：不要硬算，要化简为二进制或者十进制来算。\n存储单元个数=最大地址-最小地址+1\n编址方式 按字编址：一个存储单元存储的是一个字，最小寻址单位是一个字。 按字节编址：一个存储单元存储的是一个字节(Byte)，最小寻址单位是一个字节。 总容量=存储单元个数*单个存储单元所占大小\n单位换算：1GB=1024MB，1MB=1024KB，1KB=1024Byte，1Byte=8bit。K=2^10，M=2^20，G=2^30\n例题 学霸肯定对了 ↕ 答案：B C\n总存储单元个数=BFFFFH+1-80000H=40000H，转换为十进制为：4 * 16^4=262144(个)，因为按字节编址，所以总容量为262144字节，即262144/1024=256KB，16k * 4bit = 8k * 8bit(1字节=8bit)，所以用这种芯片存这些数据，所需的芯片数量为：256/8=32片\n2.3 磁盘管理 ✅✅✅✅ # 磁盘有正反两个盘面，每个盘面有多个同心圆，每个同心圆是一个磁道，不同盘面上的多个磁道叫做柱面(柱面简单理解为磁道也是可以的)，每个同心圆又被划分为多个扇区，数据就被存放在一个个扇区中。如下图所示：\n磁盘在运行过程中，磁头首先要寻找到对应的磁道，然后等待磁盘进行周期旋转，旋转到指定的扇区，才能读取到对应的数据，因此，会产生寻道时间、等待时间和存取数据的时间。其公式为：存取时间=寻道时间+等待时间+存取数据时间(在考试时，有这个时间就算上，没有就忽略)\n磁盘调度算法(磁盘旋转是同方向匀速旋转，只会在寻道的时候产生优化算法，所以磁盘调度算法都是指的是寻道调度算法)\n先来先服务FCFS：根据进程请求访问磁盘的先后顺序进行调度。\n最短寻道时间优先SSTF：请求访问的磁道与当前磁道最进的进程优先调度，使得每次的寻道时间最短。会产生“饥饿”现象，即远处进程可能永远无法访问。\n扫描算法SCAN：又称“电梯算法”，磁头在磁盘上双向移动，其会选择离磁头当前所在磁道最近的请求访问的磁道，并且与磁头移动方向一致，磁头永远都是从里向外或者从外向里一直移动完才掉头。\n单向扫描调度算法CSCAN：与电梯算法类似，与SCAN不同的是，其只做单向移动，即只能从里向外或者从外向里。\n例题 学霸肯定对了 ↕ 答案：D 学霸肯定对了 ↕ 答案：D\n读取一个块需要的时间：10 * 10ms(移动)+100ms(延迟)+2ms(传输)=202ms，读取100个块需要的时间：100ms * 202ms = 20200ms\n磁盘单缓冲区与双缓冲区的读取问题：单缓冲区表示的是同一时间智能有一个任务读或者写缓冲区，也就是串行。双缓冲区表示的是同一时间可以有两个任务访问两个不同的缓冲区，也就是并行。 例题 学霸肯定对了 ↕ 答案：D C\n也可用流水线的公式计算，详见流水线例题 学霸肯定对了 ↕ 答案：C B\n由题意可知每个扇区存放逻辑记录，处理单个记录的延时为：33/11+3=6ms，由于磁头处于r0的开始处，且是单缓冲区（同一时间只能一个任务读或者写缓冲区）顺序处理这些记录，所以6+10*(33+3)=366；若对存储信息进行优化，优化后为：r0r6r1r7r2r8r3r9r4r10r5，r0和r5收尾相接形成一个完整的磁道。此时只需要转2圈就可以把数据处理完。\n3 数据传输控制方式 ✅ # 用于主存和外设交换数据。\n3.1 程序查询方式 ✅ # CPU主动查询外设是否完成数据传输，如果没有CPU持续查询并等待I/O，效率极低。\n3.2 程序中断方式 ✅ # 外设开始或者完成数据传输后，向CPU发送中断，等待CPU处理数据，效率相对较高，中断响应时间指的是从发出中断请求到开始进入中断处理程序;中断处理时间指的是从中断处理开始到中断处理结束。中断向量提供中断服务程序的入口地址。多级中断嵌套，使用栈来保护断点和现场。如鼠标键盘\n3.3 DMA方式 ✅ # CPU只需完成必要的初始化等操作，数据传输的整个过程都中，都由DMA控制器来完成，在主存和外设之间建立直接的数据通路，效率很高。如硬盘\n例题 学霸肯定对了 ↕ 答案：D C 学霸肯定对了 ↕ 答案：D 4 总线 ✅✅ # 总线(Bus)，是指计算机硬件设备和硬件设备之间传输信息的公共数据通道，它是一组能为多个部件分时共享的公共信息传输线路；即一条总线同一时刻仅允许一个设备发送，但允许多个设备接收，所以总线是半双工模式(单工：只能单向传输，全双工：可以双向传输)。总线有串行总线和并行总线之分，串行总线适合长距离传输(串行总线是按位(bit)传输数据的，其数据的正确性依赖于校验码纠正)，并行总线适合于短距离传输。\n总线具体分为数据总线(并行数据传输位数)、地址总线(系统可管理的内存空间的大小) 、控制总线(传送控制命令)。\n例题 学霸肯定对了 ↕ 答案：B 学霸肯定对了 ↕ 答案：C 学霸肯定对了 ↕ 答案：C\n串行总线可以是单工，半双工，全双工，其波特率在使用中是可以改变的，可以是软件查询方式，也可以是中断方式，所以选C\n5 CISC与RISC ✅ # 例题 学霸肯定对了 ↕ 答案：B\nx86一般是复杂指令系统，arm系统一般是精简指令集\n6 流水线 ✅✅ # 流水线时间计算 流水线周期：指令分成不同执行段(取址、分析、执行)，其中执行时间最长的段为流水线周期。\n流水线执行时间：1条指令总执行时间(也叫流水线建立时间)+ (总指令条数-1)*流水线周期。\n流水线吞吐率计算：吞叶率即单位时间内执行的指今条数。即：指令条数/流水线执行时间。\n流水线最大吞吐率：周期的倒数。\n流水线的加速比计算:加速比即使用流水线后的效率提升度，即比不使用流水线快了多少倍，越高表明流水线效率越高。即：不使用流水线执行时间/使用流水线执行时间。\n例题 学霸肯定对了 ↕ 答案：D C B C\n解析：设每个盘块儿读入缓冲区的时间为t1、缓冲区送入用户区的时间为t2、用户区处理每个盘块儿的时间为t3，为了能够代入流水线执行时间的公式，需要将题目转成标准的流水线。\n对于单缓冲区而言，需要将3阶段流水线转换成2阶段流水线，即第一阶段为t1+t2，第二阶段为t3，所以：流水线执行时间=1条指令总执行时间+ (总指令条数-1)*流水线周期 = (t1+t2)+t3 + (10-1) * 20 = 201\n对于双缓冲区而言，题目已经是标准流水线了，可以直接带入公式，所以：流水线执行时间=1条指令总执行时间+ (总指令条数-1)*流水线周期 = t1+t2+t3 + (10 - 1) * 15 = 156\n流水线的吞吐率，由题目可知，已是标准流水线，可直接带入公式算吞吐率，设执行了N条指令，n/9t+(n-1) * 3t，即(n/(3n+6)) * (1/t)，当n趋于无穷大时，得到最大吞吐率为1/3t\n流水线的加速比是\u0026gt;=1的，流水线的加速比=不使用流水线执行时间/使用流水线执行时间，不使用流水线执行时间=10 * (2+1+3+1+2)=90，使用流水线执行时间=9+(10-1) * 3=36，即90/36=5/2\n7 校验码 ✅ # 校验码是在信息位之外添加额外的bit位，不同的校验方式，加的bit位的位数和位置不同\n7.1 奇偶校验码 ✅ # 奇偶校验码:在编码中增加1位校验位来使编码中1的个数为奇数(奇校验)或者偶数(偶校验)，编码中，含有奇数个1，发送给接收方，接收方收到后，会计算收到的编码有多少个1，如果是奇数个，则无误，是偶数个，则有误。\n特点：奇偶校验可检查出1位错位，不可纠错。\n7.2 循环冗余码 ✅ # 特点：可检错不可纠错。接收方拿到信息串/生成多项式=0则没错，不为0则传输过程中错误。\n例题 学霸肯定对了 ↕ 答案：A\n解析：补零：原始信息串为1100，生成多项式为3阶，则补3个0，即被除数为：1100000，除数也是根据生成多项式来的，幂指数存在的为1，不存在的为0，即1011(题目已经给出了，未给出的时候要知道是这样算的)，异或相除将余数010(不足3位的在左边补0)添加到原始信息串1100后面得到1100010，即选A\n7.3 海明码 ✅ # 特点：可检错，也可纠错，知道添加多少位，以及某一位用哪些校验位校验就行。\n添加的位数：2^k-k \u0026gt;= n+1就行，n是数据的位数。\n某一位由哪些位校验参考例题。\n例题 学霸肯定对了 ↕ 答案：D B\n解析：带入公式2^k-k \u0026gt;= n + 1，可得k\u0026gt;=6就行，所以需要6位。读题目可知D5是第10位，用8+2校验，故选B\n课后习题 # todo 计算机组成与体系结构习题\n"},{"id":2,"href":"/docs/example/architect-exam/3.16-%E8%AE%BA%E6%96%87%E5%86%99%E4%BD%9C%E4%B8%93%E6%A0%8F/1-nosql%E6%8A%80%E6%9C%AF%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8/","title":"NoSQL数据库技术及其应用","section":"3.16 论文写作专栏","content":" 题目：NoSQL 数据库技术及其应用 # 随着互联网web2.0网站的兴起，传统关系数据库在应对web2.0网站，特别是超大规模和高并发的web2.0纯动态SNS网站上已经显得力不从心，暴露了很多难以克服的问题,而非关系型的数据库则由于其本身的特点得到了非常迅速的发展。\nNoSQL(Not only SQL)的产生就是为了解决大规模数据集合及多种数据类型带来的挑战，尤其是大数据应用难题。目前NoSQL数据库并没有一个统一的架构，根据其所采用的数据模型可以分为4类:键值(Key-Value)存储数据库、列存储数据库、文档型数据库和图(Graph)数据库。\n请围绕\u0026quot;NoSQL 数据库技术及其应用”论题，依次从以下三个方面进行论述\n1.概要叙述你参与管理和开发的软件项目以及你在其中所担任的主要工作。\n2.详细论述常见的 NoSQL 数据库技术及其所包含的主要内容，并说明 NoSQL 数据库的主要适用场景。\n3.结合你具体参与管理和开发的实际项目，说明具体采用哪种NOSQL数据库技术，并说明架构设计过程及其应用效果。\n摘要 # 我所在的国内某头部互联网公司，在2021年4月决定搭建一套全新的移动设备指纹分析处理平台项目，该项目的建设目标是为集团提供高效、可靠的移动设备指纹分析、存储及唯一标识移动设备能力，为公司各业务线的安全做好重要的底层支撑；我荣幸地担任本次系统开发的架构师，主要负责整个系统的架构设计、对项目的技术活动进行指导和协调。经调研发现，该系统需要支持海量数据的读写，并在峰值QPS达到7万的高并发场景下保持高度的可用性，所以选择了非关系型数据库与关系型数据库相互融合的技术作为该项目在存储上的解决方案。本文着重介绍了常见的NoSql技术及其使用场景，同时详细探讨了在该项目中如何实际应用和部署非关系数据库。实践证明：恰当地使用NoSql数据库，使得系统的开发取得了成功，目前系统已稳定运行1年多，赢得了亿级用户的一致好评。\n正文 # 随着移动互联网技术的迅猛发展，包括手机、平板在内的移动设备已经成为人们生活中不可或缺的一部分，为我们带来了更便捷的信息获取和沟通方式。在这样的时代背景下，我就职的国内最大的社交媒体平台之一的公司，于2021年4月做出了一项决策：建设一个全新的移动设备指纹分析处理平台项目。该项目旨在给集团提供全面的移动设备指纹分析、存储和唯一标识移动设备的能力，为公司的多元化的业务体系提供坚实的底层支持。移动设备的广泛应用和迅速增长的用户基础使得此类系统的需求变得尤为迫切，在这样的挑战之下，我们面临着如何处理日活约2.6亿的移动设备指纹的读写、以及峰值QPS达7万的高并发场景下保持系统的高可用性。移动设备指纹指的是标识移动设备本身的信息，如系统版本、手机品牌等信息。\n作为这一重要项目的核心，我有幸被委以重任，担任本次系统开发的架构师。我的职责包括系统整体的架构设计，以及对项目中的技术活动进行指导和协调等。在经过深入的调研和分析之后，发现该系统需要处理海量的读写需求，同时还要在高峰时段高达7万的每秒查询数(QPS)的高并发场景下保持卓越的可用性。我意识到，即使基于读写分离、分库分表的关系型数据库集群在面对如此巨大的数据量和流量的压力时，也会显得力不从心。面对这一挑战，我决定采用一种融合了关系数据库与非关系数据库特点的解决方案，从而在存储与性能层面找到了平衡。\n本文将深入探讨这一技术方案的实际应用。特别是，将重点介绍常见的NoSql技术及其适用场景，探讨如何在该项目中合理应用和部署非关系数据库。\n键值对数据库的基本单位是一对键值，其中键是数据的唯一标识符，值则是与键相关联的数据，值可以是字符串、列表、集合、有序集合、哈希表类型，这样简单的数据结构，使得其拥有非常强大的灵活性，适用于分布式ID、热门榜单、高速缓存等实时数据处理场景。键值对数据库通常对数据的读写进行了优化，所以适合用于一些高并发场景；Redis是键值对数据库的代表，以其每秒11万次读、8万次写的高并发和易于横向扩展的集群而著名。\n文档数据库可认为是键值对数据库的一个升级，升级之处在于存储的值是以Json、Bson为代表的半结构化数据；相比于键值对数据库，文档数据库拥有更为复杂的数据查询能力。通常用于存储半结构化、变化频繁或不规则的数据，适用场景通常有：日志、社交媒体数据等。其代表产品是MongoDB。\n与关系数据库不同的是，列式数据库的存储方式是按列存储。列式数据库中同一列的相似数据使得压缩率更高，适用于海量数据的场景；在查询分析时通常涉及到对列的聚合、统计操作，所以列式数据库在这样的场景下更是游刃有余。其代表产品是HBase。\n图数据库的基本存储单位是以节点和边组成的图模型数据，节点和边的动态增减使得图数据库拥有非常强大的灵活性，图的遍历带来了强大的查询分析能力，合适用于社交网络数据，推荐系统和知识图谱等场景。其代表产品是Neo4j。\n时间序列数据库通常以时间为索引，所以能高效地进行聚合查询，如计算平均值、求和、最大最小值、斜率以及标准差等；非常适用于监控和报警的场景，其代表产品有TSDB。\n我权衡了关系型和非关系型数据库各自的优缺点，根据项目的实际情况，选择了关系型数据库mysql存储业务上的结构化数据，用非关系型数据库Redis、HBase、TSDB存储非结构化或者半结构化数据；将两者搭配起来共同作为本系统的数据支撑。我从本项目服务的各职能部门的角度进行分类，将系统抽象成与各个职能部门对应的子系统，如商业化子系统、数据仓库子系统、监控报警子系统。\nRedis在商业化子系统中发挥着重要的作用。该系统面临的主要问题是峰值QPS达到7万高并发的海量数据；对此，我采用了读写分离和主从同步的分布式集群架构，考虑到集团业务的复杂性，我为该系统设计了19个Redis实例，其中最大的实例是用于存储“用户与设备关系”，包含了128个端口，并且每个端口都使用了长链接的连接池保持服务的稳定性；通常来说从库负责读，主库负责写，但是由于各业务数据之间存在一定程度的耦合，使得我们需要格外注意分布式存储架构中各数据节点的一致性问题，对此我们采用了两种策略，一是对于数据一致性要求很高且修改量不大的接口(如：用户修改设备名称)，永远从主库读取该数据，保证用户提交的数据能立刻被自己查询；二是对于更通用的场景，我们在客户端记录最近一次写入主库的时间戳，请求来了首先查询从库，如果从库的时间戳不够新，再去查询主库并返回数据。这两种策略都用主从同步来兜底，从而有效地保证了数据的最终一致性。为了优化系统性能、提高内存使用效率，我们对每个Redis实例中的数据都设置了合理的过期时间，这样可以确保热数据一直保存在缓存中，而冷数据则会被自动删除。此外我们还利用Redis自增key的特性，对系统中各个重要功能做了接口调用的频次限制，以确保接口调用的合理性，如：在1小时内，一个IP下的同一个移动设备调用该接口不能超过1800次等。我们还将Mysql和Redis对数据的\u0026quot;增删改查\u0026quot;操作封装成了一个独立的联邦数据库，在保证了数据一致性的前提下，为外部提供了统一且高效的数据查询接口。总之，通过以上优化措施，我们成功地解决了商业化子系统中的痛点问题，在降低企业服务器成本的同时，极大地提高了系统的性能和服务质量。\nHBase在数据仓库子系统中扮演了重要角色。在个保法及用户授权的情况下，我们采集了移动设备本身的273项经过脱敏处理的指纹信息，包括系统类型、国际移动设备识别码IMEI、是否双开应用、是否手机模拟器等；商业化子系统中的4个采集指纹的接口，将每天约2.6亿的移动设备指纹的全量信息格式化到HBase的二维表中，使得该表每日数据量高达2TB。为了提高查询分析性能，我们对该表设计了按天、按系统类型分区，这种方法可以有效地将数据按照时间和系统类型进行组织，使得查询和分析操作更加高效，为项目中的各项决策提供了强有力的数据支持。\nTSDB是监控报警子系统中的核心组件。通过prometheus在程序代码中埋点，将程序执行状态的实时数据不间断地写入到TSDB中，通过对这些数据按时间进行聚合查询，我们对部署在全国各地的服务器资源、redis等软件资源以及商业化子系统中的42个接口均做了翔实的监控与报警，并将报警信息实时发送到通讯软件中。例如：该系统报警指出数据中心XX市的redis查询操作在每天早上8时左右的P99高于既定阈值，数据中心XX市的某服务器的接口调用错误量高于既定阈值等。TSDB为系统提供了可靠的时间序列数据存储和实时查询能力，其支持的实时监控和报警，为系统平稳、可靠、高效地运行提供了坚实的支持。\n经历了一年半的开发，该项目于2022年10月成功上线，并且在过去的一年多时间里，系统架构稳定运行，实现了项目的既定目标，赢得了过亿用户一致好评。虽然我们取得了这些成就，但也意识到了一些不足之处，特别是在自动化运维方面。这些挑战带给我们宝贵的经验和教训，为未来的工作提供了重要的参考，这正是我最大的收获。\n"},{"id":3,"href":"/docs/example/","title":"介绍","section":"Docs","content":" 关于博客 # 这个博客是我个人开设的第二个博客，主要用于记录作者在计算机行业摸爬滚打10余年的经历、各类资料干货以及学习心得等，持续更新中\u0026hellip;\u0026hellip;\n本项目的所有的免费资源均挂载在github，地址为：https://github.com/yswang837/yswang837.github.io，同时欢迎热爱开源的朋友fork下来，提交给我你的代码，让我们一起完善这个项目吧；如果你认为本博客帮助了你，欢迎star。\n请你在阅读本站内容时，时刻持有一种质疑的态度，这样不仅能够帮助自己思考，也能发现我文章的不足之处；文章中难免引用到来自网络的各类资料，如果你觉得侵犯了你的版权，请联系我，我将立即删除；如果文章中有什么错漏的地方请大家见谅，也欢迎大家随时加我微信wys837帮我指正，希望与大家一起进步。感谢！\n关于作者 # 笔名：hello 小代\n微信：wys837\ngithub: https://github.com/yswang837\n"},{"id":4,"href":"/docs/example/architect-exam/3.10-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/2-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E9%A3%8E%E6%A0%BC/","title":"2) 软件架构风格","section":"3.10 软件架构设计","content":" 2.软件架构风格 ✅✅✅✅✅ # 软件架构风格是指描述特定软件系统的组织方式和惯用模式。组织方式描述了系统的组成构件和这些构件之间的拓扑关系，惯用模式则反映众多系统共有的结构和语义。以下是常见风格的特点或应用：\n批处理\u0026mdash;\u0026gt;无用户交互，传统编译器(优先认为是批处理)，网络报文处理(优先认为是批处理)。\n管道过滤器\u0026mdash;\u0026gt;流式数据，若用户交互，传统编译器，网络报文处理。\n层次架构\u0026mdash;\u0026gt;采用层次化架构风格的系统，划分的层次越多，系统性能越差。\n过程控制\u0026mdash;\u0026gt;控制系统，其特点是不断采集系统当前状态，与系统中的设定状态进行对比，并通过将当前状态与设定状态进行对比从而进行控制。\n隐式调用\u0026mdash;\u0026gt;回调机制，采用隐式调用架构风格的系统，可以通过处理函数的并发调用提高系统处理性能。注意把隐式调用转为显示调用并不能提高系统性能。\n事件驱动系统\u0026mdash;\u0026gt;注册事件处理的是回调函数，当某个界面事件发生时(例如键盘敲击、鼠标移动等)，系统会查找并选择合适的回调函数处理该事件，windows系统。\n解释器\u0026mdash;\u0026gt;运行时的系统自定义行为与改变的能力，采用解释器架构风格的系统，可以通过部分解释代码预先编译的方式提高系统性能。\n规则系统\u0026mdash;\u0026gt;在解释器的基础上增加经验规则，适用于专家系统。\n黑板风格\u0026mdash;\u0026gt;信号处理领域，语音识别系统是一个十分典型的专家系统，其特点是求解的正确结果不止一个，求解过程比较复杂，需要通过专家知识和反馈逐步得到正确结果。\n虚拟机风格\u0026mdash;\u0026gt;通过虚拟机架构屏蔽不同的硬件环境。\nC2体系结构风格\u0026mdash;\u0026gt;通过连接件绑定在一起的按照一组规则运作的并行构件网络。\n数据仓库\u0026mdash;\u0026gt;现代集成开发环境(现代编译器)。\n下图是架构师考试中常见的架构风格及其子风格，接下来会详细介绍每一种风格。 2.1 数据流风格 ✅✅✅✅✅ # 数据流风格以数据驱动的方式推进项目，其的典型应用有传统编译器、网络报文处理，它包含2个子风格：\n1、批处理。做题要点：大量整体数据、无需用户交互\n2、管道过滤器。做题要点：流式数据、弱用户交互，对于采用管道-过滤器架构风格的系统，可以通过引入过滤器的数据并发处理提高系统性能。\n具体如下图：\n一个软件的架构设计是随着技术的不断进步而不断变化的。以编译器为例，其主流架构经历了批处理(或管道-过滤器)到数据共享为中心(数据仓库)的转变过程。早期的编译器采用批处理(或管道-过滤器)架构风格，以文本形式输入的代码被逐步转化为各种形式，最终生成可执行代码。现代的编译器采用以数据共享为中心的架构风格，主要关心编译过程中程序的中间表示。分析树是在语法分析阶段结束后才产生作为语义分析的输入，分析树是数据中心中重要的共享数据，为后续的语义分析提供了帮助。\n2.2 调用/返回风格 ✅✅✅✅✅ # 调用/返回风格包含3个子风格：\n1、主程序/子程序风格\n2、面向对象风格，可以通过减少功能调用层次提高系统性能，注意对象管理层并不能提高系统性能，反而会降低性能(层次越多性能越差)。\n3、分层风格，将在“2.8 架构风格具体实例”中详细说明\n2.3 独立构建风格 ✅✅✅✅✅ # 独立构建区别于返回/调用风格的点在于，相对松耦合，且放弃了对子程序的控制，它包含2个子风格：\n1、进程通信\n2、事件驱动系统（隐式调用）\n2.4 虚拟机风格 ✅✅✅✅✅ # 虚拟机风格包含2个子风格：\n1、解释器风格，做题关键字：需要自定义规则的场景\n2、规则系统，做题关键字：在解释器的基础上增加经验规则；\n2.5 仓库风格 ✅✅✅✅✅ # 仓库风格包含2个子风格：\n1、数据库系统\n2、黑板系统\n2.6 闭环控制风格(过程风格) ✅✅✅✅✅ # 不适合于复杂的系统。\n2.7 C2架构风格 ✅✅✅✅✅ # C2属于层次架构风格，做题要点：由构件和连接件组成。\n例题 学霸肯定对了 ↕ 1.虚拟机 2.数据流 3.隐式调用 4.解释器 5.过程控制 学霸肯定对了 ↕ 1.黑板 2.解释器 3.事件驱动风格 学霸肯定对了 ↕ 1.顺序批处理 2.数据共享 3.隐式调用风格 4.适配 5.虚拟机 案例分析例题 学霸肯定对了 ↕ 2.8 架构风格具体实例 ✅✅✅✅✅ # 没有最好的架构，只有更适合具体业务场景的架构。分层架构的脆弱性在于：底层发生错误可能会导致整个系统无法正常运行、层与层之间引入通信机制势必造成性能下降，层分的越多，性能越差。\n2.8.1 从 C/S -\u0026gt; 混合架构 ✅✅✅✅ # 属于层次架构风格的实例。C/S系统开发时可以采用不同的分布式架构：双层C/S将频繁变动的业务逻辑代码(功能层)迁入到客户端上，三次C/S将客户端、功能层、数据层分别放在不同的地方，B/S不需要下载客户端，混合架构融合了C/S和B/S的优势。详情见下。\n双层C/S架构 通过图示可以看出非常明显的缺点：将业务逻辑的代码嵌入进客户端，在早期互联网并不普及的情况下，频繁变更的业务逻辑代码和难以推广升级的客户端存在巨大矛盾。\n三层C/S架构 相比于双层C/S架构，三层C/S架构的优势在于：将业务逻辑层(或者叫功能层)单独拆分出来(独立于数据库服务器、用户客户端)放在单独的服务器上(应用服务端)，经常变更的业务逻辑代码并不会直接影响到客户端的使用。其劣势依然需要用户安装客户端(你可以认为就是手机中的APP)。\nB/S架构 相比于C/S架构，B/S架构也有自己的优缺点\n优势：推广容易，不需要用户下载什么客户端之类的，只需要浏览器访问对应地址即可，这也就是早期各大厂都是从门户网站起家的。现在由于互联网的普及，推广和升级APP变得相对容易，也就会先出现APP(如抖音、拼多多)，后出现网页。\n劣势：响应速度较慢，早期只能提交整个页面数据(不能局部刷新)、其安全性较低、用户体验相对较差等，现在基本上解决的挺好的了。 混合架构 结合了C/S和B/S的优势，左图适用于企业内部的软件，对系统的维护有优势；右图适用于主流互联网公司的架构，查询用B/S、修改用C/S架构。总之，C/S更适合内部做修改，B/S更适合外部做查询。\n2.8.2 MVC架构风格 ✅✅✅ # 属于层次架构风格的实例。\nMVC(Model-View-Controller)，Model(模型) 是应用程序中用于处理应用程序数据逻辑的部分，通常模型对象负责在数据库中存取数据。View(视图) 是应用程序中处理数据显示的部分，通常视图是依据模型数据创建的。Controller(控制器)是应用程序中处理用户交互的部分，通常控制器负责从视图读取数据，控制用户输入，并向模型发送数据。\nMVC分为主动MVC和被动MVC(具体不用了解)，MVC架构的缺点在于MV之间没有解耦，不是严格的分层架构(严格的分层架构：当前层之和上下层之间有联系)\n在J2EE中(java相关的框架在考试中经常被拿来举例子，因此会java的很有优势)，Model是EJB(Enterprise JavaBeans)，View界面是JSP(Java Server Pages)；Controller是Servlet，用于分发客户请求、有效组织其他构建为客户端提供服务，其核心业务逻辑由Session Bean构建实现。\n2.8.3 MVP架构风格 ✅✅ # 属于层次架构风格的实例。\nMVP(Model-View-Presenter)，注意：它不是LOL中的MVP，它是MVC的变种，它实现了MV之间的解耦。\n2.8.4 MVVM架构风格 ✅✅ # 属于层次架构风格的实例。\nMVVM(Model-ViewModel-View),类似于vue中的双向数据绑定，View改变则ViewModel也改变，反之亦然。\n2.8.5 RIA架构风格 ✅✅ # 属于层次架构风格的实例。\nRIA(富互联网架构)类似于综合了C/S和B/S架构的优点(C/S反应快，交互强，B/S易传播，B/S交互能力不那么强，一般以文字和图片为主)，它在首次加载初期比较慢，一旦加载完成使用就快多了。典型的例子就是在线网游、小程序。\n2.8.6 基于服务的架构SOA ✅✅✅✅✅ # SOA(Service-Oriented Architecture)，服务是一种为了满足某项业务需求的操作、规则等的逻辑组合，它包含一系列有序活动的交互，为实现用户目标提供支持。服务可认为是标准化程度很高的一种构件。经典场景：对历史遗留系统进行集成。 1、服务构件粗粒度，传统构件细粒度居多。\n2、服务构件的接口是标准的，主要是WSDL(Web Service Describe Language)接口，传统构件常以具体API(Application Program Interface)形式出现。\n3、服务构件的实现与语言无关，传统构件绑定某种特定语言。\n4、服务构件可以通过构件容器提供QOS的服务(即服务质量。在有限的带宽资源下，QoS为各种业务分配带宽，为业务提供端到端的服务质量保证。例如，语音、视频和重要的数据应用在网络设备中可以通过配置QoS优先得到服务)，传统构件完全由程序代码直接控制。\nSOA的实现方式1：ESB企业服务总线。ESB提供了位置透明性的消息路由和寻址服务，ESB支持多种的消息传递范型，ESB支持多种数据格式及其相互转换。\nSOA的实现方式2：Web Service；服务请求者可以通过域名或者IP直接访问服务提供者，但当服务过多、关系过于复杂、或者忘记了域名或者IP时，使得访问变得困难，此时服务注册中心就排上了用场，所有服务提供者需要将服务描述提供给注册中心，服务请求者只需要访问注册中心即可。基于Web Services实现的面向服务系统中，服务提供者、服务请求者和服务注册器之间的远程交互通过SOAP(简单对象访问协议)消息实现，服务内容描述通过WSDL(Web服务描述语言，可以看作服务使用说明书)标准实现，服务注册信息通过UDDI(服务统一描述、发现和集成)框架实现，通过BPEL/BPEL4WS (业务过程执行语言)将分散的、功能单一的Web服务组织成一个复杂的有机应用。\n2.8.7 微服务 ✅✅✅✅ # 微服务顾名思义，就是很小的服务，所以它属于面向服务架构SOA的一种。\n微服务架构是一种架构模式，它提倡将单一应用程序划分成一组小的服务，服务之间互相协调、互相配合，为用户提供最终价值。每个服务运行在其独立的进程中，服务与服务间采用轻量级的通信机制互相沟通 (通常是基于HTTP协议的RESTfulAPI)。每个服务都围绕着具体业务进行构建，并且能够被独立的部署到生产环境、类生产环境等。另外，应当尽量避免统一的、集中式的服务管理机制，对具体的一个服务而言，应根据业务上下文，选择合适的语言、工具对其进行构建。\n其特点有：\n1、小,且专注于做一件事情。\n2、轻量级的通信机制。\n3、松耦合、独立部署。\n微服务和单体架构服务的对比，微服务类似于活字印刷，单体架构服务类似于版式印刷。\n微服务的优势：\n1、技术异构\n2、弹性扩展\n3、在自动化部署情况下，能简化部署\n4、可组织性\n微服务的劣势：\n1、分布式系统的复杂度\n2、运维成本\n3、服务间的依赖管理和测试\n4、部署自动化\nSOA与微服务的对比 2.8.8 MDA ✅✅ # 模型驱动架构。是形式化方法下的产物。\n平台无关模型通过变换工具转为平台相关模型，再通过变换工具转为代码code\n"},{"id":5,"href":"/docs/example/architect-exam/3.2-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/","title":"3.2 操作系统","section":"3. 高级软考 - 系统架构师","content":" 目录 ✌ # 本章内容的考试方式主要集中在上午的选择题里面，在下午的案例分析题里面考到过操作系统特性、分类及作用，正常约占6~8分，占比8%~10.7%\n1 操作系统概述 ✅✅✅ # 操作系统是裸机上的第一层软件，它管理着系统的软硬件资源，控制着程序的运行，是应用软件和硬件之间的接口，也是人机交互的接口。它可以管理系统中的进程、存储、文件、设备以及作业，加粗的4个点将在后续小节详细说明。\n操作系统为用户提供了两类接口：操作一级的接口和程序控制一级的接口。其中，操作一级的接口包括操作控制命令、菜单，程序控制一级的接口包括系统调用。\n例题 学霸肯定对了 ↕ 答案：B 1.1 操作系统的组成及作用 ✅✅✅ # 操作系统的组成 通常由操作系统内核 (Kernel) 和其他许多附加的配套软件所组成，包括图形用户界面程序、为支持应用软件开发和运行的各种软件构件(如应用框架、编译器和程序库等)、常用的应用程序(如任务管理器、防火墙、网络浏览器等)。\n其中，内核指的是能提供进程管理(任务管理)、存储管理、文件管理和设备管理等功能的那些软件模块，它们是操作系统中最基本的部分，用于为众多应用程序访问计算机硬件提供服务。由于应用程序直接对硬件操作非常复杂，所以操作系统内核对硬件设备进行了抽象，为应用软件提供了一套简洁、统一的接口(称为系统调用接口或应用程序接口 API)。内核通常都驻留在内存中，它以 CPU 的最高优先级运行，能执行指令系统中的特权指令，具有直接访问各种外设和全部主存空间的特权，负责对系统资源进行管理和分配。\n操作系统的三大作用 (1) 管理计算机中运行的程序和分配各种软硬件资源。计算机中一般总有多个程序在运行.这些程序在运行时都可能要求使用系统中的资源(如访问硬盘，输出信息到屏幕等)，此时操作系统就承担着资源的调度和分配任务，以避免冲突，保证程序正常有序地运行。操作系统的资源管理功能主要包括处理器管理、存储管理、文件管理、I/O 设备管理等几个方面。\n(2) 为用户提供友善的人机界面。人机界面的任务是实现用户与计算机之间的通信(对话)。几乎所有操作系统都向用户提供图形用户界面 (GUI)。\n(3) 为应用程序的开发和运行提供一个高效率的平台。操作系统屏蔽了几乎所有物理设备的技术细节，它以规范、高效的方式 (例如系统调用、库函数等)向应用程序提供了有力的支持，从而为开发和运行其他系统软件及各种应用软件提供了一个平台。\n1.2 操作系统的特性 ✅✅✅ # 并发性 在多道程序环境下，并发性是指在一段时间内，宏观上有多个程序同时运行，但实际上在单CPU的运行环境，每一个时刻只有一个程序在执行。因此，从微观上来说，各个程序是交替、轮流执行的，如果计算机系统中有多个 CPU，则可将多个程序分配到不同 CPU 上实现并行运行。\n共享性 共享是指操作系统中的资源(包括硬件资源和信息资源)可以被多个并发执行的进程(线程)共同使用，而不是被一个进程所独占。\n不确定性 但由于资源有限，在多数情况下进程的执行不是一贯到底的，而是“走走停停”。例如一个进程，在 CPU上运行一段时间后，由于等待资源或某事件发生，它被暂停执行，将 CPU 转让给另一个进程执行。系统中的进程何时执行，何时暂停，以什么样的速度向前推进，进程总共要花多少时间执行才能完成，这些都是不可预知的。\n2 操作系统的分类 ✅✅✅ # 2.1 批处理操作系统 ✅✅ # 单道批处理系统： 单道批处理操作系统是一种早期的操作系统，用户可以向系统提交多个作业，“单道”的含义是指一次只有一个作业装入内存执行。作业由用户程序、数据和作业说明书(作业控制语言)3个部分组成。当一个作业运行结束后，随即自动调入同批的下一个作业，从而节省了作业之间的人工干预时间，提高了资源的利用率。\n多道批处理操作系统 允许多个作业装入内存执行，在任意一个时刻，作业都处于开始点和终止点之间。每当运行中的一个作业由于输入/输出操作需要调用外部设备时，就把 CPU 交给另一个等待运行的作业，从而将主机与外部设备的工作由串行改变为并行，进一步避免了因主机等待外设完成任务而浪费宝贵的 CPU 时间。多道批处理系统主要有3 个特点:多道、宏观上并行运行和微观上串行运行。\n2.2 分时操作系统 ✅ # 在分时操作系统中，一个计算机系统与多个终端设备连接。分时操作系统是将 CPU 的工作时间划分为许多很短的时间片，轮流为各个终端的用户服务。例如，一个带 20 个终端的分时系统，若每个用户每次分配一个 50ms 的时间片，则每隔 1s 即可为所有的用户服务一遍。因此,尽管各个终端上的作业是断续运行的，但由于操作系统每次对用户程序都能做出及时响应，因此用户感觉整个系统均归其一人占用。\n2.3 实时操作系统 ✅✅✅ # 实时操作系统又可以叫做实时嵌入式操作系统(拥有嵌入式操作系统的所有特点)，其中实时是指计算机对于外来信息能够以足够快的速度进行处理，并在被控对象允许的时间范围内做出快速响应。实时系统对交互能力要求不高，但要求可靠性有保障。实时系统分为实时控制系统和实时信息处理系统。实时控制系统主要用于生产过程的自动控制，例如数据自动采集、武器控制、火炮自动控制、飞机自动驾驶和导弹的制导系统等。实时信息处理系统主要用于实时信息处理，例如飞机订票系统、情报检索系统等。RTOS是嵌入式操作系统的一种，RTOS可以根据应用环境的要求对内核进行裁剪和重配。RTOS的首要任务是调度一切可利用的资源来完成实时控制任务。RTOS实质上就是一个计算机资源管理程序，需要及时响应实时事件和中断。\n混成系统是嵌入式实时系统的一种重要的子类。混成系统一般由离散分离组件和连续组件并行或串行组成，组件之间的行为由计算模型进行控制。\n评价RTOS好坏的指标(主要是任务切换时间方面) 跟中断处理相关的时间指标有：中断延迟时间、中断响应时间（嵌入式系统采用中断方式实现输入输出的原因在于中断相应足够块，CPU的断点信息一般保存在栈中）。\n系统响应时间：对用户的输入或请求作出反应的时间。\n信号量混洗时间：指从一个任务释放信号量到另一个等待该信号量的任务被激活的时间延迟。\n实时操作系统任务调度算法 实时系统存在多种调度算法，在RTOS中，大多数的RTOS调度算法都是抢占式的。\n优先级调度算法: 分配一个相对固定的优先顺序，然后调度程序根据优先级的高低排序，按时间顺序进行高优先级任务优先调度。(非抢占式)\n抢占式优先级调度算法:是在优先级调度算法基础上，允许高优先级任务抢占低优先级任务而运行。\n时间轮转调度算法:调度程序会依次调度每个任务运行一个小的时间片，然后再调度另一个任务。每个任务运行完一个时间片，无论是否结束都会释放CPU让下一个任务运行。(纯粹的时间轮转调度无法满足实时系统的要求，取而代之的是基于优先级的抢占式时间。\n最晚截止期调度算法:当某任务执行接近自己的截止期(deadline)时，调度算法将把该任务的优先级调整到系统最高优先级。\n最早截止期调度算法，指调度程序按每个任务的结束时间排序，能越早结束的任务就优先分配执行，即小作业优先。\n例题 学霸肯定对了 ↕ A 学霸肯定对了 ↕ B 2.4 嵌入式操作系统 ✅✅✅ # 嵌入式操作系统特点:(1) 微型化、(2) 代码质量高、(3) 专业化、(4) 实时性强、(5) 可裁减、可配置，注意通用性不是其特点。针对不同的硬件平台，操作系统通常建立在一个硬件抽象层(HAL)或者板级支持包上(HAL或BSP，硬件抽象层或板级支持包与硬件密切相关，可对操作系统隐藏硬件的多样性；它们将操作系统与硬件平台隔开；使得软硬件的设计与调试可以并行。它们不存在任务调度，任务调度是操作系统干的事儿)。\n嵌入性、专用性和计算机系统是嵌入式系统的三个核心要素。\n嵌入式系统的初始化过程：片级初始化-\u0026gt;版级初始化-\u0026gt;系统初始化\nJTAG接口是用来进行CPU调试的常用接口。\n嵌入式数据库管理系统一般不支持多线程并发操作。\n嵌入式系统间进行异步串行通信时，通常采用移位寄存器来实现数据的串并和并串转换。\n看门狗 (WatchDog)是嵌入式系统中一种常用的保证系统可靠性的技术，看门狗定时器超时会产生看门狗中断。\n在SoC中软硬件的结合是十分紧密的，软件和硬件之间的功能划分以及它们的实现并没有固定的模式，而是随着应用的不同而变化。\n在宿主机上必须采用交叉编译器来生成目标机的可执行代码。\n低功耗采用的手段 嵌基于硬件的低功耗设计：板级电路低功耗设计，选择低功耗处理器，总线的低功耗设计;接口驱动电路的设计，分区分时供电技术。\n嵌基于软件的低功耗设计：编译优化技术 (指令开销)，软件与硬件的协同设计 (硬件功能交由软件完成)，算法优化 (低时间复杂度)。\n例题 学霸肯定对了 ↕ C 学霸肯定对了 ↕ D 学霸肯定对了 ↕ B 学霸肯定对了 ↕ A 2.5 网络操作系统 ✅ # 网络操作系统是使联网计算机能方便而有效地共享网络资源，为网络用户提供各种服务的软件和有关协议的集合。\n2.6 分布式操作系统 ✅ # 分布式计算机系统是由多个分散的计算机经连接而成的计算机系统，系统中的计算机无主次之分，任意两台计算机可以通过通信交换信息。通常，为分布式计算机系统配置的操作系统称为分布式操作系统。分布式操作系统能直接对系统中的各类资源进行动态分配和调度、任务划分、信息传输协调工作，并为用户提供一个统一的界面与标准的接口，用户通过这一界面实现所需要的操作和使用系统资源，使系统中若干台计算机相互协作完成共同的任务，有效地控制和协调诸任务的并行执行。分布式操作系统是网络操作系统的更高级形式，它保持网络系统所拥有的全部功能，同时又有透明性、可靠性和高性能等特性。\n2.7 微型计算机操作系统 ✅ # 微型计算机操作系统简称微机操作系统，常用的有 Windows、Mac OS、Linux。\n2.8 微内核操作系统 ✅✅ # 现代操作系统大多拥有两种工作状态，分别是核心态和用户态。一般应用程序工作在用户态，而内核模块和最基本的操作系统核心工作在核心态。\n将传统的操作系统代码放置到更高层，从操作系统中去掉尽可能多的东西，而只留下最小的核心(增强了系统的可靠性和可移植性，消息传递机制很好的提供了微内核系统对分布式系统的支持，它系统结构清晰，有利于协作开发，拥有良好的伸缩性和扩展性，其缺点是通讯成本较高，微内核系统运行效率低于传统系统)，称之为微内核。(C/S结构)\n例题 学霸肯定对了 ↕ A 3 进程管理 ✅✅✅✅ # 进程由进程控制块PCB(唯一标识)+程序(描述进程要做什么)+数据(存放进程执行所需的数据)。程序是放在外存中的文件(静态的)，进程是程序的一次执行过程(动态的)。下图是进程和线程的关系，明显看出来选C\n3.1 进程的三态图 ✅✅ # 三态图之间的状态转换就是PV操作来控制的。系统中资源一般分为：\n1、CPU资源： 有 无 无 (分别对应于运行、就绪和阻塞状态)\n2、非CPU资源： 有 有 无\n例题 学霸肯定对了 ↕ A C\n解析：参考进程三态图\n学霸肯定对了 ↕ C C 3.2 进程间的同步互斥 ✅✅✅✅ # 临界资源：各进程间需要以互斥方式对其进行访问的资源。\n临界区：指进程中对临界资源实施操作的那段程序。本质是一段程序代码。\n互斥模型：某资源 (即临界资源)在同一时间内只能由一个进程单独使用(使用包括读和写)，使用时需要加锁，使用完后解锁才能被其他任务使用，属于间接制约关系；如打印机、缓冲区。简单来说：存在资源的竞争。 同步模型：多个任务可以并发执行(进程与进程之间存在协作关系)，只不过有速度上的差异，在一定情况下停下等待，属于直接制约关系，不存在资源上竞争的关系；如生产者和消费者问题。简单来说：存在资源的协作。 由于资源共享与进程合作，并发执行的任务 (进程)之间可能产生相互制约关系，这些制约关系可分为两类:竞争与协作。并发进程之间的竞争关系为互斥，并发进程之间的协作关系体现为同步。同步是因合作进程之间协调彼此的工作而控制自已的执行速度，即因相互合作，相互等待而产生的制约关系。而互斥是进程之间竞争临界资源而禁止两个以上的进程同时进入临界区所发生的制约关系。\n互斥模型的信号量：对临界资源采用互斥访问，使用互斥信号量后其他进程无法访问，它是全局变量，一般用S表示，它的初值为1。\n同步模型的信号量：对共享资源的访问控制，初值一般是共享资源的数量，它是全局变量；一般用S表示，如公司电脑数量。\n3.3 前趋图与PV操作 ✅✅✅✅ # P操作：申请并占用资源，S=S-1，若S\u0026gt;=0，则执行P操作的进程继续执行;若S\u0026lt;0，则置该进程为阻塞状态 (因为无可用资源)，并将其插入阻塞队列。可认为是加锁操作。\nV操作：释放资源，S=S+1，若S\u0026gt;0，则执行V操作的进程继续执行:若S\u0026lt;=0，则从阻塞状态唤醒一个进程，并将其插入就绪队列(此时因为缺少资源被P操作阻塞的进程可以继续执行)，然后执行V操作的进程继续。可认为解锁操作。\nPV操作与互斥模型示例 PV操作与同步模型示例 下图中的进程队列是阻塞进程队列，当S为-3时，可认为是有3个进程在等待资源。\nPV操作在前趋图中的应用 前趋图是一个有向无环图，箭头的结束位置为P操作，箭头的开始位置为V操作\ngithub摘抄\n进程通常分为就绪、运行和阻塞三个工作状态。三个状态之间的转换就是靠PV操作来控制的。信号量的值只能由PV操作来改变。信号量是最早出现的用来解决进程同步与互斥问题的机制。P表示获得，V表示释放；P和V是荷兰语两个单词的首字母。\n信号量（Semaphore）由一个值和一个指针组成，指针指向等待该信号量的进程队列(阻塞队列)。信号量的值表示相应资源的使用情况。\n信号量S\u0026gt;=0时，S表示可用资源的数量。 当S\u0026lt;0时，表示已经没有可用资源，S的绝对值表示当前等待该资源的进程数。请求者必须等待其他进程释放该类资源，才能继续运行。 执行一次P操作意味着请求分配一个资源，因此S的值减1； 执行一个V操作意味着释放一个资源，因此S的值加1；此时若S\u0026lt;=0，表示有某些进程正在等待该资源，因此要唤醒一个等待状态的进程，使之运行下去。\nS大于0那就表示有临界资源可供使用，为什么不唤醒进程？ S大于0的确表示有临界资源可供使用，也就是说这个时候没有进程被阻塞在这个资源上，所以不需要唤醒。\n如果是互斥信号量的话，应该设置信号量S=1，但是当有5个进程都访问的话，最后在该信号量的链表里会有4个在等待，也是说S=-4。\nS的绝对值表示等待的进程数，同时又表示临界资源，这到底是怎么回事？ 当信号量S小于0时，其绝对值表示系统中因请求该类资源而被阻塞的进程数目；S大于0时表示可用的临界资源数。注意在不同情况下所表达的含义不一样。当等于0时，表示刚好用完。\n例题 学霸肯定对了 ↕ 答案：B A\n解析：考察同步互斥，售票肯定是互斥模型，它不存在两个进程因速度不同而互相等待的情况；互斥信号量的初始值为1，同步信号量的初始值为资源数量，售票之前加锁，出票或无票时解锁。\n学霸肯定对了 ↕ 答案：C A\n解析：箭头起始位置为V操作，箭头结束位置为P操作。按图示分析即可。\n3.4 死锁 ✅✅ # 死锁就考死锁资源的计算。\n例题 学霸肯定对了 ↕ 答案：B\n解析：当前可用资源R1为9-7=2，R2为8-7=1，R3为5-5=0，进程P1的仍需R1资源数为6-1=5，以此类推算出所有进程的所有仍需资源数，发现首先执行P2，P2执行完成后，会释放P2的资源，即当前的发现可用资源210+211=421，即可算出是答案B\n4 存储管理 ✅✅✅✅ # 外存往内存调用数据\n4.1 分页存储管理 ✅✅✅✅ # 分页存储管理管理的是内存和外存之间的数据(同cache和内存之间的管理一样，只不过cache和内存之间靠的是硬件，而内存与外存靠的是软件（页表），这里是页式存储管理)。 页式存储管理：将用户程序(外存)与内存均划分为相同大小的块，以页为单位将程序调入内存；这样会产生一个页表的数据结构，用户程序称为逻辑页，对应于页表的页号，内存划分对应于物理块号；\n逻辑地址：页号+页内地址\n物理地址：块号(页帧号)+页内地址\n逻辑页分为页号和页内地址，页内地址就是物理偏移地址，而页号与物理块号并非按序对应的，需要查询页表，才能得知页号对应的物理块号，再用物理块号加上偏移地址才得出了真正运行时的物理地址。如果CPU查找数据时，内存中没有，就会产生缺页中断，重新去外存寻找数据。当要调用逻辑页号为3的页面到内存时，优先淘汰访问位0的页面，当多个页面的访问位为0时，才会优先淘汰修改位为0的页面。\n页面置换算法 最优算法:0PT，理论上的算法，无法实现，是在进程执行完后进行的最佳效率计算，用来让其他算法比较差距。原理是选择未来最长时间内不被访问的页面置换，这样可以保证未来执行的都是马上要访问的。\n先进先出算法:FIFO，先调入内存的页先被置换淘汰，会产生抖动现象，即分配的页帧数越多缺页率可能越多(即效率越低)。\n最近最少使用:LRU，在最近的过去，进程执行过程中，过去最少使用的页面被置换淘汰，根据局部性原理，这种方式效率高，且不会产生抖动现象，实现先对复杂。\n淘汰原则:优先淘汰最近未访问的，而后淘汰最近未被修改的页面。\n快表:快表是将页表存于Cache中，慢表是将页表存于内存上。\n例题 学霸肯定对了 ↕ 答案：C D\n页面大小为512字节，则需要用9个bit位表示；十进制的1111的二进制表示为：100 0101 0111，所以页号为二进制10，则十进制的2，查页表得知物理页4，所以选C，读题可知直接选D，因为都要共享8\n学霸肯定对了 ↕ 答案：A B\n页面大小为4k，得用12个bit位表示；逻辑地址=页号+页内地址，5148H的二进制的低12位都用于表示页内地址，高4位用于表示页号，所以页号就是5(0101)；物理地址=物理块号+页内地址，查页表得知块号=3，所以其物理地址的十六进制为A选项；淘汰的是在内存中，首先访问位为0的页面，即2，若多个访问位为0，则淘汰修改位为0的页面，所以选B\n学霸肯定对了 ↕ 答案：A C\n由程序得知矩阵是按行访问，若按行存放，则缺页中断次数=10000/200=50次，若按列存放，则缺页中断次数=10000/2=5000次\n4.2 分段存储管理 ✅✅ # 按逻辑上的大小来截断(和页式存储不同，页式存储固定大小页面)，将进程空间分为一个个段，每段也有段号和段内地址，与页式存储不同的是，每段物理大小不同，分段是根据逻辑整体分段的，因此，段表也与页表的内容不同，页表中直接是逻辑页号对应物理块号，而下图所示，段表有段长和基址两个属性，才能确定一个逻辑段在物理段中的位置。\n学霸肯定对了 ↕ D C 5 I/O设备管理 ✅✅ # 5.1 I/O软件层次 ✅✅ # I/O设备管理软件的所有层次及每一层功能如下图：\n实例：当用户程序试图读一个硬盘文件时，需要通过操作系统实现这一操作。首先设备无关软件检查高速缓存中有无要读取的数据块，若没有，则调用设备驱动程序，向I/O硬件发出一个请求。然后，用户进程阻塞并等待磁盘操作的完成。当磁盘操作完成时，硬件产生一个中断，转入中断处理程序。中断处理程序检查中断的原因，认识到这时磁盘读取操作已经完成，于是唤醒用户进程取回从磁盘读取的信息，从而结束此次I/O请求。用户进程在得到了所需的硬盘文件内容之后继续运行。\n5.2 SPOOLING技术 ✅ # 虚拟性是OS的四大特性之一。如果说可以通过多道程序技术将一台物理CPU虚拟为多台逻辑CPU，从而允许多个用户共享一台主机，那么，通过SPOOLING技术便可将一台物理I/O设备虚拟为多台逻辑I/O设备，同样允许多个用户共享一台物理I/O设备。\n6 文件管理 ✅✅✅ # 6.1 索引文件结构 ✅✅✅ # 如图所示，一般linux的系统中默认有13个索引节点，索引可以理解为地址、指针、盘块号。0-9为直接索引,即每个索引节点存放的是内容，假设每个物理盘大小为4KB，则0-9号索引一共可存4KB*10=40KB数据。\n10号索引节点为一级间接索引节点，大小为4KB，存放的并非直接数据，而是链接到直接物理盘块的地址，假设每个地址(指针、盘块号)占4B，则共有4KB/4B = 1024个地址，对应1024个物理盘，可存1024*4KB=4096KB数据。\n11号索引节点为二级索引节点，直接盘存放一级地址，一级地址再存放物理盘快地址，而后链接到存放数据的物理盘块，容量又扩大了一个数量级，为1024 * 1024 * 4KB数据。\n存储单元个数同主存编址计算计算一样，即存储单元个数=大地址-小地址+1。\n学霸肯定对了 ↕ 答案：C D\n地址大小为4Byte，磁盘索引块和磁盘数据块都是4KB大小，所以单个索引块存储了4KB/4B=256个地址，物理块一般来说在内存中是离散的，而逻辑块是连续的，所以物理块号50对应于0，67-\u0026gt;1，68-\u0026gt;2\u0026hellip;89-\u0026gt;4，58-\u0026gt;5，136的逻辑号为x-5+1=256,得到x=260，即136-\u0026gt;260，187-\u0026gt;261，所以答案选C，看题知道第二空选D\n6.2 文件目录 ✅ # 相对路径：是从当前路径开始的路径。\n绝对路径：是从根目录开始的路径。\n全文件名=绝对路径+文件名。要注意，绝对路径和相对路径是不加最后的文件名的，只是单纯的路径序列。\n6.3 位示图 ✅✅ # 位示图是用于记录文件存储器的使用情况。每一位对应文件存储器上的一个物理块，取值 0 和 1 分别表示空闲和占用。\n学霸肯定对了 ↕ 答案：C D\n物理块号编址从0开始，所以总物理块数为16385+1=16386，16386/32=512余2，位示图编号从0开始，所以前511号编满了，512号编到第二个位置，选C，1000G*1024/4/32=8000，选D\n课后习题 # todo 操作系统习题\n"},{"id":6,"href":"/docs/example/architect-exam/3.16-%E8%AE%BA%E6%96%87%E5%86%99%E4%BD%9C%E4%B8%93%E6%A0%8F/2-%E8%AE%BA%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8/","title":"论微服务架构及其应用","section":"3.16 论文写作专栏","content":" 题目：论微服务架构及其应用 # 微服务架构(Microservices Architecture)是一种架构风格，它将一个复杂的应用拆分成多个独立自治的服务，服务与服务间通过松耦合的形式交互，在微服务架构中，服务是细粒度的，协议是轻量级的。这些服务通常按业务能力组织，有自身的技术堆栈。\n请围绕“微服务架构及其应用”论题，依次从以下三个方面进行论述。\n1. 概要叙述你参与管理和开发的、采用微服务架构的软件项目以及你在其中所承担的 主要工作。\n2.请简要描述微服务架构的优点。\n3.具体阐述你参与管理和开发的项目是如何基于微服务架构进行件设计实现的。\n摘要 # 我所在的国内某头部互联网公司，于2020年4月决定搭建一套全新的移动设备指纹分析处理平台项目，该项目的建设目标是为集团提供高效、可靠的移动设备指纹分析、存储及唯一标识移动设备能力，为公司各业务线的安全做好重要的底层支撑；我荣幸地担任本次系统开发的架构师，主要负责整个系统的架构设计、对项目的技术活动进行指导和协调。本文将以该项目为背景，着重介绍微服务架构相比于传统单体式架构的优点和挑战因素，同时详细探讨了微服务架构如何在日活设备约2.6亿、峰值QPS达7万的项目中的实际应用。实践证明：恰当地使用微服务技术，使得系统的开发取得了巨大的成功，目前系统已稳定运行1年多，赢得了亿级用户的一致好评。这不仅为集团的业务安全提供了坚实的基础，也展示了微服务架构在大规模项目中的卓越表现。\n正文 # 随着移动互联网技术的迅猛发展，包括手机、平板在内的移动设备已经成为人们生活中不可或缺的一部分，为我们带来了更便捷的信息获取和沟通方式。在这样的时代背景下，我就职的国内最大的社交媒体平台之一的公司，于2020年4月做出了一项决策：建设一个全新的移动设备指纹分析处理平台项目。该项目旨在给集团提供全面的移动设备指纹分析、存储和唯一标识移动设备的能力，为公司的多元化的业务体系提供坚实的底层支持。移动设备的广泛应用和迅速增长的用户基础使得此类系统的需求变得尤为迫切，在这样的挑战之下，我们面临着如何高效地处理日活约2.6亿的移动设备指纹、以及峰值QPS达7万的高并发场景下保持系统的高可用性。移动设备指纹指的是标识移动设备本身的信息，如CPU型号、系统版本、手机品牌、国际移动设备识别码IMEI等信息。\n作为这一重要项目的核心，我有幸被委以重任，担任本次系统开发的架构师。我的职责包括整个系统的需求获取、分析、架构设计以及对项目的技术活动进行指导和协调。在经过深入的调研和分析之后，发现目标系统需要快速迭代开发、高效地处理海量数据、同时还要在高峰时段高达7万的每秒查询数(QPS)的高并发场景下保持卓越的可用性。我们意识到，传统的单体式架构集群在面对如此复杂的业务且海量数据的情况下，常常会面临性能瓶颈、扩展困难以及难以应对高并发和快速迭代。面对这一挑战，我决定采用微服务架构技术，为该项目提供更卓越的性能、更强大的灵活性和可伸缩性。\n本文将深入探讨这一技术方案的实际应用。特别是，介绍了微服务架构相比于传统单体式架构的优点和挑战因素，同时详细探讨了微服务架构如何在日活设备约2.6亿、峰值QPS达7万的项目中的实际应用。\n一般而言，单体架构的代码异常复杂，模块与模块之间耦合度通常很高，这会导致开发和部署周期延长，增加了部署的复杂性。此外，单体架构通常受限于一种技术栈，从而限制了开发团队在不同场景下选择合适技术的自由度。由于所有模块运行在同一个进程中，一旦单个组件发生故障，可能会对整个应用的稳定性产生严重的负面影响。为解决这些问题，我决定采用微服务架构技术，其优势如下：\n服务独立性。它是微服务架构的核心思想，它将整个应用程序拆分为多个小型服务，每个服务专注于一个特定的业务场景。这些服务独立运行在不同的进程中，即使某个服务组件发生故障，也不会对整个应用造成严重的不可逆影响。\n技术异构性。指的是不同的微服务可以使用不同的技术栈来实现，这样做的好处在于，它能够充分发挥各种技术的原生优势，使开发团队能够根据不同的业务场景，更加灵活地选择适合自己的工具和框架。\n易于开发和部署。服务拆分带来了模块化开发，使得开发团队成员能够更加专注于自己负责的模块，减少开发的复杂度和模块间的依赖关系，同时每个服务可以被独立部署，这意味着当某个服务需要进行更新或者修复时，只需对该服务进行部署，减少部署的风险和影响范围。\n可扩展性。就像木桶效应一样，一个应用程序的性能瓶颈通常集中在某个服务上，此时对于出现性能短板的服务，只需要对其进行单独的扩容，就可以以最低的软硬件成本达到最好的效果。\n考虑到实际项目需要快速迭代、单个服务需要方便扩缩容、需要采用不同的技术栈来发挥业务的最大价值、需要高效地处理日活约2.6亿的移动设备指纹、以及峰值QPS达7万的高并发场景下保持系统的高可用性，我决定采用微服务框架来作为项目的底层架构支持，从本项目服务的各职能部门的角度进行分类，将系统抽象成与各个职能部门对应的服务，以保证最大化微服务架构的技术优势。\n如：273项设备指纹上行服务，设备指纹落库落表落日志服务，与华为、小米、OPPO、VIVO等手机厂商合作的负一屏XX服务，与阿里巴巴、京东等合作的设备ID转换服务，商业化广告服务，真假设备试金石服务、监控报警服务等。\n经历了一年半的开发，该项目于2022年10月成功上线，并且在过去的一年多时间里，系统架构稳定运行，实现了既定目标，赢得了过亿用户一致好评。虽然我们取得了这些成就，但也意识到了一些不足之处，特别是在自动化运维方面。这些挑战带给我们宝贵的经验和教训，为未来的工作提供了重要的参考，这正是我最大的收获。\n"},{"id":7,"href":"/docs/example/architect-exam/3.3-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/","title":"3.3 数据库系统","section":"3. 高级软考 - 系统架构师","content":" 目录 ✌ # 本章内容在上午的选择题和下午的案例分析题中都会涉及到，在下午的案例分析题里面考到过视图、规范化理论、反规范化理论等；相对比较重要，正常约占4~9分，占比5.3%~12%\n1 数据库模式 ✅✅✅ # 数据库模式一句话概括为三级模式两级映像；其中三级模式分别是：外模式(用户模式、子模式)、模式(概念模式)、内模式；两级映像分别是：外模式与模式之间的映像、模式与内模式之间的映像。如下图所示。\n外模式 外模式是面向用户或者应用程序的数据库局部视图。它是从模式导出的一个子集(在golang中同切片和数组的关系类似)，外模式包含模式中允许特定用户使用的那部分数据。外模式反映了数据库的用户观。\n模式 又称概念模式或逻辑模式，它是对数据库中全部数据的逻辑结构和特征的总体描述，是所有用户的公共数据视图(全局视图)。模式反映了数据库系统(DBS)的整体观。\n内模式： 又称存储模式，对应于物理级。它是数据库中全体数据的内部表示或底层描述，是数据库最低一级描述，它描述了数据在存储介质上的存储方式和物理结构，对应着实际存储在外存储介质上的数据库。它是数据库的存储观。创建索引改变的是数据库的内模式。\n外模式-模式（保证了数据的逻辑独立性） 用户应用程序根据外模式进行数据操作，通过外模式—模式映射，定义和建立某个外模式与模式间的对应关系(加一层)，将外模式与模式联系起来，当模式发生改变时，只要改变其映射，就可以使外模式保持不变，对应的应用程序也可保持不变。\n模式-内模式（保证了数据的物理独立性） 通过模式—内模式映射，定义建立数据的逻辑结构（模式）与存储结构（内模式）间的对应关系(加一层)，当数据存储结构发生变化时，只需改变模式—内模式映射，就能保持模式不变，因此应用程序也可以保持不变。\n关系的3种类型 基本关系 (通常又称为基本表或基表) : 实际存在的表，实际存储数据的逻辑表示。\n查询表:查询结果对应的表。\n视图表:由基表或其他视图表导出的表，本身不独立存储，数据库只存放它的定义，常称为虚表。\n2 数据库设计 ✅✅✅ # 数据库设计依次包含阶段，分别是：需求分析、概念结构设计、逻辑结构设计、物理设计阶段。\n需求分析产物有：数据流图、数据字典、需求说明书，概念结构设计的产物有：ER图，逻辑结构设计的产物有：关系模式，还需要考虑ER图转关系模式的转换规则和规范化相关的一些东西，物理设计考虑的是具体的物理存储、物理分布等。\n例题 学霸肯定对了 ↕ C 学霸肯定对了 ↕ C 2.1 需求分析 ✅✅ # 根据当前和未来应用的数据要求、数据处理要求来进行需求分析，此阶段的产物有：数据流图、数据字典、需求说明书。注意：数据流图本身是很重要的，在结构化需求分析SA中会详细讲到。\n2.2 概念结构设计 ✅✅ # 概念结构设计也就是通过需求分析的结果来获得ER图的过程。下图是示例的ER图：\nER图就是实体联系图，两个不同的实体集之间有三种联系，分别是1:1,1:m,m:n。上图是m:n的多对多关系(联系的类型需要会判断)。\nE-R图具体的建立过程 合并的方法：一次集成：多个局部E-R图一次集成；逐步集成：用累加的方式一次集成两个局部E-R。\n合并时冲突的分类：属性冲突：属性域冲突或属性取值冲突；命名冲突：同名异义和异名同义；结构冲突：同一对象在不同应用中具有不同的抽象，以及同一实体在不同局部E-R图中所包含的属性个数不完全相同。\n2.3 逻辑结构设计 ✅✅✅✅ # 逻辑结构设计的产物是关系模式，关系模式(关系模型) = ER图 + 转换规则和规范化理论。\n数据模型三要素：数据结构、数据操作、数据的约束条件。数据模型包括层次模型、网状模型、面向对象模型、关系模型。\n关系模型的相关概念 以下的几种表达形式都表示了同一个关系模型。 以学生、选课关系为例，说明关系模型中的相关概念。其中：学生(学号，姓名，年龄，班级编号)和选课(学号，课程号，课程名)。\n1、学生关系是一个4目关系；选课关系是一个3目关系。\n2、学生关系的候选码只有一个，是学号；选课关系的候选码也只有一个，是(学号，课程号)。\n3、学生关系的主键是学号；选课关系的主键是(学号，课程号)。\n4、学生关系的主属性有学号，非主属性有姓名，年龄，班级编号；选课关系的主属性有学号和课程号，非主属性有课程名。\n5、学生关系没有外键；选课关系的外键是学号，学号是学生关系的主键。\n6、学生关系没有全码，选课关系也没有全码。全码(全部属性都是候选码，即选课关系去掉课程名之后，剩下的就是全码)\n官方描述如图： 完整性约束\n实体完整性：规定基本关系的主属性不能取空值。跟主键相关\n参照完整性：关系与关系之间的引用。跟外键相关\n用户自定义完整性：应用环境决定。如年龄取值范围等。\n触发器：复杂的完整性约束，可做逻辑判断等功能。\n例题 学霸肯定对了 ↕ B 关系模式的具体的建立过程 建立过程：1. ER图向关系模式转换：需要将ER图中的实体和联系转换为关系模式。 例题 学霸肯定对了 ↕ C 学霸肯定对了 ↕ D C A 2、关系模式的规范化传送门。\n3、确定完整性约束(保证数据的正确性；实体完整性、参照完整性、用户自定义完整性)。\n2.4 物理设计 ✅ # 物理设计考虑具体的物理存储、物理分布情况。\n3 关系代数 ✅✅✅✅ # 关系代数是针对关系模式进行的代数运算。\n并交差是同构的二元运算。\n笛卡尔积、投影选择可是同构，也可异构；笛卡尔积是二元运算，投影、选择都是一元运算；它们都可用1，2，3\u0026hellip;来代替列名，有同名的情况需要加上“表名.”。经常会出现这样的sql考察形式：select 投影 from 笛卡尔积 where 选择。\n连接有多种，考试基本上只考自然连接。有同名的情况需要加上“表名.”。笛卡尔积的结果非常庞大，将笛卡尔积进行适当的选择、投影(注意顺序，下面两个式子中，第一个是对的)就可以得到自然连接的结果，所以也会考察它们相等的情况。如果考虑性能情况，一般需要先投影选择之后再做笛卡尔积或自然连接的性能最高。\n例题 学霸肯定对了 ↕ D C 学霸肯定对了 ↕ B C 4 规范化理论 ✅✅✅✅✅ # 规范的必要性 非规范化的关系模式可能存在的问题包括：数据冗余、更新异常(修改操作一致性问题)、插入异常、删除异常。\n经常考察的点： 1、给你一个关系模式，让你看看有啥问题(异常)，做法：先看该关系模式达到第几范式，再说出对应范式的问题就行；\n2、让你修改关系模式来消除这些问题。一般来说没达到第三范式都有问题。\n4.1 函数依赖 ✅✅✅✅✅ # 函数依赖是一个语义概念，是一个自然而然的概念。如果x能唯一决定y，则称x函数决定y，或者是y函数依赖于x，记作x-\u0026gt;y。\n特殊的函数依赖关系\n部分函数依赖：C依赖于A，所以C部分依赖于AB 传递函数依赖 4.2 求候选键 ✅✅✅✅✅ # 候选键可以有多个，每个候选键可以由多个属性构成。知道候选键了以后，其余的情况都能一目了然，现在介绍如何求取候选键。\n1、在关系模式中，一般用R(U,F)表示，U是属性，表示节点；F是函数依赖，表示边；所以将关系模式转换为一个有向图（可选）。\n2、(入度出度都为0的属性一定是在候选码中)，找入度为0的属性(只在箭头左边出现过的属性就是入度为0的属性；箭头指入为入度，箭头指出为出度)，并以该属性集合为起点，尝试遍历有向图，若能正常遍历图中所有结点，则该属性集即为关系模式的候选键。\n3、若入度为0的属性集不能遍历图中所有结点，则需要尝试性的将一些中间结点(既有入度，也有出度的结点)并入入度为0的属性集中，直至该集合能遍历所有结点，集合为候选键。\n例题 学霸肯定对了 ↕ A ABCD B 4.3 Armstrong公理 ✅✅ # 函数依赖在题目中一般都给的不全，但是我们可以通过题目给的函数依赖推导出所有的属性，期间推导的依据就是Armstrong公理。\n增广率有两种形式：1、若x-\u0026gt;y,则x-\u0026gt;xy 2、若x-\u0026gt;y,则xz-\u0026gt;yz\n例题 学霸肯定对了 ↕ C\n解析：A选项是传递律，B选项是自反律，D选项是分解规则\n4.4 范式判断 ✅✅✅✅✅ # 关系数据库在设计过程中必然会考虑到规范化程度，范式就是判断规范化程度的度量。欲达到更高的规范化程度，则需要将表格拆分得更细。拆分得越细，查询性能会越低，所以并不是越细越好，所以也会出现非规范化理论。一般在开发过程中达到第三范式就刚好。\n第一范式 最普通的二维表就达到了第一范式，一般题目给到的表，都是达到了第一范式。所以下表不满足第一范式，不是普通二维表，因为高级职称人数可继续拆分。\n第二范式 该例子是一个普通的二维表，所以该关系模式至少达到了第一范式，但该关系模式存在非主属性对候选码的部分函数依赖(学分部分依赖候选码学号和课程号)，所以该关系模型未能达到第二范式，目前只是第一范式。存在部分函数依赖的前提是候选码至少由两个及以上的属性构成。若消除了非主属性对候选码的部分函数依赖，则该关系模式可以达到第二范式；如何消除？将该关系模式(学号，课程号，成绩，学分)拆成两个关系模式(课程号，学分)和(学号，课程号，成绩)。\n第三范式 该例子是普通二维表且候选码只有一个属性构成，所以该关系模式至少达到了第二范式。主属性学号-\u0026gt;系号，系号-\u0026gt;系名和系位置(其中系号一定是非主属性才行)；所以该关系模式存在非主属性对主属性的传递依赖(系名和系位置传递依赖于学号)，所以该关系模式未达到第三范式。若消除了非主属性对主属性的传递依赖，则该模式可以达到第三范式，如何消除？将关系模式(学号，姓名，系号，系名，系位置)拆分成两个关系模式(学号，姓名，系号)和(系号，系名，系位置)。\nBCNF范式 该例子是是普通二维表且没有非主属性(F{T-\u0026gt;J,SJ-\u0026gt;T}，所以候选码为：SJ，ST)，所以该关系模型至少达到了第三范式。当且仅当F中的每个依赖的左边都必定包含R的某个候选码时，就达到BCNF范式。显然T不包含SJ或ST，所以未达到BCNF范式。\n例题 学霸肯定对了 ↕ C A 4.5 模式分解 ✅✅✅✅✅ # 将关系模式拆分成更小的关系模式以达到更高的规范化程度的过程就是模式分解的过程。模式分解的过程中，需要考虑两个问题：1、是否保持函数依赖；2、是否无损分解。比较好的模式分解应该是即保持了函数依赖，又是无损分解。\n保持函数依赖分解 关系模式分解前必然存在一个函数依赖集合F，关系模式分解后假设得到了两个关系模式，那么这两个关系模式也必定有自己的函数依赖集合F1，F2；若F1并F2等价于F，则称这种模式分解保持了函数依赖。在F中可能存在冗余函数依赖，它其实是可以通过公理推导出来的，所以在判断是否保持函数依赖时不用考虑冗余函数依赖(当它没有)。\n例题 学霸肯定对了 ↕ 是 是\n第一问解析：R1的函数依赖F1={A-\u0026gt;B}，R2的函数依赖F2={B-\u0026gt;C}，函数依赖F1并F2是等价于分解前的函数依赖F的，所以该分解保持了函数依赖。第二问解析：同第一问一样，只不过F中存在了冗余函数依赖A-\u0026gt;C(通过传递律可知)，在判断的时候不需要考虑，所以该分解保持了函数依赖。\n学霸肯定对了 ↕ 不是 是\n第一问解析：R1的函数依赖F1={A-\u0026gt;B}，R2的函数依赖F2={A-\u0026gt;C}，函数依赖F1并F2是不等价于分解前的函数依赖F的(缺少B-\u0026gt;C)，所以该分解没有保持函数依赖。第二问解析：R1的函数依赖F1={A-\u0026gt;B}，R2的函数依赖F2={D-\u0026gt;E}，函数依赖F1并F2是等价于分解前的函数依赖F的，所以该分解保持了函数依赖。\n有损无损分解\n有损：拆分后不能还原出原来的函数依赖。\n无损：拆分后可以还原出原来的函数依赖。指将一个关系模式分解成若干关系模式后，通过自然连接和投影运算仍能还原成原来的关系模式。\n判断是否无损分解一般可用表格法(通用方法)和公式法判断(本文不做介绍)。\n例题 学霸肯定对了 ↕ 无损分解\n解析：分解前为1NF，分解后满足BCNF。模式分解后保持了函数依赖。现在判断是否无损分解。\n用表格法比较清晰：\n1、构造初始表，列名是源属性集，行是分解后的关系模式，有值的打钩；\n2、找出表中的同名属性列，看它在原本函数依赖F中能决定出什么，如果有的话说明该函数依赖在分解后被保留下来了，就可以在各表的同名属性列决定的属性处打钩，如果没有就跳过；\n3、新决定出来的列可重新按上述规则重新判断下一个，以此类推，知道出现任意一行全部为钩则无损分解，若表格的所有属性都遍历完了也没有一行全为钩的，就是有损分解。\n具体为：初始表如下；同名属性列学号在原有函数依赖中决定了姓名，所以在学号为钩的行给姓名打钩；同名属性列姓名在源有函数依赖中没有决定任何属性，所以跳过；同名属性列课程号在原有函数依赖中决定了课程名，所以在课程号为钩的行给课程名打钩；此时满足任意一行(成绩表)全为钩；所以它是无损分解。\n学霸肯定对了 ↕ D A\n解析参考上面例题的解析，思路完全一模一样。\n学霸肯定对了 ↕ A D\n解析参考上面例题的解析，思路完全一模一样。\n4.6 闭包 ✅✅✅ # x(1) = x(0) U CD 4.7 反规范化理论 ✅✅✅✅ # 案例分析例题 学霸肯定对了 ↕ 5 并发控制 ✅✅ # 5.1 事务 ✅✅ # 并发控制指的是事务的并发控制，事务保证了数据的完整性。事务有4个特点：简称ACID\n原子性(Atomicity) 是指事务包含的所有操作要么全部成功，要么全部失败回滚。这些操作是一个整体，不能部分地完成，跟操作系统的原语一样(PV操作)。影子拷贝是保证事务原子性的一种方法；影子拷贝：假设在某一个时刻只有一个活动的事务，为了保证事务的原子性，对于要执行写操作的数据项，数据库系统在磁盘上维护数据库的一个副本，所有的写操作都在数据库副本上执行，而保持原始数据库不变，如果在任一时刻操作不得不中止，系统仅需要删除副本，原数据库没有受到任何影响。这种设计策略称为影子拷贝。\n一致性(Consistency) 是指事务必须使数据库从一个一致性状态变换到另一个一致性状态，也就是说一个事务执行之前和执行之后都必须处于一致性状态。比如说转账。数据库系统通常采用完整性约束检查机制保证单个事务的一致性。\n隔离性(Isolation) 是指一个事务的执行不能被其他事务干扰，即一个事务内部的操作及使用的数据对并发的其他事务是隔离的。也就是执行的效果应该和串行一样互不影响。事务的隔离性保证操作并发执行后的系统状态与这些操作以某种次序串行化执行后的状态是等价的。两阶段锁协议是实现隔离性的常见方案，该协议能够保证事务的可串行化执行，但它可能发生死锁。\n持久性(Durability) 是指一个事务一旦被提交了，那么对数据库中的数据的改变就是永久性的，无论发送何种故障，都不应对其有任何影响。假设在日志中记录所有对数据库的修改操作，将一个事务的所有写操作延迟到事务提交后才执行，则在日志中无需记录数据项被事务修改前的原始值，当系统发生故障时，如果某个事务已经开始，但没有提交，则该事务应该什么也不用做。\n5.2 并发可能产生的问题 ✅ # 并发可能会产生以下问题：1、丢失更新；2、读脏数据；3、不可重复读问题。\n5.3 封锁协议 ✅ # 封锁协议是用来解决并发可能会产生的那三个问题。\nS封锁是读锁/共享锁：一个事务对操作对象上了读锁，另一个事务也可对该操作对象上读锁，这两个事务共享该操作对象。 X锁是写锁/排它锁：一个事务对操作对象上了写锁，那么其他任何事务都没法对该操作对象上任何锁，X锁具有排它性： 两段锁协议，分为加锁和解锁两个阶段，任何读之间都加S锁，任何写之前都加X锁，加锁就像操作系统的P操作一样，解锁就是V操作，可能会导致死锁。 6 数据库的安全性 ✅✅ # 例题 学霸肯定对了 ↕ C\n索引和视图是无法更新的、存储过程是可以被第三方开发人员调用的，而触发器不行。\n7 数据库的备份与恢复技术 ✅ # 7.1 数据备份 ✅ # 例题 学霸肯定对了 ↕ B 7.2 数据库故障与恢复 ✅ # 数据库容灾属于网络安全和应用安全考虑范畴。\n8 数据库性能优化 ✅✅ # 9 数据库索引 ✅✅ # 索引表是实际存在的表。假设要查询学号为417的这条记录，顺序查找的思想是一个一个对比，查询6次才能查到，效率非常低；可能会很自然想到二分查找，但二分查找需要排序的前提。建立索引表本身采用的是B树或者B+树；为了方便解释，这里以二分查找建立索引为例，只需要查2次。\n10 数据库视图 ✅✅✅ # 数据库视图：它一个虚拟表 (逻辑上的表)，其内容由查询定义(仅保存SOL查询语句，所以效率可能有点低，可以使用物化视图提高效率)同真实的表一样，视图包含一系列带有名称的列和行数据。但是，视图并没有真正存储这些数据，而是通过查询原始表动态生成所需要的数据，可以理解为视图是一个指针，可以指向单个表、多个表的联合查询结果，底层的表的数据变了，视图的结果自然也会变(跟golang里面的切片和数组挺像的)。\n视图的优点:\n1、视图能简化用户操作\n2、视图使用户能以多种角度看待同一数据\n3、视图对重构数据库提供了一定程度的逻辑独立性\n4、视图可以对机密数据提供安全保护，如不想授权整个表给外部查询，那么就可授权这个表的某个查询视图给外部就行。\n物化视图:它不是传统意义上虚拟视图，是实体化视图，其本身会存储数据。同时当原始表中的数据更新时，物化视图也会自动更新。适合于多查询少更新的场景。\n案例分析例题 学霸肯定对了 ↕ 11 数据库的分区分表分库 ✅✅ # 分区是数据库自带的，比如说属于列表分区的有：按天分区，按操作系统类型分区，按日志名字分区等等，逻辑上还是一张表。分区一般针对hive，分区可以增加数据查询的速度。\n11.1 常见的分区方式 ✅✅ # 哈希分区相对分的比较均匀。\n11.2 分表分库 ✅✅ # 分表分库通常是针对mysql(这其实已经涉及到分布式数据库了)；当数据库的QPS过高、数据库的连接数不足的时候就需要分库；当单表数据量过大，严重影响读写性能时就需要分表。分表有水平分表和垂直分表；水平分表(是分布式数据库里面的水平切片，也是反规范化理论里面的水平分表)：将数据记录存放在不同的表中；垂直分表(是分布式数据库里面的垂直切片)：将不同的字段放在不同的表中。\n分表分库同分区一样，也可采用、范围、列表和哈希，通常采用哈希算法。\n12 分布式数据库 ✅✅✅ # 分布式数据库是对应于集中式数据库而言的，平时所用到的简单的mysql等都是集中式数据库(在企业中的mysql肯定是做的分布式数据库，不然性能跟不上)，分布式会考虑物理上把数据放在不同的物理节点上，其逻辑上依然是一个整体。\n12.1 分布式数据库的层次 ✅✅✅ # 分布式数据库的层次和集中式数据库的三级模式两级映像大致相似，只不过在原有的外模式、概念模式、内模式上增加了一些具体的特性，如分片模式，分布模式；全局外模式和外模式一样，都直接用于用户程序，局部概念模式和概念模式一样，都是库表，局部内模式同内模式一样。其中，全局概念模式定义分布式数据库中数据的整体逻辑结构，使得数据使用方便，如同没有分布或分片一样。其具体情况如下图：\n12.2 分片模式 ✅✅✅ # 分片模式使得数据具有分片透明性，分片透明性：是指用户不必关心数据是如何分片的，它们对数据的操作在全局关系上进行，即如何分片对用户是透明的。分片模式具体分为水平分片、垂直分片。\n水平分片：是将表中不同行的数据存储到不同的服务器上(反规范化理论，将北京的用户放在北京的表，将贵州的用户放在贵州的表)。 垂直分片：是将表中不同字段的数据存储到不同的服务器上。 12.3 分布模式 ✅✅✅ # 分布模式使得数据具有分布透明性；具体分为：复制透明性、位置透明性、逻辑透明性。\n复制透明：用户不用关心数据库在网络中各个节点的复制情况，被复制的数据的更新都由RDBMS系统自动完成，数据复制是为了提升数据访问效率而采用的一种增加数据冗余的方法(也就是主从)。 位置透明：是指用户不必知道所操作的数据放在何处，即数据分配到哪个或哪些站点存储对用户是透明的。 逻辑透明：是指局部数据模型透明，即用户或应用程序无需知道局部场景使用的是哪种数据模型。 12.4 两阶段提交协议 ✅✅ # 两阶段提交协议常用来解决分布式事务问题，要么所有都参与的进程都提交事务，要么都取消事务。和集中式数据库事务中的原子性一致。要么都做，要么都不做。其阶段如下：\n1、表决阶段：目的是形成一个共同的决定。\n2、执行阶段：目的是执行协调者收到的决定。\n两条全局提交规则 1、只要有一个参与者撤销事务，协调者就必须做出全局撤销决定。\n2、只有所有参与者都同意提交事务，协调者才能做出全局提交决定。\n12.5 分布式数据库的特点 ✅✅✅ # 1 数据独立性 具体为：分布独立性(分布透明性)、物理独立性、逻辑独立性。\n2 集中与自治共享结合的控制结构 各局部的DBMS可以独立地管理局部数据库，具有自治的功能。同时，系统又设有集中控制机制，协调各局部DBMS的工作，执行全局应用。\n3 适当数据冗余 在不同的场地存储同一数据的多个副本可以提高系统的可靠性和可用性，同时也能提高系统性能。提高系统的可用性，即当系统中某个节点发生故障时，因为数据有其他副本在非故障场地上，对其他所有场地来说，数据仍然是可用的，从而保证数据的完备性(反规范化理论的应用)。\n4 全局的一致性、可串行性和可恢复性，也就是事务 该点和集中式数据库的特点一致。\n12.6 联邦数据库 ✅ # 分布式数据库和联邦数据库很相似，分布式数据库是同构的，而联邦数据库是异构的。它们都是对外提供的数据的统一接口。\n例题 学霸肯定对了 ↕ D 学霸肯定对了 ↕ D 学霸肯定对了 ↕ C 13 NoSQL ✅✅ # 向上扩展：用更好的服务器替换，向外扩展：用集群(当然现在mysql也有主从、分库分表的集群)。\n关系数据库与NoSql的特点对比如下：\n13.1 NoSQL分类 ✅✅ # 课后习题 # todo 数据库系统习题\n"},{"id":8,"href":"/docs/example/architect-exam/3.10-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/3-%E7%89%B9%E5%AE%9A%E9%A2%86%E5%9F%9F%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84/","title":"3) 特定领域软件架构","section":"3.10 软件架构设计","content":" 特定领域软件架构 DSSA ✅✅ # DSSA全称为Domain Specific Software Architecture，在软件公司里面的很多项目都有很多共性(比如：教育领域相关的项目)。DSSA以一个特定问题领域为对象，形成由领域分析、领域设计、领域实现等组成的开发基础架构，其目标是支持一个特定领域中多个应用的生成。\n3.1 基本活动 ✅✅ # 领域分析：对教育领域做需求分析。得到“领域模型”。它是通用的模型。\n领域设计：对教育领域做架构设计。得到“DSSA”。它是通用的架构。\n领域实现：对教育领域的项目做代码实现。得到“开发和组织可复用的信息”。它是通用的信息。\n3.2 领域角色 ✅✅ # 3.3 三层次模型 ✅ # 例题 学霸肯定对了 ↕ C C "},{"id":9,"href":"/docs/example/architect-exam/3.16-%E8%AE%BA%E6%96%87%E5%86%99%E4%BD%9C%E4%B8%93%E6%A0%8F/3-%E8%AE%BA%E8%BD%AF%E4%BB%B6%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%80%A7%E8%AE%BE%E8%AE%A1/","title":"论软件的可靠性设计","section":"3.16 论文写作专栏","content":" 题目：论软件的可靠性设计 # 摘要 # 正文 # "},{"id":10,"href":"/docs/example/architect-exam/3.4-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/","title":"3.4 计算机网络","section":"3. 高级软考 - 系统架构师","content":" 目录 ✌ # 本章内容在仅上午的选择题会涉及到，正常约占3~6分，占比4%~8%\n1 TCP/IP协议族 ✅✅✅ # HTTP协议是一种使用明文数据传输的网络协议，缺省端口80。HTTPS协议可以理解为HTTP协议的升级,就是在HTTP的基础上增加了数据加密SSL/TLS，所有的数据在传输过程中都是加密的，缺省端口443。\nSSL(Secure Sockets Layer,安全套接层)及其继任者TLS(Transport Layer Security,传输层安全) 是为网络通信提供安全及数据完整性的一种安全协议，在传输层对网络连接进行加密。在设置电子邮箱时使用SSL/TLS协议，会保障邮箱更安全。\n在客户机上运行nslookup查询某服务器名称时能解析出IP地址，查询IP地址时却不能解析出服务器名称，解决这问题的方法是 (为该服务器创建PTR记录，即反向地址解析协议)。\nMIME(Multipurpose Internet Mail Extensions)多用途互联网邮件扩展类型；它就是http的数据类型，格式是：大类型/小类型；MIME是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。比如说：text/html、application/json、image/jpeg等；它是一个互联网标准，扩展了电子邮件标准，使其能够支持:非ASCII字符文本，非文本格式附件 (二进制、声音、图像等);由多部分组成的消息体，包含非ASCII字符的头信息。\nS/MIME在安全方面的功能又进行了扩展，它可以把MIME实体 (比如数字签名和加密信息等) 封装成安全对象。RFC2634定义了增强的安全服务，例如具有接收方确认签收的功能，这样就可以确保接收者不能否认已经收到过的邮件。\nPGP是安全的电子邮件协议。它是一套用于消息加密、验证的应用程序，采用IDEA的散列算法作为加密与验证之用。每个公钥均绑定唯一的用户名或者E-mail地址。\nIPSec对IP数据包进行分组加密，IPSec主要用于开发新一代的VPN。\nL2TP是创建VPN是需要用到的一个协议，主要是对传统拨号协议PPP的扩展，经常和IPSec协议连用。\nPAP协议是PPP协议的一种握手协议，以保证PPP链接安全性。\nARP攻击造成网络无法跨网段通信的原因是：伪造网关ARP报文使得数据包无法发送到网关。\n1.1 TCP与UDP ✅✅✅ # internet网的网络层核心协议是IP协议，而IP协议是一种分组交换的协议。\nTCP端口号的作用是：应用层进程的寻址依据。\n例题 学霸肯定对了 ↕ C\nA项窗口大小不是固定的，B项前项纠错一般自行纠错，后项纠错一般才要求重发；D项IP不是虚电路，而是走路由器。所以选C 1.2 DHCP与DNS ✅✅✅ # DNS(Domain Name System) 在Linux中，DNS的配置文件保存在/etc/resolv.conf。/etc/resolv.conf是DNS客户机的配置文件，用于设置DNS服务器的IP地址及DNS城名，还包含了主机的城名搜索顺序。该文件是由域名解析器 (一个根据主机名解析IP地址的库)使用的配置文件。它的格式比较简单，每行以一个关键字开头，后接一个或多个由空格隔开的参数（一般情况下，系统不会去回写用户程序、用户数据，即便系统去写了这两部分也不会对系统本身造成较大的影响。只有系统对系统本身的目录或关键文件回写异常，才有可能导致较大的影响，严重的会导致系统崩溃。举个例子，linux系统下root账号回写/etc/resolv.conf异常时，可能会导致系统DNS服务异常）。\n例题 学霸肯定对了 ↕ A 学霸肯定对了 ↕ C DHCP(Dynamic Host Configuration Protocol) DHCP客户端接收到服务器的DhcpOffer后，需要请求地址时发送DhcpRequest报文，如果服务器同意则发送DhcpAck,否则发送DhcpNack;当客户方接收到服务器的DhcpAck报文后，发现提供的地址存问题时发送DhcpDecline拒绝该地址。如：发送给DHCP客户端的地址已经被其他DHCP客户端使用，客户端会向服务器发送(DhcpDecline)信息包拒绝接受已经分配的地址信息。\n可提供域名服务的包括本地缓存、本地域名服务器、权限域名服务器、顶级域名服务器以及根域名服务器。DNS主机名解析的查找顺序是，先查找客户端本地缓存，如果没有成功，则向DNS服务器发出解析请求。\n本地缓存是内存中的一块区域，保存着最近被解析的主机名及其IP地址映像。由于解析程序缓存常驻内存中，所以比其他解析方法速度快。\n当一个主机发出DNS查询报文时，这个查询报文就首先被送往该主机的本地域名服务器。本地域名服务器离用户较近，当所要查询的主机也属于同一个本地ISP时，该本地域名服务器立即就能将所查询的主机名转换为它的IP地址，而不需要再去询问其他的域名服务器。\n每一个区都设置有域名服务器，即权限服务器，它负责将其管辖区内的主机域名转换为该主机的IP地址。在其上保存有所管辖区内的所有主机域名到IP地址的映射。\n顶级域名服务器负责管理在本顶级域名服务器上注册的所有二级域名。当收到DNS查询请求时，能够将其管辖的二级域名转换为该二级域名的IP地址。或者是下一步应该找寻的域名服务器的IP地址。\n根域名服务器是最高层次的域名服务器。每一个根域名服务器都要存有所有顶级域名服务器的IP地址和域名。当一个本地域名服务器对一个域名无法解析时，就会直接找到根域名服务器，然后根域名服务器会告知它应该去找哪一个顶级域名服务器进行查询。\n例题 学霸肯定对了 ↕ A 2 网络规划与设计 ✅✅✅✅ # 网络规划与设计包含5个阶段，它们分别是：需求分析、通信规范分析、逻辑网络设计、物理网络设计、实施阶段。这里重点看逻辑网络设计和物理网络设计，需求分析和通信规范分析的产物需要知道。工程造价估算是需求分析中的一个重要环节。\n应用架构建模中要绘制的第一个物理数据流图 (PDFD)是网络架构DFD，它们不显示单位时间的数据流量，需要显示的信息包括服务器及其物理位置，客户端及其物理位置，处理器说明，传输协议。\n2.1 逻辑网络设计 ✅✅✅✅ # 2.2 物理网络设计 ✅✅✅✅ # 例题 学霸肯定对了 ↕ A 学霸肯定对了 ↕ A 学霸肯定对了 ↕ A 学霸肯定对了 ↕ D 2.3 常见的网络设计 ✅✅✅ # 2.3.1 层次网络设计 ✅✅✅ # 层次化网络设计应该遵循一些简单的原则，这些原则可以保证设计出来的网络更加具有层次的特性:\n1、在设计时，设计者应该尽量控制层次化的程度，一般情况下，由核心层、汇聚层、接入层三个层次就足够了，过多的层次会导致整体网络性能的下降，并且会提高网络的延迟，但是方便网络故障排查和文档编写。\n2、在接入层应当保持对网络结构的严格控制，接入层的用户总是为了获得更大的外部网络访问带宽，而随意申请其他的渠道访问外部网络是不允许的。\n3、为了保证网络的层次性，不能在设计中随意加入额外连接，额外连接是指打破层次性，在不相邻层次间的连接，这些连接会导致网络中的各种问题，例如缺乏汇聚层的访问控制和数据报过滤等。\n4、在进行设计时，应当首先设计接入层，根据流量负载、流量和行为的分析，对上层进行更精细的容量规划，再依次完成各上层的设计。\n5、除去接入层的其他层次，应尽量采用模块化方式，每个层次由多个模块或者设备集合构成，每个模块间的边界应非常清晰。\n例题 学霸肯定对了 ↕ A 学霸肯定对了 ↕ C 2.3.2 网络冗余设计 ✅ # 例题 学霸肯定对了 ↕ B 2.3.3 集成服务与区分服务 ✅✅ # 集成服务 IETF集成服务(IntServ)工作组根据服务质量的不同，把Internet服务分成了三种类型:\n1、保证质量的服务(Guranteed Services):对带宽、时延抖动和丢包率提供定量的保证;\n2、负载受控的服务 (Comrolled-load Services):提供一种类似于网络欠载情况下的服务，这是一种定性的指标;\n3、尽力而为的服务(Best-Effort):这是Internet提供的一般服务，基本上无任何质量保证。\n区分服务 区分服务要求每个IP分组都要根据IPv4协议头中的服务类型 (在IPv6中是通信类型)字段加上一个DS码点，然后内部路由器根据DS码点的值对分组进行调度和转发。\n2.3.4 软件定义网络 SDN ✅ # SDN(Software Defined Netwok)的网络架构中包含:控制层、转发层和应用层，没有逻辑层。\n3 网络存储 ✅✅✅ # 各式网络存储架构 磁盘阵列容量计算 会计算Raid3和5的磁盘容量就行\n例题 学霸肯定对了 ↕ C 学霸肯定对了 ↕ B B\n3块80G的Raid5的容量=(3-1) * 80=160G，2块80G和1块40G的磁盘做Raid5的容量=(3-1) * 40=80G\n4 IPV6 ✅ # IPV6的特点 IPV4-\u0026gt;IPV6 IPV6地址合法性判断 例题 学霸肯定对了 ↕ C 5 网络接入技术 ✅ # 5G网络的切片技术是将5G网络分割成多张虚拟网络，从而支持更多的应用。就是将一个物理网络切割成多个虚拟的端到端的网络,每个虚拟网络之间，包括网络内的设备、接入、传输和核心网,是逻辑独立的,任何一个虚拟网络发生故障都不会影响到其它虚拟网络。\n6 综合布线 ✅✅ # 例题 学霸肯定对了 ↕ C 7 网络技术扩展 ✅ # 7.1 物联网 ✅ # 物联网属于层次型架构风格。\n感知层的关键技术 例题 学霸肯定对了 ↕ D 7.2 云计算 ✅ # 例题 学霸肯定对了 ↕ A 8 常见网络设备的原理或作用 ✅✅ # 8.1 交换机 ✅✅ # 交换机的初始mac地址表为空。\n交换机接收到数据后，如果没有相应的表项，则采用ARP洪泛操作（即通过广播的方式转发）。\n交换机通过读取输入帧中的源地址添加相应的MAC地址表项。\n交换机的MAC地址表项是动态增长的。\n8.2 路由器 ✅ # 路由器一般采取存储转发方式，需要对待转发的数据包进行重新拆包，分析其源地址和目的地址，再根据路由表对其进行路由和转发，而交换机采取的是直接转发方式，不对数据包的三层地址进行分析，因此路由器转发所带来的延迟要小于交换机。\n8.3 网闸 ✅✅ # 网闸是使用带有多种控制功能的固态开关读写介质连接两个独立主机系统的信息安全设备。由于物理隔离，网闸所连接的两个独立主机系统之间不存在通信的物理连接、逻辑连接、信息传输命令、信息传输协议，不存在依据协议的信息包转发，只有数据文件的无协议“摆渡”，且对固态存储介质只有“读”和“写”两个命令。所以，物理隔离网闸从物理上隔离、阻断了具有潜在攻击可能的一切连接，使“黑客”无法入侵、无法攻击、无法破坏，实现了真正的安全。\n使用安全隔离网闸的意义如下所述。\n1.当用户的网络需要保证高强度的安全，同时又与其他不信任网络进行信息交换的情况下，如果采用物理隔离卡，用户必须使用开关在内外网之间来回切换，不仅管理起来非常麻烦，使用起来也非常不方便。如果采用防火墙，由于防火墙自身的安全很难保证，所以防火墙也无法防止内部信息泄漏和外部病毒、黑客程序的渗入，安全性无法保证。在这种情况下，安全隔离网闸能够同时满足这两个要求，弥补了物理隔离卡和防火墙的不足之处，是最好的选择。\n2.对网络的隔离是通过网闸隔离硬件实现两个网络在链路层断开，但是为了交换数据，通过设计的隔离硬件在两个网络对应层次上进行切换，通过对硬件上的存储芯片的读写，完成数据的交换。\n3.安装了相应的应用模块之后，安全隔离网闸可以在保证安全的前提下，使用户可以浏览网页、收发电子邮件、在不同网络上的数据库之间交换数据，并可以在网络之间交换定制的文件。\n9 路由的管理距离 ✅ # 若管理距离为15，则这个路由的管理距离小于外部BGP的管理距离，所以该路由信息比较可靠。\n10 网络延迟 ✅✅ # 网络中的延迟产生与以下几个方面有关:运算、读取和写入、数据传输以及数据传输过程中的拥塞所带来的延迟。在网络中，数据读写的速率较之于数据计算和传输的速率要大得多，所以数据读写的延迟是影响网络延迟的最大的因素。\n在对等网络中，由于采用总线式的连接，因此网络中的终端数量越多，终端所能够分配到的转发时隙就越小，所带来的延迟也就越大。\n路由器一般采取存储转发方式，需要对待转发的数据包进行重新拆包，分析其源地址和目的地址，再根据路由表对其进行路由和转发，而交换机采取的是直接转发方式，不对数据包的三层地址进行分析，因此路由器转发所带来的延迟要小于交换机。\n数据在Internet中传输时，由于互联网中的转发数据量大且所需经过的点多，势必会带来更大的延迟。\n11 层次化网络编址 ✅ # 层次化编址是一种对地址进行结构化设计的模型，使用地址的左半部的号码可以体现大块的网络或者节点群，而才半部可以体现单个网络或节点。层次化编址的主要优点在于可以实现层次化的路由选择，有利于在网络互联路由设备之间发现网络拓扑。\n设计人员在进行地址分配时，为了配合实现层次化的路由器，必须遵守一条简单的规则:如果网络中存在分支管理，而且一台路由器负责连接上级和下级机构，则分配给这些下级机构网段应该属于一个连续的地址空间，并且这些连续的地址空间可以用一个子网或者超网段表示。\n12 Kerberos协议 ✅ # 采用Kerberos系统进行认证时，可以在报文中加入时间戳来防止重放攻击。\nKerberos提供了一种单点登录 (SSO)的方法。考虑这样-个场景，在一个网络中有不同的服务器，比如，打印服务器、邮件服务器和文件服务器。这些服务器都有认证的需求。很自然的，让每个服务器自己实现一套认证系统是不合理的，而是提供一个中心认证服务器(AS-AuthenticationServer)供所有应用服务器使用。这样任何客户端就只需维护，一个密码就能登录所有服务器。因此，在Kerberos系统中至少有三个角色:认证服务器(AS)，客户端(Client)和应用服务器 (Server)。客户端和应用服务器将在AS的帮助下完成相互认证。在Kerberos系统中，客户端和应用服务器都有一个唯一的名字。同时，客户端和服务器都有自己的密码，并且它们的密码只有自己和认证服务器AS知道。客户端在进行认证时，需首先向密钥分发中心(注意不是CA)来申请初始票据。\n第三方认证服务的两种体制分别是Kerberos和PKI\n课后习题 # todo 计算机网络习题\n"},{"id":11,"href":"/docs/example/architect-exam/3.10-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/4-%E5%9F%BA%E4%BA%8E%E6%9E%B6%E6%9E%84%E7%9A%84%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/","title":"4) 基于架构的软件开发","section":"3.10 软件架构设计","content":" 基于架构的软件开发ABSD # 基于架构的软件开发ABSD(Architecture-Based Software Development)。它能很好地支持重用(比如说有需求库，有构件库)。\n使用ABSD方法，设计活动可以从项目总体功能框架明确就开始；ABSD方法是一个自顶向下，递归细化的过程，直到能产生软件构件、模块或类。\n架构设计是一个迭代过程，在建立软件架构的初期，选择一个合适的架构风格是首要的，在此基础上，开发人员通过架构模型，可以获得关于软件架构属性的理解，为将来的架构实现与演化过程建立了目标。\n1、ABSD方法是架构驱动，即强调由业务、功能和质量需求的组合驱动架构设计。\n2、ABSD方法有三个基础。第一个基础是功能的分解。在功能分解中，ABSD方法使用已有的基于模块的内聚和耦合技术，第二个基础是通过选择架构风格来实现质量和业务需求，第三个基础是软件模板的使用。\n3、视角与视图来描述架构、用例用来描述功能需求、特定场景(质量场景)用来描述非功能需求(质量需求)。\nANSI/IEEE1471-2000是对软件密集型系统的架构进行描述的标准。在该标准中，视图这一概念主要用于描述软件架构模型。在此基础上，通常采用视角描述某个利益相关人(Stakeholder)所关注架构模型的某一方面。架构则是对所有利益相关人关注点的响应和回答\n在考虑架构时，可以从不同的视角来检查，这促使软件设计师考虑架构的不同属性。例如，展示功能组织的静态视角能判断系统质量特性，展示并发行为的动态视角能判断系统行为特性。\n其开发过程如下 1 架构需求 ✅✅✅ # 2 架构设计 ✅✅✅✅ # 架构设计主要关注软件组件的结构、属性和交互作用，并通过多种视图全面描述特定系统的架构。\n3 架构文档化 ✅✅✅ # 架构文档是对软件架构的一种描述，帮助程序员使用特定的程序设计语言实现软件架构。软件架构文档的写作应该遵循一定的原则，这些原则包括：文档要从使用者的角度进行编写；必须分发给所有与系统有关的开发人员；应该保持架构文档的即时更新，但更新不要过于频繁，架构文档中描述应该尽量避免不必要的重复，每次架构文档的修改都应该有修改记录。\n4 架构复审 ✅✅✅✅✅ # 架构复审是基于架构开发中一个重要的环节。架构设计文档化和复审是一个迭代的过程；架构复审的目的是标识潜在的风险，及早发现架构设计中的缺陷和错误；在一个主版本的软件架构分析之后，要安排一次由外部人员(用户代表和领域专家)参加的复审；架构复审过程中，通常会对一个可运行的最小化系统进行架构评估和测试(对项目的骨架进行测试)。评估很重要，会在“软件架构评估”中单独讲。\n5 架构实现 ✅✅✅✅ # 6 架构演化 ✅✅✅✅ # 例题 学霸肯定对了 ↕ B C C 学霸肯定对了 ↕ A A C "},{"id":12,"href":"/docs/example/architect-exam/3.5-%E6%95%B0%E5%AD%97%E4%B8%8E%E7%BB%8F%E6%B5%8E%E7%AE%A1%E7%90%86/","title":"3.5 数字与经济管理","section":"3. 高级软考 - 系统架构师","content":" 课程内容提要 ✌ # 图论 最小生成树 ✅ 最短路径 ✅ 网络与最大流量 ✅ 运筹方法 线性规划 ✅ 动态规划 ✅✅✅ 预测与决策 ✅ 数学建模 ✅✅ 面积体积估算法 1 图论 # 1.1 最小生成树 # 学霸肯定对了 ↕ 23\n解题思路：按边看，依次找最小的变长将所有节点连接起来，不能有回路，及3-6，3-7，1-2，2-6，4-7，2-5，所以长度至少为2+3+3+4+5+6=23\n1.2 最短路径 # 学霸肯定对了 ↕ 81\n21+20+20+8+12=81，其他路径都比81大\n1.3 网络与最大流量 # 学霸肯定对了 ↕ 23\n10+6+5+1+1=23\n2 运筹方法 # 2.1 线性规划 # 学霸肯定对了 ↕ 设产品1为X，产品2位Y，立不等式，画图，最优解在顶点处，将顶点都带入目标式子，得到最值 2.2 动态规划 # 学霸肯定对了 ↕ B 2.3 预测与决策 # 学霸肯定对了 ↕ C\n解析：第一个月A=0.5，B=0.5，所以用(0.5,0.5) * 转移矩阵P，得到(0.6,0.4)，第二个月：(0.6,0.4) * 转移矩阵P=(0.64,0.36)，所以选C\n学霸肯定对了 ↕ C\n解析：设8点前有A人，来：x人/分钟，检票：y人/分钟，第二问开口最少为M，A+60x=60y * 8，A+40x=40y * 10，联立得到x=4y（来一波人开4个口），带入1式，得到A=240y，A+20x=20y*M，得到M=320y/20y=16\n学霸肯定对了 ↕ 甲乙都会选择降价策略 总结：乐观-\u0026gt;大中取大，悲观-\u0026gt;小中取大，后悔值-\u0026gt;大中取小 水路代价比较小\n学霸肯定对了 ↕ B\n加权平均值\n3 数学建模 # 解决多数实际问题的关键是建立数学模型 (包括数学方程、数学公式、图形描述、符号表示等)。数学建模是对现实世界的一种近似的、简化的、易于求解的抽象描述。数学模型常需要忽略某些次要因素，以便易于近似求解过于简单的模型能准确性不足，为提高准确性，若建立过于复杂的模型，求解的难度就会增加。在简单性和准确性之间求得平衡是数学建模的一条原则。对同一问题可以建立多种数学模型。数学模型也常带有一些可变的参数。选用哪个模型，或选择什么样的参数，更能近似地解决实际问题，符合实际要求，这需要反复多次试验，根据求解失败的教训或用户的反馈意见逐步对模型进行修正或改进，逐步完善模型，并求得使用户满意，符合实际情况的结果。对一般的问题，并没有统一的、普适的模型评价标准，没有最好，只有更好，实践是检验真理的唯一标准。\n在对实际应用问题建立数学模型并求得结果后，还需要根据建模的目的和要求，利用相关知识，结合研究对象的特点，进行模型分析。模型分析工作主要包括模型的合理性分析、模型的误差分析和参数的灵敏性分析等，一般不包括模型的先进性分析。\n3.1 面积体积估算法 # 利用计算机的随机数来估算不规则的面积、体积。\n课后习题 # todo 数字与经济管理习题\n"},{"id":13,"href":"/docs/example/architect-exam/3.10-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/5-%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E5%B1%9E%E6%80%A7/","title":"5) 软件质量属性","section":"3.10 软件架构设计","content":" 软件质量属性 # 最常见的质量属性分别是：性能(Performance)、可用性(Availability)、可修改性(Modifiability)、安全性(Security)、可测试性(Testability)、易用性(Usability)等。\n1 性能 ✅✅✅ # 性能 (performance) 是指系统的响应能力，即要经过多长时间才能对某个事件做出响应，或者在某段时间内系统所能处理的事件的个数。例如：\n1、同时支持1000并发；\n2、响应时间小于1ms；\n3、显示分辨率达到4k；\n2 可用性 ✅✅✅ # 可用性(availability)是系统能够正常运行的时间比例。经常用两次故障之间的时间长度或在出现故障时系统能够恢复正常的速度来表示。例如：\n1、主服务器故障，一分钟内切换至备用服务器；\n2、系统故障，1小时内修复；\n3、系统支持 7 x 24 小时工作。\n3 安全性 ✅✅✅ # 安全性(security)是指系统在向合法用户提供服务的同时能够阻止非授权用户使用的企图或拒绝服务的能力。安全性又可划分为机密性、完整性、不可否认性及可控性等特性。例如：\n1、可抵御sql注入攻击；\n2、对计算机的操作都有完整记录；\n3、用户信息数据库授权必须保证99.9%可用。\n安全性还有个战术：限制访问。\n4 可修改性 ✅✅✅ # 可修改性(modifiability)是指能够快速地以较高的性价比对系统进行变更的能力。通常以某些具体的变更为基准，通过考察这些变更的代价衡量可修改性。例如：\n1、更改系统报表模块，2人在两周内必须完成；\n2、对Web界面风格进行修改，修改必须在2个月内完成。\n可修改性还有个战术：接口实现分离。\n可修改性是指能够快速地以较高的性能价格比对系统进行变更的能力。包括可维护性、可扩展性、结构重组、可移植性4个方面。注意可变性不是它要考虑的范围。\n例题 学霸肯定对了 ↕ A D A 学霸肯定对了 ↕ B C A C C A 5 基本不考的几个属性 ✅ # 易用性：界面友好，新用户学习系统使用时间不超过2小时。\n可测试性：提供远程调试接口，支持远程调试。\n可靠性、功能性、可变性、互操作性。\n可伸缩性：当用户数和数据量增加时，软件系统维持高服务质量的能力。\n"},{"id":14,"href":"/docs/example/architect-exam/3.6-%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE%E4%B8%8E%E6%80%A7%E8%83%BD%E8%AF%84%E4%BB%B7/","title":"3.6 系统配置与性能评价","section":"3. 高级软考 - 系统架构师","content":" 课程内容提要 ✌ # 性能指标 ✅ 阿姆达尔解决方案 ✅✅✅ 性能评价方法 ✅✅✅ 1 性能指标 # 对计算机评价的主要性能指标有时钟频率、数据处理速率、运算精度和内存容量等。其中，时钟频率是指CPU在单位时间内输出的脉冲数，它在很大程度上决定了计算机的运行速度，单位为MHz(或GHz)。数据处理速率是个综合性的指标，单位为MIPS (百万条指令/秒)。影响运算速度的因素主要是时钟频率和存取周期，字长和存储容量也有影响。内存容量是指内存储器中能存储的信息总字节数。常以8个二进制位(bit) 作为一个字节 (Byte)。对数据库管理系统评价的主要性能指标有最大连接数、数据库所允许的索引数量和最大并发事务处理能力等。\n字长：cpu一次读取数据的长度，它也影响着最大的内存容量(最大地址)。2^32 = 4G，32位操作系统最大支持4GB内存。\n主存容量：32位操作系统最大支持4GB内存。\n存取速度：存取速度和cache的命中率相关。\n运算速度：主频：(单位时间内的脉冲数)2.4GHz，主频=外频*倍频，CPU时钟周期：1/主频。在计算机中，处理器的运算主要依赖于晶振芯片给CPU提供的脉冲频率，处理器的运算速度也依赖于这个晶振芯片。通常CPU的频率分为主频、倍频和外频。主频是指CPU内部的时钟频率，是CPU进行运算时的工作频率。外频是指CPU与周边设备传输数据的频率，具体是指CPU到芯片组之间的总线速度。倍频是指CPU频率和系统总线频率之间相差的倍数，CPU速度可以通过倍频来无限提升。\n每秒执行百万次指令数：峰值MIPS(每秒百万次指令数)用来描述计算机的定点运算速度，通过对计算机指令集中基本指令的执行速度计算得到。假设某计算机中基本指令的执行需要5个机器周期，每个机器周期为3微秒，则该计算机的定点运算速度为：每完成一个基本指令需要5*3=15微秒，根据峰值MIPS的定义，其定点运算速度为1/15=0.067MIPS，特别需要注意单位“微秒”和“百万指令数”，在计算过程中恰好抵消。\n性能瓶颈调整 计算机的性能包括的面很广，不单是CPU的利用率。即使CPU的利用率已经接近100%.这只说明目前计算机正在运行大型计算任务。其他方面的任务可能被外设阻塞着，而改进外设成为当前必须解决的瓶颈问题。\n如果磁盘存取速度低，则应增加新的磁盘或更换使用更先进的磁盘。安装更快的CPU不能解决磁盘存取速度问题。\n多处理机的性能并不能正比于CPU的数目，因为各个CPU之间需要协调，需要花费一定的开销。\n使用虚存的计算机系统如果主存太小，则主存与磁盘之间交换页面的频率将增加，业务处理效率就会降低，此时应当增加更多的内存。这就是说，除CPU主频外，内存大小对计算机实际运行的处理速度也密切相关。\n例题 学霸肯定对了 ↕ D A 性能监控 进行系统监视通常有三种方式:一是通过系统命令，如UNIX/Linux系统中的ps、last等;二是通过系统记录文件查阅系统在特定时间内的运行状态;三是集成命令、文件记录和可视化技术的监控工具，如Perfmon (Performance Monitor)是Windows自带的性能监控工具，提供了图表化的系统性能实时监视器、性能日志和警报管理。通过添加性能计数器 (Performance Co inter)可以实现对CPU、内存、网络、磁盘、进程等多类对象的上百个指标的监控。\n而这些都不属于性能监控工具：Windows的netstat命令用来查看某个端口号是否被占用以及由哪个进程占用。iptables是在Linux2.4内核之后普遍使用的基于包过滤的防火墙工具，可以对流入和流出服务器的数据包进行很精细的控制。top命令是Linux下常用的性能分析工具，能够实时显示系统中各个进程的资源占用状况。\n2 阿姆达尔解决方案 # 例题 学霸肯定对了 ↕ 答案：B\n100/52\n学霸肯定对了 ↕ 答案：B\n求极限就行，1/0.1n\n3 性能评价方法 # 对运行系统进行评估的主要目的是评价信息系统在性能方面的表现，找出系统可能存在的性能瓶颈。\n常见的Web服务器性能评估方法有基准测试、压力测试和可靠性测试等。\n评价Web服务器的主要性能指标有最大并发连接数、响应延迟和吞叶量等。\n当系统性能降到基本水平时需要查找影响性能的瓶颈并消除该瓶颈。\n各种类型的计算机都具有自己的性能指标，计算机厂商当然希望自己研制的计算机有较高的性能。同样的计算机，如果采用不同的评价方法，所获得的性能指标也会不同。因此，用户希望能有一些公正的机构采用公认的评价方法来测试计算机的性能。这样的测试称为基准测试，基准测试采用的测试程序称为基准程序(Benchmark)，基准程序就是公认的标准程序，用它能测试多种计算机系统，比较和评价它们的性能，定期公布测试结果，供用户选购计算机时参考。\n基准程序法:把应用程序中用得最多、最频繁的那部分核心程序作为评估计算机系统性能的标准程序，称为基准测试程序 (benchmark)。基准程序法是目前一致承认的测试系统性能的较好方法。\n测试准确度排名：真实的程序 \u0026gt; 核心程序 \u0026gt; 小型基准程序 \u0026gt; 合成基准程序\n在大多数情况下，为测试新系统的性能，用户必须依靠评价程序来评价机器的性能。对于真实程序、核心程序、小型基准程序和合成基准程序来说，其评测程度依次递减。我们把应用程序中用的最多、最频繁的那部分核心程序作为评价计算机性能的标准程序，称为基准测试程序(Benchmark)。\n事务处理性能委员会是制定商务应用基准程序(Benchmark)标准规范，并管理测试结果发布的非营利组织，其发布的TPC-C是在线事务处理的其准程序。TPC_D是决策支持的基准程序。\n例题 学霸肯定对了 ↕ 答案：C A 学霸肯定对了 ↕ 答案：A B 学霸肯定对了 ↕ 答案：B 课后习题 # todo 补充课后习题\n"},{"id":15,"href":"/docs/example/architect-exam/3.10-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/6-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AF%84%E4%BC%B0/","title":"6) 软件架构评估","section":"3.10 软件架构设计","content":" 软件架构评估 # 问题： 1、为什么要进行架构评估？\n答：架构复审的目的是标识潜在的风险，及早发现架构设计中的缺陷和错误。\n2、架构评估到底评什么？\n答：性能是否足够，可修改性是否好，可用性怎么样，安全性是否满足要求，开发成本如何等等问题。\n3、架构评估怎么评？\n答：见架构评估方法\n1 点位 ✅✅✅ # 敏感点：为了实现某种特定的质量属性，是一个或多个构件的特性。\n权衡点：是影响多个质量属性的特性，是多个质量属性的敏感点。\n风险点：是指架构设计中潜在的、存在问题的架构决策所带来的隐患。\n非风险点：是指不会带来隐患，一般以“xxx要求是可以实现 (或接受)的”方式表达。\n2 架构评估方法 ✅✅✅ # 架构评估方法包含3种方式：基于问卷调查(检查表)的方式、基于场景的方式、基于度量的方式。越来越客观准确，但实际实施起来的难度越来越大，所以通常都采用相对较中庸的方法：基于场景的方式。\n3 基于场景的评估方法 ✅✅✅✅ # 什么是场景 场景(scene)：在进行架构评估时，一般首先要精确地得出具体的质量目标(如性能上，在10ms内返回结果等)，并以之作为判定该架构优劣的标准。为得出这些目标而采用的机制叫做场景。场景是从风险承担者的角度对与系统交互的简短描述。在架构评估中，一般采用刺激(stimulus)、环境(environment)和响应(response)三方面来对场景进行描述；刻画质量属性的手段由六部分组成：刺激源、刺激、制品、环境、响应、响应度量。\n基于场景的评估方法包含3种：软件架构分析法(SAAM, Software Architecture Analysis Method)、架构权衡分析法(ATAM, Architecture Tradeoff Analysis Method)、成本效益分析法(CBAM)。\n3.1 SAAM ✅✅✅✅ # SAAM最初用于分析架构可修改性，后扩展到其他质量属性。SAAM的输入是问题描述、需求说明和架构描述；其分析过程包括场景开发(用质量效用树对场景进行分类和确定优先级)、架构描述、单个场景评估、场景交互和总体评估。\n质量效用树 M：middle\nL：low\nH：high\n在识别出质量属性描述后，通常采用效用树对质量属性的描述进行刻画与排序。从树根到叶子结点分别是：根-\u0026gt;质量属性-\u0026gt;属性分类(细化)-\u0026gt;具体场景。\n3.2 ATAM ✅✅✅✅ # 在SAAM的基础上发展起来的，主要针对性能、可用性、安全性和可修改性(用质量效用树对场景进行分类和确定优先级)，在系统开发之前，对这些质量属性进行评价和折中。整个评估过程强调以属性为核心。第二、三阶段容易记错。\n例题 学霸肯定对了 ↕ D B\n提到影响两个及以上属性时，基本上都是权衡点。\n学霸肯定对了 ↕ D\n基于度量的架构评估方法才是最精确的，它是一种代码评估方法，需要对软件系统进行测试，ATAM不是一种精确的评估工具，ATAM本身不是精确评估，所以不太需要单独评估需求是否准确，需求是否准确是需求工程要干的活儿\n学霸肯定对了 ↕ C C 案例分析例题 学霸肯定对了 ↕ "},{"id":16,"href":"/docs/example/architect-exam/3.7-%E7%9F%A5%E8%AF%86%E4%BA%A7%E6%9D%83%E4%B8%8E%E6%A0%87%E5%87%86%E5%8C%96/","title":"3.7 知识产权与标准化","section":"3. 高级软考 - 系统架构师","content":" 课程内容提要 ✌ # 保护范围与对象 ✅✅✅ 保护期限 ✅✅ 知识产权人确定 ✅✅✅ 侵权判定 ✅✅✅✅ 标准的分类 ✅ 1 保护范围与对象 # 反编译不构成侵犯著作权（不算侵权），但也不受著作权法保护。\n计算机软件保护条例第六条规定“本条例对软件著作权的保护不延及开发软件所用的思想、处理过程、操作方法或者数学概念等。\n软件产品的开发、生产、销售、进出口等活动应遵守我国有关法律、法规和标准规范。任何单位和个人不得开发、生产、销售、进出口含有以下内容的软件产品:（一)侵犯他人知识产权的;(二)含有计算机病毒的;(三)可能危害计算机系统安全的，(四)含有国家规定禁止传播的内容的:(五)不符合我国软件标准规范的。\n例题 学霸肯定对了 ↕ 答案：A 学霸肯定对了 ↕ 答案：C 学霸肯定对了 ↕ 答案：C 2 保护期限 # 分为六类来记忆，分别是：永久、大于50年、大于20年、大于10、续注、不确定。\n我国的《著作权法》对一般文字作品的保护期是作者有生之年和去世后50年，德国的《版权法》对一般文字作品的保护期是作者有生之年和去世后70年。假如某德国作者己去世60年，则我国M出版社拟在我国翻译出版该作品，不需要征得德国作者继承人的许可，就可在我国出版发行。如果在德国出版发行则构成侵权。\n例题 学霸肯定对了 ↕ 答案：B 学霸肯定对了 ↕ 答案：C 3 知识产权人确定 # 著作权除合同明确规定外，都归公司所有，若双方都是公司，则谁开发归谁。\n改编、翻译、注释、整理已有作品而产生的作品，其著作权由改编、翻译、注释、整理人享有，但行使著作权时不得侵犯原作品的著作权。\n合作作品的著作权归属于所有参与人不含组织创作的人。\n例题 学霸肯定对了 ↕ 答案：D 学霸肯定对了 ↕ 答案：A 学霸肯定对了 ↕ 答案：B 4 侵权判定 # 知识产权具有地域性的特征，按照一国法律获得承认和保护的知识产权，只能在该国发生法律效力，即知识产权受地域限制，只有在一定地域内知识产权才具有独占性 (专用性)或者说，各国依照其本国法律授予的知识产权，只能在其本国领域内受其国家的法律保护，而其他国家对这种权利没有保护的义务，任何人均可在自己的国家内自由使用外国人的知识产品，既无须取得权利人的许可，也不必向权利人支付报酬。例如：中国M公司与美国L.公司分别在各自生产的平板电脑产品上使用iPad商标，且分别享有各自国家批准的商标专用权。中国Y手电筒经销商，在其经销的手电筒高端产品上也使用iPad商标，并取得了注册商标。则L公司在中国市场销售其产品需要向M公司支付注册商标许可使用费。\n以下不适用著作权法的作品，即时事新闻，历法、通用数表、通用表格和公式，法律、法规、国家机关的决议、决定、命令和其他具有立法、行政、司法性质的文件，及其官方正式译文。例如：国务院颁布的《计算机软件保护条例》不受著作权法保护。\n撰写学术论文引用他人资料时，“只能限于介绍、评论或为了说明某个问题引用作品”、“只要不构成自己作品的主要部分，可引用资料的部分或全部”、“不必征得著作权人的同意，不向原作者支付合理的报中”，而不能引用别人未发表的作品。\n盗版软件持有人和提供者都应承担法律责任。赵某购买了一款有注册商标的应用App，擅自复制成光盘出售，其行为是侵犯软件著作权的行为。\n甲公司的某个注册商标是乙画家创作的绘画作品，甲申请该商标注册时未经乙的许可，乙认为其著作权受到侵害。乙可以采取的措施有：向甲公司所在地人民法院提起著作权侵权诉讼；请求商标评审委员会裁定撤销甲的注册商标；与甲交涉，采取许可方式让甲继续使用该注册商标；请求商标评审委员会受理，对商标评审委员会的裁定，当事人不服可以向法院起诉。\n程序员甲将其编写完成的某软件程序发给同事乙并进行讨论，之后甲放弃该程序并决定重新开发，后来乙将该程序稍加修改并署自己名在某技术论坛发布，则乙的行为侵犯了甲对该程序享有的软件著作权。 例题 学霸肯定对了 ↕ 答案：B 学霸肯定对了 ↕ 答案：A 学霸肯定对了 ↕ 答案：D 学霸肯定对了 ↕ 答案：A 学霸肯定对了 ↕ 答案：D 5 标准的分类 # 我国标准分为国家标准、行业标准、地方标准和企业标准四类。\n强制性国家标准代号为GB，推荐性国家标准的代号为GB/T例如，“GB 8567-1988 软件产品开发文件编制指南”为强制性国家标准。\n已正式公布的行业代号: QJ(航天)、SJ(电子)、JB (机械)、JR (金融)、HB(航空)等等。行业标准代号由汉字拼音大写字母组成，再加上斜线T组成推荐性行业标准。例如，“HB6698-1993软件工具评价与选择的分类特性体系”为强制性行业标准编号。GJB为中华人民共和国国家军用标准代号。\n地方标准代号由大写汉字拼音DB加上省、自治区、直辖市行政区划代码的前两位数子 (北京市11、天津市12)，再加上斜线T组成推荐性地方标准(DBXX/T),不加斜线T为强制性地方标准 (DBXX)。\n企业标准以大写字母Q开头(如Q/XXX)。\n例题 学霸肯定对了 ↕ 答案：B 课后习题 # todo 补充课后习题\n"},{"id":17,"href":"/docs/example/architect-exam/3.10-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/7-%E8%BD%AF%E4%BB%B6%E4%BA%A7%E5%93%81%E7%BA%BF/","title":"7) 软件产品线","section":"3.10 软件架构设计","content":" 软件产品线 # 它是多种技术的综合体。\n1. 基本概念 ✅✅ # 跟特定领域软件架构DSSA类似，它的主要特点就是把某个领域的公共的架构思想等作为指南。这样可以快速弄出一个原型。只需要做很小的个性部分就可以快速完成开发。\n2. 双生命周期模型 ✅✅ # 双生命周期模型分成两个重叠的生命周期：领域工程和应用工程。两个周期内部都分成分析、设计和实现3个阶段。在对新系统进行需求分析的时候，先用领域分析，再做新系统的需求分析。依次类推下去。\n3. 建立方式 ✅✅✅ # 对两个维度进行分类得到4种方法。\n4. 组织结构 ✅✅ # 核心资源组开发领域工程相关的代码。应用组基于核心组开发特定应用。\n案例分析例题 学霸肯定对了 ↕ "},{"id":18,"href":"/docs/example/architect-exam/3.8-%E4%BC%81%E4%B8%9A%E4%BF%A1%E6%81%AF%E5%8C%96%E6%88%98%E7%95%A5%E4%B8%8E%E5%AE%9E%E6%96%BD/","title":"3.8 企业信息化战略与实施","section":"3. 高级软考 - 系统架构师","content":" 课程内容提要 ✌ # 信息与信息化的概念 ✅ 信息系统生命周期 ✅ 信息系统战略规划 ✅✅✅ 政府信息化与电子政务 ✅ 企业信息化与电子商务 ✅✅✅ 企业门户 ✅✅ 企业应用集成 ✅✅✅ 1 信息与信息化概念 # 1.1 信息 # 香农(信息论)：信息就是不确定性的减少。\n维纳(控制论)：信息就是信息，既不是物质，也不是能量。(信息是可以转换成物质或者能量)\n特点 1.2 信息化 # 概念 信息化是从工业社会到信息社会的演进与变革。\n信息化的主体是全体社会成员 (政府、企业、团体和个人)，时域是一个长期过程,空域是经济和社会的一切领域，手段是先进社会生产工具。\n信息化需求包含3个层次，即战略需求(目标是提升组织的竞争能力，为组织的可持续发展提供支持环境)、运作需求(包含实现信息化战略目标的需求、运营策略的需求和人才培养的需求等三个方面)和技术需求(求主要强调在信息层技术层面上对系统的完善、升级、集成和整合提出的需求)。\n信息化对组织的意义 2 信息系统生命周期 # 2.1 单个信息系统的生命周期 # 按照传统的软件生命周期方法学，可以把软件生命期划分为软件定义(需要做可行性研究)、软件开发、软件运行、软件维护4个阶段。\n单个系统的生命周期比较常考。\n3 信息系统战略规划 # 方法论 第一阶段需求相对分散(销售部门有销售部门的系统，后勤部门有后勤部门的系统)。第二阶段围绕企业整体。第三阶段以集成为核心。第一阶段的每种方法(统称为BCS)都需要了解，二三阶段知道有哪些方法就行。\n3.1 企业系统规划法 BSP # 企业系统规划法(Business System Planning, BSP)；自上而下的进行规划，自下而上的进行实现。U：use；C：create；注册需要创建学员信息，权限判断需要使用学员信息。\n3.2 关键成功因素法 CSF # 关键成功因素法(Critical Success Factors, CSF)通过对关键成功因素的识别，找出实现目标所需要的关键信息集合，从而确定系统开发的优先次序。关键成功因素来源于组织的目标，通过组织的目标分解和关键成功因素识别、性能指标识别，一直到产生数据字典。\n3.3 战略集合转换法 SST # 战略集合转换法(Strategic Data Planning, SDP)；该方法认为企业的战略目标是一个“信息集合”，由企业中的使命、战略、目标组成。SST方法的基本思想是：识别企业的战略目标，并将企业的战略目标转化成信息系统的战略目标。\n例题 学霸肯定对了 ↕ 答案：B C 4 政府信息化与电子政务 # 要知道电子政务的角色，以及各个角色之间的典型应用场景(无法直接判断时：参考主动与被动)\n例题 学霸肯定对了 ↕ 答案：B A D C 5 企业信息化与电子商务 # 企业信息化建设的核心和本质是企业运用信息技术，进行知识的挖掘，对业务流程进行管理。\n5.1 企业信息化的发展 # ERP存在众多的子系统(如：客户关系管理CRM、供应链管理SCM)，这些子系统有统一的规划，是互联互通的，便于事前和事中监控。\nERP是对企业物流、资金流和信息流资源进行全面集成管理的管理信息系统。在ERP五个层次的计划中，生产预测计划是对市场需求进行比较准确的预测；销售管理计划是针对企业的销售部门的相关业务进行管理；生产计划大纲根据经营计划的生产目标制定，是对企业经营计划的细化，主生产计划说明了在一定时期内生产什么，生产多少和什么时候交货；物料需求计划是对主生产计划的各个项所需的全部制造件和全部采购件的网络支持计划和时间进度计划，能力需求计划是对物料需求计划所需能力进行核算的一种计划管理方法，能够帮助企业尽早发现企业生产能力的瓶颈，为实现企业的生产任务提供能力帮面的保障。\n企业业务流程重构是利用信息和网络技术，对企业的组织结构和工作方法进行“彻底的、根本性的”重新设计，以适应当今市场发展和信息社会的需求。\n核心业务应用方法是围绕核心业务应用计算机和网络技术，这是很多企业信息化成功的秘诀和有效途径。在业务数量浩繁且流程错综复杂的大型企业里，建设覆盖整个企业的信息系统往往很难成功，各个部门的局部开发和应用又有很大的弊端，会造成系统严重分割，形成许多“信息孤岛”，造成大量的无效或低效投资。\n常见的资源管理方法有ERP(企业资源规划)和SCM(供应链管理)。\n人力资本与人力资源的主要区别是人力资本理论把一部分企业的优秀员工看作是一种投资，能够取得投资收益。\n企业信息化涉及对企业管理理念的创新，管理流程的优化，管理团队的重组和管理手段的草新。管理创新是按照市场发展的要求，对企业现有的管理流程重新整合，从作为管理核心的财务、物料管理，转向技术、物资、人力资源的管理，并延伸到企业技术创新、工艺设计、产品设计、生产制造过程的管理，进而还要扩展到客户关系管理、供应链管理乃至发展到电子商务。\n企业信息化方法主要包括业务流程重构、核心业务应用、信息系统建设、主题数据库、资源管理和人力资本投资方法。\n企业数字化转型的五个阶段依次是：初始级发展阶段、单元级发展阶段、流程级发展阶段、网络级发展险段、生态级发展阶段。\n共享数据库是一种重要的企业应用集成方式，它通常将应用程序的数据存储在一个共享数据库中，通过制定统一的数据库模式来处理不同应用的集成需求。共享数据库为不同的应用程序提供了统一的数据存储与格式定义，能够在定程度上缓解数据语义不一致的问题，但无法完全解决该问题(选择题中有的选项可能说解决了该问题就是错的)。在共享数据库集成中，多个应用程序可能通过共享数据库频繁地读取和修改相同的数据，这会使数据库成为一个性能瓶颈。共享数据库集成方式的一个重要限制来自外部的已封装应用，这些封装好的应用程序只能采用自己定义的数据库模式，调整和集成余地较小。\n5.2 ERP下的CRM系统 # 市场营销和客户服务是CRM的支柱性功能。CRM是一套先进的管理思想及技术手段，它通过将人力资源、业务流程与专业技术进行有效的整合，最终为企业涉及到客户或者消费者的各个领域提供了完美的集成，使得企业可以更低成本、更高效率地满足客户的需求，并与客户建立起基于学习性关系基础上的一对一营销模式，从而让企业可以最大程度提高客户满意度和忠诚度。CRM系统的主要模块包括销售自动化、营销自动化、客户服务与支持、商业智能。\n在客户管理系统中，销售自动化是其中最为基本的模块，营销自动化作为销售自动化的补充，包括营销计划的编制和执行、计划结果分析等功能。客户服务与支持是CRM系统的重要功能。目前，客户服务与支持的主要手段有两种，分别是呼叫中心和互联网。CRM系统能够与ERP系统在财务、制造、库存等环节进行连接，两者之间虽然关系比较独立，但由于两者之间具有一定的关系，因此会形成一定的闭环反馈结构。\n5.3 ERP下的SCM系统 # 打通三流(信息流、资金流、物流)之间的信息孤岛。SCM实际上就是对这“三流”资源进行全面集成管理的管理信息系统。\n供应链中的信息流覆盖了从供应商、制造商到分销商，再到零售商等供应链中的所有环节，其信息流分为需求信息流和供应信息流，这是两个不同流向的信息流。当需求信息(如客户订单、生产计划和采购合同等)从需方向供方流动时，便引发物流。同时，供应信息(如入库单、完工报告单、库存记录、可供销售量和提货发运单等)又同物料一起沿着供应链从供方向需方流动。\n5.4 电子商务 # 同电子政务一样，要知道角色和它们之间的交互类型(无法直接判断时，参考主动和被动)。\n电子商务的实体有：客户、商户、银行和认证中心。\n电子数据交换是电子商务活动中采用的一种重要的技术手段。EDI的实施需要一个公认的标准和协议，将商务活动中涉及的文件标准化和格式化;EDI通过计算机网络，在贸易伙伴之间进行数据交换和自动处理;EDI主要应用于企业与企业、企业与批发商之间的批发业务;EDI的实施在技术上比较成熟，但是实施EDI需要统一数据格式，成本与代价较大。\n5.5 商业智能 BI # 商业智能从联机事务处理过程(On-Line Transaction Processing, OLTP)到联机分析处理过程(On-Line Analysis Processing, OLAP)。数据库从应用数据库发展到数据仓库。应用系统的开发用于支撑业务运作，而商业智能用于决策分析(分析历史数据预判未来)。\n数据仓库(数仓) 1、面向主题:操作型数据库的数据组织面向事务处理任务，各个业务系统之间各自分离，而数据仓库中的数据是按照一定的主题域进行组织。主题是一个抽象的概念，是指用户使用数据仓库进行决策时所关心的重点方面，一个主题通常与多个操作型信息系统相关。\n2、集成性:面向事务处理的操作型数据库通常与某些特定的应用相关，数据库之间相互独立，并且往往是异构的。而数据仓库中的数据是在对原有分散的数据库数据进行抽取、清理的基础上经过系统加工、汇总和整理得到的，必须消除源数据中的不一致性，以保证数据仓库内的信息是关于整个企业的一致的全局信息。\n3、相对稳定性:操作型数据库中的数据通常需要实时更新，数据根据需要及时发生变化。数据仓库的数据主要供企业决策分析之用，所涉及的数据操作主要是数据查询，旦某个数据进入数据仓库以后，一般情况下将被长期保留，也就是数据仓库中一般有大量的查询操作，但修改和删除操作很少，通常只需要定期的加载、刷新。\n4、反映历史变化:操作型数据库主要关心当前某一个时间段内的数据，而数据仓库中的数据通常包含历史信息，系统记录了企业从过去某一时点 (如开始应用数据仓库的时点) 到目前的各个阶段的信息，通过这些信息，可以对企业的发展历程和未来趋势做出定量分析和预测。\n商业智能是企业对商业数据的搜集、管理和分析的系统过程；商业智能般由数据仓库、联机分析处理、数据挖掘等部分组成。\n商业智能系统的处理过程包括数据预处理、建立数据仓库、数据分析及数据展现4个主要阶段。数据预处理是整合企业原始数据的第一步，包括数据的抽取、转换和装载三个过程。建立数据仓库则是处理海量数据的基础。数据分析是体现系统智能的关键，一般采用OLAP和数据挖掘技术。联机分析处理不仅进行数据汇总/聚集，同时还提供切片、切块、下钻、上卷和旋转等数据分析功能，用户可以方便地对海量数据进行多维分析。数据挖掘的目标则是挖掘数据背后隐藏的知识，通过关联分析、聚类和分类等方法建立分析模型，预测企业未来发展趋势和将要面临的问题。在海量数据和分析手段增多的情况下，数据展现则主要保障系统分析结果的可视化。\n数据挖掘 数据挖掘的主要任务是：关联规则挖掘、聚类分析、分类分析、异常分析、特异群组分析和演变分析。\n例题 学霸肯定对了 ↕ 答案：B 学霸肯定对了 ↕ 答案：C D B 数据湖 数据湖可以理解为数据库到数据仓库的中间状态。所以它有数据库和数据仓库的特点；即：有结构化数据，又有非结构化数据；支持联机事务处理，也支持联机分析处理。\n5.6 业务流程的两种手段 # 业务流程重组BPR和业务流程管理BPM\n6 企业门户 # 企业门户(企业门户集成)：企业通过互联网暴露给客户、合作伙伴/供应商、员工的网站。\n具体分为：信息门户、知识门户、应用门户。\n7 企业应用集成 # 目前市场上主流的集成模式有三种，分别是面向信息的集成、面向过程的集成和面向服务的集成。其中面向过程的集成模式强调处理不同应用系统之间的交互逻辑，与核心业务逻辑相分离，并通过不同应用系统之间的协作共同完成某项业务功能。\n企业进行系统集成时，当业务系统的运行平台和开发语言差异较大，而且系统所使用的通信协议和数据格式各不相同时，需要采用总线技术对传输协议和数据格式进行转换与适配。当需要集成并灵活定义系统功能之间的协作关系时，应该采用基于工作流的功能关系定义方式。\n从不同的角度，可以将企业应用集成划分为3个方面。\n7.1 架构分层的角度 # 从架构的角度看，企业应用集成可以分为：界面集成、数据集成、控制集成、业务流程集成(过程集成)。\n界面集成：资源导航类网站 hao123；\n数据集成：关键要判断在进行集成时，需要数据库中的单表还是多表进行数据整合。如果是单表即可完成整合，则可以将该表包装为记录，采用主动记录的方式进行集成，如果需要多张表进行数据整合则需要采用数据映射的方式完成数据集成与处理。\n7.2 消息传递的角度 # 远程过程调用一般是基于同步的方式，效率较低，而且容易失败;共享数据库和文件传输的集成方式在性能方面较差，系统不能保持即时数据同步，而且容易造成应用与数据紧耦合，消息传递的集成方式能够保证数据的异步、立即、可靠传输\n7.3 组织范围的角度 # 企业信息集成是一个十分复杂的问题，按照组织范围来分，分为企业内部的信息集成和外部的信息集成两个方面。按集成内容，企业内部的信息集成一般可分为以下四个方面:技术平台集成，数据集成，应用系统集成和业务过程集成。其中，应用系统集成是实现不同系统之间的互操作，使得不同应用系统之间能够实现数据和方法的共享，业务过程集成使得在不同应用系统中的流程能够无缝连接，实现流程的协调运作和流程信息的充分共享。\n系统应用集成构建统一标准的基础平台，在各个应用系统的接口之间共享数据和功能，基本原则是保证应用程序的独立性。系统应用集成提供了4个不同层次的服务，最上层服务是流程控制服务。\n企业集成平台是一个支持复杂信息环境下信息系统开发集成、协同运行的软件支撑环境，包括硬件、软件、软件工具和系统。基本功能包括:1.通信服务:提供分布环境下透明的同步/异步通信服务功能;2.信息集成服务:为应用提供透明的信息访问服务，实现异种数据库系统之间数据的交换、互操作、分布数据管理和共享信息模型定义:3.应用集成服务:通过高层应用编程接口来实现对相应应用程序的访问，能够为应用提供数据交换和访问操作，使各种不同的系统能够相互协作;4.二次开发工具:是集成平台提供的一组帮助用户开发特定应用程序的支持工具;5.平台运行管理工具:是企业集成平台的运行管理和控制模块。\n企业信息资源集成的前提是对企业历史上形成的企业信息功能的集成，其核心是对企业内部和外部信息流的集成。\n例题 学霸肯定对了 ↕ 答案：C 学霸肯定对了 ↕ 答案：C D 学霸肯定对了 ↕ 答案：C 课后习题 # todo 习题\n"},{"id":19,"href":"/docs/example/architect-exam/3.10-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/8-%E6%9E%84%E4%BB%B6%E4%B8%8E%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%8A%80%E6%9C%AF/","title":"8) 构建与中间件技术","section":"3.10 软件架构设计","content":" 构件与中间件技术 # 1 构件的定义 ✅✅✅✅ # 软件构件是一种组装单元，它具有规范的接口规约和显式的语境依赖。软件构件可以被独立地部署并由第三方任意地组装。\n构件是某系统中有价值的、几乎独立的并可替换的一个部分，它在良好定义的架构语境内满足某清晰的功能。\n构件是一个独立发布的功能部分，可以通过其接口访问它的服务。我的理解是：构件\u0026gt;模块\u0026gt;对象\n构件的系统架构由一组平台决策、一组构件框架和构件框架之间的互操作设计组成。\n构件框架是一种专用的架构(通常围绕一些关键的机制)，同时，也是一组固定地作用于构件层次机制的策略。\n概念框架的互操作设计包括系统体系结构连接的所有框架间的互操作的规则。\n构件是一组通常需要同时部署的原子构件。构件和原子构件之间的区别在于，大多数原子构件永远都不会被单独部署，尽管它们可以被单独部署。\n一个原子构件是一个模块和一组资源。\n模块是一组类和可能的非面向对象的结构体，比如过程或者函数。\n资源是一个类型化的项的固定集合。\n资源这个概念可以包含代码资源，进而包含模块。问题在除了编译器编译一个模块或包生成的资源外，还可能存在其他的资源。在“纯对象”的方法中，资源是外部化的不可改变的对象一一不可改变是因为构件没有持久化的标志，而目复制不能被区分。\n构件的接口是一种服务提供者对消费者的承诺，即契约(contract)，用契约确保一组构件之间的行为组合。\n2 中间件 ✅✅✅ # 中间件是构件的一种、中间件是一类系统软件。如ESB\n中间件技术的优点：\n中间件通过标准接口实现与应用程序的关联，提供特定功能的服务；使用中间件可以提高应用软件可移植性；使用中间件有助于提高开发效率。\n中间件是独立的系统级软件，连接操作系统层和应用程序层，将不同操作系统提供应用的接口标准化，协议统一化，屏蔽具体操作的细节，中间件一般提供如下功能：\n1、通信支持。中间件为其所支持的应用软件提供平台化的运行环境，该环境屏蔽底层通信之间的接口差异，实现互操作，所以通信支持是中间件一个最基本的功能。\n2、应用支持。中间件的目的就是服务上层应用，提供应用层不同服务之间的互操作机制。\n3、公共服务。公共服务是对应用软件中共性功能或约束的提取。将这些共性的功能或者约束分类实现，并支持复用，作为公共服务，提供给应用程序使用。\n中间件提供平台和应用之间的通用服务，这些服务具有标准的程序接口和协议。中间件的基本功能包括：为客户端和服务器之间提供连接和通信；提供交易管理机制保证交易的一致性；提供应用的负载均衡和高可用性等。\n2.1 消息中间件 ✅✅✅ # 1、消息中间件是消息传输过程中保存消息的一种容器；\n2、消息中间件具有两个基本特点：采用异步处理模式应用程序和应用程序调用关系为松耦合关系；\n3、消息中间件使得不同系统、不同进程之间能够通信，注意不是对象。\n4、消息中间件的消息传递服务模型有点对点模型和发布-订阅模型之分。\n3 构件的复用 ✅✅✅ # 复用的发展史 构建的复用流程 例题 学霸肯定对了 ↕ B\n水平：通用，普遍\n垂直：专用，特定用途\n学霸肯定对了 ↕ C 3.1 软件的复用 ✅✅ # 软件复用过程包含：创建、复用、支持、管理4个过程。整体说来就是：构造/获取可复用的软件资产、管理可复用资产和使用可复用资产。\n1、创建过程：界定和提供可复用资产，以满足复用者的需要；\n2、复用过程：利用可复用资产来生产应用软件产品；\n3、支持过程：全面支持可复用资产的获取、管理和维护工作；\n4、管理过程：执行计划、启动、资源、跟踪并协调其他各个过程；\n在软件架构复用中，计划复用是指在开发之前，就要进行规划，以决定哪些需要复用。资产复用(是指将已有的软件资产(如框架、组件、类库等)运用到新的软件系统中以提高软件开发效率和质量)是指开发过程中，只要发现有可复用的资产，就对其进行复用；系统复用是指将已有的个或多个系统的某一部分或全部内容，用于构建新的系统。\n4 构件标准 ✅✅ # 4.1 COBRA ✅✅ # 例题 学霸肯定对了 ↕ A "},{"id":20,"href":"/docs/example/architect-exam/3.9-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/","title":"3.9 软件工程","section":"3. 高级软考 - 系统架构师","content":" 课程内容提要 # 软件开发方法 ✅✅✅ 软件开发模型 ✅✅✅✅ 需求工程 需求获取 ✅✅✅ 需求分析 ✅✅✅ UML4+1视图 ✅✅✅✅✅ UML图 ✅✅✅✅✅ UML关系 ✅✅✅✅✅ 软件系统建模 系统设计 界面设计 ✅✅ 结构设计 ✅✅ 面向对象设计 ✅✅✅✅✅ 系统测试与调试 软件测试方法 软件调试 系统运行与软件维护 系统转换计划 软件维护 "},{"id":21,"href":"/docs/example/architect-exam/3.10-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/9-web%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/","title":"9) web架构设计","section":"3.10 软件架构设计","content":" 1 web架构设计 ✅✅✅✅ # 主要围绕高性能、高可用、可维护等性能展开。\n1.1 单机到分层架构 ✅✅✅✅ # 1.2 应用服务器集群 ✅✅ # 此时需要做负载均衡和Session一致性问题。\n1.3 负载均衡 ✅✅✅✅ # 随着业务的增长，信息系统的访问量和数据流量快速增加，采用负载均衡(Load Balance)方法可避免由此导致的系统性能下降甚至崩溃。\n1、负载均衡通常由服务器端安装的附加软件来实现；\n2、负载均衡可在不同地理位置、不同网络结构的服务器群之间进行；\n3、负载均衡可使用户只通过一个IP地址或域名就能访问相应的服务器；\n4、负载均衡能增加系统的吞吐量。\n在OSI七层模型中，有两个层次可以用作做负载均衡，分别是：应用层、传输层。一般来说传输层的负载均衡效率更高。\nHTTP重定向：类似于在浏览器中打开某个网页的时候，发生跳转，跳转到另一台应用服务器上进行处理。\nVPN是正向代理的代表，它是从客户端-\u0026gt;服务器。反向代理服务器：从服务器-\u0026gt;客户端，请求来了首先访问代理服务器，将请求分发给具体的应用服务器，由应用服务器来处理并相应。\nDNS域名解析负载均衡：将一个域名绑定成多个IP，每次轮询到不同的IP即可实现分流；\n将一个外部IP绑定为内部的多个IP，在网关的位置，通过硬件来动态地转换为内部可用IP，一般4层就采用了这个技术。\n负载均衡算法 1.4 有状态和无状态问题 ✅✅✅ # 购物车就是有状态的。\nSession一致性是为了解决有状态请求 (1) 有状态 (2)无状态 (3)无状态 (4)有状态 (5)无状态\n1.5 持久化技术ORM ✅✅✅ # 1.6 数据库读写分离 ✅✅✅ # 1.7 缓存技术 ✅✅✅✅ # 由于redis比较重要，下面小结接着讲。\n1.8 redis ✅✅✅✅ # redis 集群切片场景方式 redis 分布式存储方案 redis 数据类型 redis 数据淘汰机制 redis 持久化技术 redis 存在的问题 1.9 CND 内容分发网络 ✅✅✅ # 镜像站，就近访问原则，为了提高网络访问，如京东物流。\n1.10 XML与Json ✅✅ # 1.11 web应用服务器 ✅✅✅ # 1.12 REST ✅✅ # 1.13 响应式web设计 ✅✅ # 1.14 中台 ✅✅ # 中台是一套结合互联网技术和行业特性，将企业核心能力以共享服务形式沉淀，形成“大中台、小前台”的组织和业务机制，供企业快速低成本的进行业务创新的企业架构。中台又可以进一步细分，比如业务中台，数据中台，XX中台。本质上，都是对企业通用能力在不同层面的沉淀，并对外能力开放。中台的践行者：Supercell: 芬兰移动游戏巨头，2015年世界游戏前10占5席，员工仅200多人，因使用中台具有小团队快速开发能力，后被腾讯86亿美金收购；阿里:2015年参观Supercell，而后推行中台。\n1.15 web系统分层 ✅✅ # "},{"id":22,"href":"/docs/example/architect-exam/3.10-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/","title":"3.10 软件架构设计","section":"3. 高级软考 - 系统架构师","content":" 目录 # 1. 软件架构的概述 ✅✅✅ # 2. 软件架构风格 ✅✅✅✅✅ # 3. 特定领域软件架构 ✅✅✅ # 4. 基于架构的软件开发 ✅✅✅✅ # 5. 软件质量属性 ✅✅✅✅✅ # 6. 软件架构评估 ✅✅✅✅✅ # 7. 软件产品线 ✅✅✅ # 8. 构建与中间件技术 ✅✅✅✅ # 9. web架构设计 ✅✅✅✅ # "},{"id":23,"href":"/docs/example/architect-exam/3.11-%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E6%80%A7%E5%92%8C%E5%8F%AF%E9%9D%A0%E6%80%A7/","title":"3.11 系统安全性和可靠性","section":"3. 高级软考 - 系统架构师","content":" 课程内容提要 # 安全基础技术 对称加密 ✅✅✅ 非对称加密✅✅✅ 信息摘要 ✅✅✅ 数字签名 ✅✅✅ 数字证书 网络安全 网络各层次的安全保障 ✅✅✅ 网络攻击 ✅✅ 等级保护标准 ✅✅ 安全防范体系的层次 信息安全体系结构 无线加密技术 可靠性相关基本概念 ✅✅ 系统可靠性分析 ✅✅✅✅ 软件可靠性设计 ✅✅✅✅ 1 安全基础基础 # 安全性(security)是指系统在向合法用户提供服务的同时能够阻止非授权用户使用的企图或拒绝服务的能力。安全性是根据系统可能受到的安全威胁的类型来分类的。安全性又可划分为机密性、完整性、不可否认性及可控性等特性。其中，机密性保证信息不泄露给未授权的用户、实体或过程，完整性保证信息的完整和准确，防止信息被非法修改;不可否认性是指防止发送方否认发送过信息，可控性保证对信息的传播及内容具有控制的能力，防止为非法者所用。\n一个完整的信息安全系统至少包含三类措施:技术方面的安全措施，管理方面的安全措施和相应的政策法律。信息安全的技术措施主要有:信息加密、数字签名、数据完整性保护、身份鉴别、访问控制、数据备份和灾难恢复、网络控制技术、反病毒技术、安全审计、业务填充、路由控制机制、公证机制等。\n1.1 对称加密 # 一般用对称加密原文，已到达高速、节省空间的目的。\n对称加密：公钥和秘钥一样，或者说公钥可以推导出秘钥。常见的对称加密算法有：DES、AES、RC-5、IDEA 1.2 非对称加密 # 非对称加密：公钥和秘钥不一样，或者说公钥不能推导出秘钥。加密强度高但加密效率低，一般用非对称加密保证数据的安全性，秘钥分发相对简单。常见的非对称加密算法有：RSA。 非对称加密：加密解密规则，用接收方的公钥加密。pa加密sa可解密，sa加密pa可解密。\n1.3 信息摘要 # 相当于做md5，原文发生一小点变化，那摘要信息将完全不一样(雪崩效应)，下载安装包的时候，也会有个校验md5，就是指的这个。\n1.4 数字签名 # 数字签名是采用非对称加密技术，具体用发送方A的私钥Sa加密信息后，接收方如果用发送方的公钥Pa能解密，那么这个信息就一定是A发送的。\n例题 学霸肯定对了 ↕ 对称加密压缩信息，非对称加密传递对称秘钥，数字签名发送者不可抵赖，信息摘要防止信息被篡改。 学霸肯定对了 ↕ A 学霸肯定对了 ↕ C B 1.5 数字证书CA # 每个数字证书上都会有其CA机构颁发的签名，我们可以通过验证CA机构对数字证书的签名来核实数字证书的有效性。如果证书有效，说明此网站经过CA机构中心的认证，是可信的网站，所以这个动作是用来验证网站真伪的，而不能验证客户方的真伪。\n负责生成和签署数字证书的是证书机构CA、负责验证用户身份的是注册机构RA。\nPKI公钥体系 2 网络安全 # 信息系统面临多种类型的网络安全威胁。其中，信息泄露是指信息被泄露或透露给某个非授权的实体;破坏数据完整性是指数据被非授权地进行修改;拒绝服务是指对信息或其他资源的合法访问被无条件地阻止；业务流分析是指通过对系统进行长期监听，利用统计分析方法对诸如通信频度、通信的信息流向、通信总量的变化等参数进行研究，从而发现有价值的信息和规律。\n网络安全漏洞通常是指网络节点的系统软件或应用软件在逻辑上的缺陷。\nSYN Flooding攻击的原理是：利用TCP三次握手，恶意造成大量TCP半连接，耗尽服务器资源，导致系统拒绝服务。\n2.1 网络各层次的安全保障 # 需要知道各个层用什么协议来保障安全。\nPGP (Pretty Good Privacy):优良保密协议。\nSSL (Secure Sockets Layer):安全套接字协议。\nTLS (Transport Layer Security):传输层安全协议。\nSET(Secure Electronic Transaction):安全电子交易协议。\nIPSEC(Internet Protocol Security):互联网安全协议。\n例题 学霸肯定对了 ↕ D 学霸肯定对了 ↕ C 2.2 网络攻击 # 例题 学霸肯定对了 ↕ A 2.3 等级保护标准 # 等级最低：用户自主。等级最高：访问验证。\n银行：安全标记。广播电台：结构化保护\n2.4 安全防范体系的层次 # 例题 学霸肯定对了 ↕ C D 2.5 信息安全体系结构 # 自主访问控制：主体是用户，给用户赋予用些权限。访问控制列表：主体是资源，给资源的权限赋予给用户。强制访问控制：资源和用户都分级，高级的用户可以访问低级的资源。\n案例分析例题 学霸肯定对了 ↕ 2.6 无线加密技术 # 目前，无线网络中已存在好几种加密技术，由于安全性能的不同，无线设备的不同技术支持，支持的加密技术也不同，一般常见的有:WEP、WPA/WPA2、WPA-PSKWPA2-PSK。\n1、WEP安全加密方式：WEP(有线等效保密)，一种数据加密算法，用于提供等同于有线局域网的保护能力。它的安全技术源自于名为RC4的RSA数据加密技术，是无线局域网WLAN的必要的安全防护层。目前常见的是64位WEP加密和128位WEP加密，WEP基本已被弃用。\n2、WPA安全加密方式：WEP之后,人们将期望转向了其升级后的WPA，与之前WEF的静态密钥不同，WPA需要不断的转换密钥。WPA采用有效的密钥分发机制，可以跨越不同厂商的无线网卡实现应用，其作为WEP的升级版，在安全的防护上比WEP更为周密，主要体现在身份认证、加密机制和数据包检查等方面，而且它还提升了无线网络的管理能力。\n3、WPA2：WPA2是IEEE 802.11i标准的认证形式,WPA2实现了802.111的强制性元素，特别是Michael算法被公认彻底安全的CCMP(计数器模式密码块链消息完整码协议)讯息认证码所取代、而RC4加密算法也被AES所取代。简言之，WPA2是WPA的增强版，安全性更高。\n3 可靠性相关基本概念 # 可靠性(Reliability)是指产品在规定的条件下和规定的时间内完成规定功能的能力。常用的度量指标主要有故障率(或失效率)、平均失效等待时间、平均失效间隔时间和可靠度等。可靠度就是软件系统在规定的条件下、规定的时间内不发生失效的概率。\n4 系统可靠性分析 # 4.1 可靠性指标 # MTTF：平均失效等待时间，也叫平均无故障时间。\nMTBF：平均失效间隔时间，也叫平均故障间隔时间。\n4.2 串并联系统可靠性计算 # 5 软件可靠性设计 # 5.1 影响软件可靠性的因素 # 分为5个方面。\n5.2 高可靠软件设计采用的设计方案 # N版本程序设计 恢复块设计(动态冗余) 防卫式程序设计 对于程序中存在的错误和不一致性，通过在程序中包含错误检查代码和错误恢复代码，使得一旦错误发生，程序能撤销错误状态，恢复到一个已知的正确状态中去。\n实现策略:错误检测、破坏估计、错误恢复。\n双机容错 案例分析例题 学霸肯定对了 ↕ 课后习题 # todo 习题\n"},{"id":24,"href":"/docs/example/architect-exam/3.12-%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/","title":"3.12 项目管理","section":"3. 高级软考 - 系统架构师","content":" 课程内容提要 # 立项管理 ✅ 范围管理 ✅✅ 时间管理 ✅✅✅✅ 成本管理 ✅ 软件质量管理 ✅✅ 软件配置管理 ✅✅ 1 立项管理 # 1.1 盈亏平衡分析 # 2 范围管理 # 范围定义的输入包括：项目章程、项目范围管理计划、组织过程资产、批准的变更申请。\n例题 学霸肯定对了 ↕ C 3 时间管理 # 项目时间管理中的过程包括活动定义、活动排序、活动的资源估算、活动历时估算、制定进度计划以及进度控制。\n例题 学霸肯定对了 ↕ B 3.1 单代号网络图 # 关键路径是最早完成时间下的最长的路径。关键路径可以有多条，关键路径的条数越少越好。\nES和EF是正向推导过程。关键路径需要反推才能得到。总时差=LS-ES，总时差为0的节点连接起来就是关键路径。\n自由时差小于等于总时差。当前节点的自由时差=紧后活动的ES-当前活动的EF。自由时差会影响紧后活动（压缩了别人的自由）\n3.2 双代号网络图 # 虚线不能去掉，2-\u0026gt;3的距离为0，但不能删掉，因为A和B都是E的紧前活动，也不能合并。\n3.3 甘特图 # 细线表示计划，粗线表示当前进度。\n例题 学霸肯定对了 ↕ C\n也就是求D的总时差\n学霸肯定对了 ↕ A A\n正常进度=直接费用+间接费用=55+12*5=115天，赶工进度：压缩D两天，压缩A两天，B和D同时压1天，也就是：55+4+8+4+35=106，需要7天。\n4 成本管理 # 项目的成本管理中，成本预算将总的成本估算分配到各项活动和工作包上，来建立一个成本的基线。\n4.1 挣值分析 # 例题 学霸肯定对了 ↕ C 案例分析例题 学霸肯定对了 ↕ 说明：活动E不是关键路径上的活动，不应该加班。\n学霸肯定对了 ↕ 松弛时间：总时差，关键路径上的总时差为0，反之亦然。\n5 软件质量管理 # 5.1 质量保证方式CMMI # 软件过程改进：CMMI\n6 软件配置管理 # 配置项的状态通常包括：草稿、正在修改、正式发布。\n配置项主要有以下两大类：\n1、属于产品组成部分的工作成果，各种版本的文档、计算机程序、部件及数据的集合。\n2、属于项目管理和机构支撑过程城产生的文档，如工作计划、项目质量报、项目跟踪报告等。这些文档虽然不是产品的组成部分，但是值得保存。\n软件文档是影响软件可维护性的决定因素。根据文档内容，软件文档又可分为用户文档和系统文档两类。其中用户文档主要描述系统功能和使用方法，并不关心这些功能是怎样实现的，它包括：功能描述文档，安装文档，使用手册，参考手册，操作指南文档。\n6.1 软件工具 # 按描述需求定义的方法可将需求分析工具分为基于自然语言或图形描述的工具和基于形式化需求定义语言的工具。\n项目管理工具用来辅助软件项目管理活动(其中，“指导软件设计人员按软件生存周期各个阶段的适用技术进行设计工作“不是它的活动)。通常项目管理活动包括项目的计划、调度、通信、成本估算、资源分配及质量控制等。\n软件系统工具的种类繁多，通常可以按照软件过程活动将软件工具分为软件开发工具、软件维护工具、软件管理和软件支持工具。\n软件开发工具是指用干辅助软件开发过程活动的各种软件。其中，软件建模工具是辅助建立软件系统的抽象模型的。常见的软件建模工具包括Rational Rose、Together、WinA\u0026amp;D、OuickUML、EclipseUML等。\n版本控制工具属于软件维护工具，软件评价工具属于软件管理与软件支持工具。\n软件测试工具根据工作原理不同可分为静态测试工具和动态测试工具。其中静态测试工具是对代码进行语法扫描，找到不符合编码规范的地方，根据某种质量模型评价代码的质量，生成系统的调用关系图等。它直接对代码进行分析，不需要运行代码，也不需要对代码编译链接和生成可执行文件，静态测试工具可用于对软件需求、结构设计、详细设计和代码进行评审、走审和审查，也可用于对软件的复杂度分析、数据流分析、控制流分析和接口分析提供支持，动态测试工具与静态测试工具不同，它需要运行被测试系统，并设置探针，向代码生成的可执行文件中插入检测代码，可用于软件的覆盖分析和性能分析，也可用于软件的模拟、建模、仿真测试和变异测试等。\n源代码控制系统 (SCCS)是UNIX系统上的开发项目中使用的源代码和文档文件所做的更改控制的工具。\n例题 学霸肯定对了 ↕ C 课后习题 # todo 习题\n"},{"id":25,"href":"/docs/example/architect-exam/3.13-%E4%B8%93%E4%B8%9A%E8%8B%B1%E8%AF%AD/","title":"3.13 专业英语","section":"3. 高级软考 - 系统架构师","content":" 课程内容提要 # 历年真题 1 2009年 # 原文 An architectural style defines as a family of such systems in terms of a ( 1 ) of structural organization. More specifically, an architectural style defines a vocabulary of ( 2 ) and connector types， and a set of ( 3 ) on how they can be combined. For many styles there may also exist one or more ( 4 ) that specify how to determine a system’s overall properties from the properties of its parts.Many of architectural styles have been developed over the years. The best-known examples of ( 5 ) architectures are programs written in the Unix shell.\n(1) A.pattern B.data flow C.business process D.position level\n(2) A.metadata B.components C.models D.entities\n(3) A.functions B.code segments C.interfaces D.constraints\n(4) A.semantic models B.weak entities C.data schemas D.business models\n(5) A.event-based B.object-oriented C.pipe-and-filter D.Layered\n学霸肯定对了 ↕ A B D\n架构风格以一种结构化组织模式定义一组这样的系统。具体来说，一种架构风格定义了一个构件及连接器类型的词汇表，以及一组关于它们如何能够被关联的约束对于许多风格来说，可能也存在一个或多个语义模型，从系统部件的特性来确定系统的整体特性。许多架构风格已经发展了很多年，众所周知的管道-过滤器架构的例子就是用 UNIX shell 编写的程序。\npattern:模式\nmetadata:元数据\nsegments:部分\nconstraints:约束\nsemantic:语义\nschemas:模式，图式，计划\nlayered:分层的\nin terms of:在\u0026hellip;方面，按照\n2 2010年 # 原文 The software architecture is a set of software components, subsystems, relationships， interactions, the properties of each of these elements， and the set of guiding principles that together constitute the fundamental properties and constraints of a software system or set of systems. ( 1 ) defines a general set of element types and their interactions. The examples include Pipes and Filters, Model-View-Controller, and Reflection. A ( 2 ) in software architecture is a representation used to understand or document one or more aspects of a problem or solution. Architecture is usually used in conjunction with many adjunct terms. The ( 3 ) defines the key strategies, organization, goals and related processes of the enterprise. At the enterprise level, the ( 4 ) may be more of a set of guidelines on how the various software architectures should be constructed consistently across the enterprise. The ( 5 ), which describes the high-level set of elements involved in application from a particular domain along with their Interactions, is often used to focus on subsystem definition rather than application process level definition.\n(1) A.Architectural pattern B.Architectural description C.Architectural view D.Architectural viewpoint\n(2) A.model B.domain C.component D.subsystem\n(3) A.enterprise architecture B.technical architecture C.infrastructure architecture D.business architecture\n(4) A.enterprise architecture B.data architecture C.application architecture D.information architecture\n(5) A.product-line architecture B.reference architecture C.technology architecture D.infrastructure architecture\n学霸肯定对了 ↕ A、A、D、C、B\n软件架构是一组软件构件、子系统、关联关系、交互关系以及其中每个元素的特性和一 组指导原则，这些共同构成一个软件系统或一组系统的基本特性和约束。架构模式定义了一 组通用的元素类型及其交互关系。其中的例子包括 Pipes and Filters、MVC 和 Reflection。软 件架构中的模型是一种表现形式，用于从一个或多个方面理解或记录一个问题或解决方案。 架构通常会与一些附属词结合起来使用。业务架构定义了企业的关键策略、组织、目标和相 关过程。在企业层面，应用架构可能更多的是一组关于应该如何在整个企业一致地构建各种 软件架构的指导原则。参考架构描述了源自特定领域的应用涉及的高层元素集合及其交互关 系，通常用于关注子系统的定义而不是应用过程级别定义。\nInfrastructure:基础设施\n3 2011年 # 原文 Information systems design is defined as those tasks that focus on the specification of a detailed computer-based solution. Typically, there are four systems design tasks for in-house development.\n1) The first task is to specify ( 1 ), which defines the technologies to be used by one, more, or all information systems in terms of their data, processes, interfaces, and network components. This task is accomplished by analyzing the data models and process models that are initially created during requirements analys16.\n2) The next systems design task is to develop the ( 2 ). The purpose of this task is to prepare technical design specifications for a database that will be adaptable to future requirements and expansion.\n3) Once the database prototype has been built, the systems designer can work closely with system users to develop input, output and dialogue specifications. The ( 3 ) must be specified to ensure that the outputs are not lost, misrouted, misused, or incomplete.\n4) The fourth design task involves packaging all the specifications from the previous design tasks into a set of specifications that will guide the ( 4 ) activities during the following phases of the systems development methodology. Finally, we should( 5 ) and update the project plan accordingly. The key deliverable should include a detailed plan for the construction phase that should follow.\n(1) A. an application architecture B. a distributed system C. a system scope D. a system physical model\n(2) A. database design specifications B. database organization decisions C. data structure specifications D. data distribution decisions\n(3) A. format and layout B. transaction details C. additional instructions D. internal controls\n(4) A. system administrator’s B. system analyst’s C. computer programmer’s D. system designer’s\n(5) A. adjust the project schedule B. reevaluate project feasibility C. evaluate vendor proposals D. select the best vendor proposal\n学霸肯定对了 ↕ A、A、D、C、B\n信息系统设计被定义为一些任务，它们主要关注一个详细的计算机解决方案的规格说 明。通常来说，内部开发有四种系统设计任务。\n(1)第一项任务是确定一个应用程序架构，它以数据、过程、接口和网络组件的方式 定义一个、多个或所有信息系统要使用的技术。完成这项任务需要分析最初创建于需求分析 期间的数据模型和过程模型。\n(2)下一项系统设计任务是开发数据库设计的规格说明。该任务的目的是准备一个数 据库技术设计规格说明，以适应将来的需求和扩展。\n(3)一旦建成了数据库原型，系统设计入员能够和系统用户密切合作开发输入、输出 和对话框规格说明。必须指定内部控件来确保输出不会丢失、误传、滥用或不完整。\n(4)第四项设计任务包括把之前所有设计任务的规格说明打包为一套规格说明，将在 系统开发方法的后续阶段中指导计算机程序员的活动。 最后，我们应该重新评估项目的可行性并相应地更新项目计划。主要交付成果将包括构 建阶段应该遵循的一个详细计划。\nSpecifications(规格)\ninternal(内部的)\n4 2012年 # 原文 An application architecture specifies the technologies to be used to implement one or more information systems. It serves as an outline for detailed design, construction, and implementation. Given the models and details, include( 1 ), we can distribute data and processes to create a general design of application architecture. The design will normally be constrained by architecture standards, project objectives, and ( 2 ). The first physical DFD to be drawn is the( 3 ). The next step is to distribute data stores to different processors. Data( 4 ) are two types of distributed data which most RDBMSs support. There are many distribution options used in data distribution. In the case of ( 5 ) we should record each table as a data store on the physical DFD and connect each to the appropriate server.\n(1) A.logical DFDs and ERD B.ideal object model and analysis class model C.use case models and interface prototypes D.physical DFDs and database schema\n(2) A.the database management system B.the feasibility of techniques used C.the network topology and technology D.the user interface and process methods\n(3) A.context DFD B.system DFD C.network architecture DFD D.event-response DFD\n(4) A.vertical partitioning and horizontal replication B.vertical replication and horizontal partitioning C.integration and distribution D.partitioning and replication\n(5) A.storing all data on a single server B.storing specific tables on different servers C.storing subsets of specific tables on different servers D.duplicating specific tables or subsets on different servers\n学霸肯定对了 ↕ A、B、C、B、D\n应用架构说明了实现一个或多个信息系统所使用的技术，它作为详细设计、构造和实现 的一个大纲。给定了包括逻辑数据流图和实体联系图在内的模型和详细资料，我们可以分配 数据和过程以创建应用架构的一个概要设计。概要设计通常会受到架构标准、项目目标和所 使用技术的可行性的制约。需要绘制的第一个物理数据流图是网络架构数据流图。接下来是 分配数据存储到不同的处理器。数据分区和复制是大多数关系型数据库支持的两种分布式数 据形式。有许多分配方法用于数据分布。在不同服务器上存储特定表的情况下，我们应该将 每个表记为物理数据流图中的一个数据存储，并将其连接到相应的服务器\n5 2013年 # 原文 A system\u0026rsquo;s architecture is a representation of a system in which there is a mapping of( 1 ) onto hardware and software components, a mapping of the ( 2 ) onto the hardware architecture. and a concern for the human interaction with these components. That is, system architecture is concerned with a total system, including hardware. software, and humans. Software architectural structures can be divided into three major categories, depending on the broad nature of the elements they show.\nI):( 3 ) embody decisions as a set of code or data units that have to be constructed or procured.\nII): ( 4 ) embody decisions as to how the system is to be structured as set of elements that have runtime behavior and interactions.\nIII): ( 5 ) embody decisions as to how the system will relate to nonsoftware structures in its environment(such as CPUs, file systems, networks, development teams, etc.).\n(1) A.attributes B.constraint C.functionality D.requirements\n(2) A.physical components B.network architecture C.software architecture D.interface architecture\n(3) A.Service structures B.Module structures C.Deployment structures D.Work assignment structures\n(4) A.Decompostion structures B.Layer structures C.Implementation structures D.Component-and-connector structures\n(5) A.Allocation structures B.Class structures C.Concurrency structures D.Uses structures\n学霸肯定对了 ↕ C、C、B、D、A\n系统架构是一个系统的一种表示，包含了功能到软硬件构件的映射、软件架构到硬件架构的映射以及对于这些组件人机交互的关注。也就是说，系统架构关注于整个系统，包括硬 件、软件和使用者。软件架构结构根据其所展示元素的广义性质，可以被分为三个主要类别。\n1)模块结构将决策体现为一组需要被构建或采购的代码或数据单元。\n2)构件连接器结构将决策体现为系统如何被结构化为一组具有运行时行为和交互的元 素。\n3)分配结构将决策体现为系统如何在其环境中关联到非软件结构，如 CPU、文件系 统、网络、开发团队等。\nConstraint:约束\nStructure:架构\nConcurrency:并发。\n6 2014年 # 原文 Software architecture reconstruction is an interpretive, jnteractive, and iterative process including many activities. ( 1 ) involves analyzing a system\u0026rsquo;s existing design and implementation artifacts to construct a model of it. The result is used in the following activities to construct(结构) a view of the system. The database construction activity converts the ( 2 ) contained in the view into a standard format for storage in a database. The ( 3 ) activity involves defining and manipulating( 控 制 ) the information stored( 存 储 的 ) in database to reconcile, augment(增强), and establish(建立) connections between the elements. Reconstruction consists of two primary activities: ( 4 ) and ( 5 ). The former provides a mechanism for the user to manipulate architectural elements, and the latter provides facilities for architecture reconstruction.\n(1) A.Reverse engineering B.Information extraction C.Requirements analysis D.Source code analysis\n(2) A.actors and use cases B.processes and data C.elements and relations D.schemas and tables\n(3) A.database normalization B.schema definition C.database optimization D.view fusion\n(4) A.architecture analysis and design B.domain analysis and static modeling C.visualization and interaction D.user requirements modeling\n(5) A.pattern definition and recognition B.architecture design and implementation C.system architecture modeling D.dynamic modeling and reconstruction\n学霸肯定对了 ↕ B、C、D、C、A\n软件架构重用是一个解释性、交互式和反复迭代的过程，包括了多项活动。信息提取通 过分析系统现有设计和实现工件来构造它的模型。其结果用于在后续活动中构造系统的视 图。数据库构建活动把模型中包含的元素和关系转换为数据库中的标准存储格式。视图融合 活动包括定义和操作数据库中存储的信息，理顺、加强并建立起元素之间的连接。重构由两 个主要活动组成;可视化和交互及模式定义和识别。前者提供了一种让用户操作架构元素的 机制，后者则提供了用于架构重构的设施。\n7 2015年 # 原文 The objective of ( 1 ) is to determine what parts of the application software will be assigned to what hardware.The major software components of the system being developed have to be identified and then allocated to the various hardware components on which the system will operate. All software systems can be divided into four basic functions. The first is( 2 ). Most information systems require data to be stored and retrieved,whether a small file,such as a memo produced by a word processor,or a large database,such as one that stores an organization’s accounting records. The second function is the ( 3 ),the processing required to access data,which often means database queries in Structured Query Language. The third function is the ( 4 ),which is the logic documented in the DFDs,use cases,and functional requirements.The fourth function is the presentation logic,the display of information to the user and the acceptance of the user’s commands.The three primary hardware components of a system are ( 5 ). (1) A.architecture design B.modular design C.physical design D.distribution design\n(2) A.data access components B.database management system C.data storage D.data entities\n(3) A.data persistence B.data access objects C.database connection D.dataaccess logic\n(4) A.system requirements B.system architecture C.application logic D.application program\n(5) A.computers,cables and network B.clients,servers,and network C.CPUs,memories and I/O devices D.CPUs,hard disks and I/O devices\n学霸肯定对了 ↕ A、C、D、C、B\n架构设计的目标是确定应用软件的哪些部分将分配到何种硬件。识别出正在开发系统的主要软件构件并分配到系统将要运行的硬件构件。所有软件系统可分为四项基本功能。第一 项是数据存储。大多数信息系统需要数据进行存储并检索，不论是一个小文件，比如一个字 处理器产生的一个备忘录，还是一个大型数据库，比如存储一个企业会计记录的数据库。第 二项功能是数据访问逻辑，处理过程需要访问数据，这通常是指用 SQL 进行数据库查询。 第三项功能是应用程序逻辑，这些逻辑通过数据流图，用例和功能需求来记录。第四项功能 是表示逻辑，给用户显示信息并接收用户命令。一个系统的三类主要硬件构件是客户机、服务器和网络。\n8 2016年 # 原文 The objective of ( 1 ) is to determine what parts of the application software will be assigned to what hardware. The major software components of the system being developed have to be identified and then allocated to the various hardware components on which the system will operate. All software systems can be divided into four basic functions. The first is ( 2 ). Most information systems require data to be stored and retrieved, whether a small file,such as a memo produced by a word processor, or a large database, such as one that stores an organization’s accounting records.The second function is the ( 3 ), the processing required to access data, which often means database queries in Structured Query Language. The third function is the ( 4 ),which is the logic documented in the DFDs, use cases,and functional requirements.The fourth function is the presentation logic,the display of information to the user and the acceptance of the user’s commands.The three primary hardware components of a system are ( 5 ).\n(1) A.architecture design B.modular design C.physical design D.distribution design\n(2) A.data access components B.database management system C.data storage D.data entities\n(3) A.data persistence B.data access objects C.database connection D.data access logic\n(4) A.system requirements B.system architecture C.application logic D.application program\n(5) A.computers,cables and network B.clients,servers,and network C.CPUs,memories and I/O devices D.CPUs,hard disks and I/O devices\n学霸肯定对了 ↕ A、C、D、C、B\n架构设计的目标是确定应用软件的哪些部分将分配到何种硬件。识别出正在开发系统的主要软件构件并分配到系统将要运行的硬件构件。所有软件系统可分为四项基本功 能。第一项是数据存储。大多数信息系统需要数据进行存储并检索，不论是一个小文件，比 如一个字处理器产生的一个备忘录，还是一个大型数据库，比如存储一个企业会计记录的数 据库。第二项功能是数据访问逻辑，处理过程需要访问数据，这通常是指用 SQL 进行数据 库查询。第三项功能是应用程序逻辑，这些逻辑通过数据流图，用例和功能需求来记录。第 四项功能是表示逻辑，给用户显示信息并接收用户命令。一个系统的三类主要硬件构件是客 户机、服务器和网络。\n9 2017年 # 原文 The architecture design specifies the overall architecture and the placement of software and hardware that will be used. Architecture design is a very complex process that is often left to experienced architecture designers and consultants. The first step is to refine the ( 1 ) into more detailed requirements that are then employed to help select the architecture to be used and the software components to be placed on each device. In a ( 2 ), one also has to decide whether to use a two-tier,three-tier,or n-tier architecture. Then the requirements and the architecture design are used to develop the hardware and software specification. There are four primary types of nonfunctional requirements that can be important in designing the architecture. ( 3 ) specify the operating environment(s) in which the system must perform and how those may change over time. ( 4 ) focus on the nonfunctional requirements issues such as response time, capacity, and reliability. ( 5 ) are the abilities to protect the information system from disruption and data loss, whether caused by an intentional act. Cultural and political requirements are specific to the countries in which the system will be used.\n(1) A. functional requirements B. nonfunctional requirements C. system constraint D. system operational environment\n(2) A. client-based architecture B. server-based architecture C. network architecture D. client-server architecture\n(3) A. Operational requirements B. Speed requirement C. Access control requirements D. Customization requirements\n(4) A. Environment requirements B. Maintainability requirements C. Performance requirements D. Virus control requirements\n(5) A. Safety requirements B. Security requirements C. Data management requirements D. System requirements\n学霸肯定对了 ↕ B、D、A、C、B\n架构设计指定了将要使用的软件和硬件的总体架构和布局。架构设计是一个非常复杂的过程，往往留给经验丰富的架构设计师和顾问。第一步是将(71)细化为更详细的要求，然 后用于帮助选择要使用的体系结构以及要放置在每个设备上的软件组件。在(72)中，还必须决定是使用两层，三层还是 n 层架构。 然后使用需求和体系结构 设计来开发硬件和软件规范。有四种主要的非功能需求类型可能在设计架构时非常重要。 (73)指定系统必须执行的操作环境以及这些操作环境如何随时间变化。(74)侧重于非功 能性需求问题，如响应时间，容量和可靠性。(75)是否有能力保护信息系统免受故意行为 造成的破坏和数据丢失。文化和政治要求是特定于系统将被使用的国家。\nfunctional requirements(功能需求)\nnonfunctional requirements (非功能需求)\nsystem constraint (系统约束)\nsystem operational environment (系统操作环境)\nclient-based architecture (基于客户端的架构)\nserver-based architecture(基于服务器的架构)\nnetwork architecture (网络架构)\nclient-server architecture (客户端-服务器架构)\noperational requirements (操作要求)\nspeed requirements (速度要求)\nAccess control requirements (访问控制要求)\ncustomization requirements (用户要求)\nenvironment requirements (环境要求)\nMaintainability requirements (可维护性要求)\nperformance requirements (性能要求)\nvirus control requirements(病毒控制要求)\nsafety requirements (安全要求)\nsecurity requirements(安全要求)\nData management requirements (数据管理要求)\nsystem requirements(系统要求)\n10 2018年 # 原文 Designing the data storage architecture is an important activity in system design. There are two main types of data storage formats: files and databases. Files are electronic of data that have been optimized to perform a particular transaction. There are several types of files that differ in the way they are used to support an application.(71)store core information that is important to the business and , more specifically , to the application , such as order information or customer mailing information . (72)contain static values , such as a list of valid codes or the names of cities . Typically, the list is used for validation. A database is a collection of groupings of information that are related to each other in some way. There are many different types of databases that exist on the market today.(73)is given to those databases which are based on older , sometimes outdated technology that is seldom used to develop new applications . (74)are collections of records that are related to each other through pointers In relational database , (75)can be used in ensuring that values linking the tables together through the primary and foreign keys are valid and correctly synchronized.\n(71) A.Master files B.Look-up files. C.Transaction files D.History files\n(72) A.Master files B.Look-up files C.Audit files D.History files\n(73) A.Legacy database B.Backup database C. Multidimensional database D. Workgroup database\n(74) A.Hierarchical database B. Workgroup database C. Linked table database D. Network database\n(75) A.identifying relationships B. normalization C.referential integrity D.store procedure\n学霸肯定对了 ↕ A C A A C 11 2019年 # 原文 During the systems analysis phase , you must decide how data will be organized, stored.and manage D. A( 1 )is a framework for organizing, storing, and managing datEach file or table contains data about people, places, things, or events. One of the potentiaproblems existing in a file processing environment is ( 2 ), which means that data common totwo or more information systems is stored in several places.In a DBMS, the linked tables form a unified data structure that greatly improves dataquality and access. A(n) ( 3 ) is a model that shows the logical relationships and interactionamong system entities . It provides an overall view of the system and a blueprint for creatingthe physical data structures. ( 4 ) is the process of creating table designs by assigning specificfields or attributes to each table in the database. A table design specifies the fields andidentifies the primary key in a particular table or file. The three normal forms constitute aprogression in which( 5 )represents the best design. Most business-related databases must bedesigned in that form\n(1) A. data entity B. data structure C.file collection D. data definition\n(2) A. data integrity B. the rigid data structure C.data redundancy D.the many-to-many relationship\n(3) A. entity-relationship diagram B. data dictionary C. database schema D. physical database model\n(4) A. Normalization B. Replication C. Partitioning D. Optimization\n(5) A. standard notation form B. first normal form C. second normal form D. third normal form\n学霸肯定对了 ↕ B、C、A、A、D\n在系统分析阶段，需要确定数据如何组织、存储和管理。数据结构是用于组织、存储和管理数据的一个框架。每个文件或表中包含了关于人物、地点、事物和事件的数据。文件处理场景中存在的潜在问题之一是数据冗余，意味着两个或多个信息系统中相同的数据存储在 多个不同位置。在关系数据库管理系统 (DBMS) 中，相互链接的表格形成了一个统一的数据结构，可以大大提升数据质量和访问。实体联系图是一个模型，显示了系统实体之间的逻辑关系和交互。它提供了一个系统的全局视图和用于创建物理数据结构的蓝图。规范化是通过为数据库中的每个表分配特定的字段或属性来创建表设计的过程。表设计是在特定表或文件中确定字段并标识主关键字。三种范式构成了一个序列，其中第三范式代表了最好的设计，大部分与业务相关的数据库必须设计成这种形式。\n12 2020年 # 原文 The purpose of systems design is to specify a(n) ( 1 ), which defines the technologies to be usedto build the proposed information systems. This task is accomplished by analyzing the datamodels and process models that were initially created during ( 2 ) . The ( 3 ) is used to establishphysical processes and data stores across a network. To complete this activity, the analyst mayinvolve a number of system designers and ( 4 ) , which may be involved in this activity to helpaddress business data, process, and location issues. The key inputs to this task are the facts,recommendations, and opinions that are solicited from various sources and the approved ( 5 ) fromthe decision analysis phase.\n(1) A.physical model B.prototype system C.database schema D.application architecture\n(2) A.requirements analysis B.problem analysis C.cause-effect analysis D.decision analysis\n(3) A.entity-relationship diagram B.physical data flow diagram C.data flow diagram D.physical database model\n(4) A.system users B.system analyst C.system owner D.project manager\n(5) A.system architecture B.system proposal C.technical model D.business procedure\n学霸肯定对了 ↕ D.A.B.A.B\n系统设计的目的是指定一种 ()，它定义了用于构建拟议信息系统的技术。此任务通过分析最初在 ()期间创建的数据模型和流程模型来完成。() 用于跨网络建立物理过程和数据存储。为了完成这项活动，分析师可能会让许多系统设计师和 () 参与这项活动，以帮助解决业务数据、流程和位置问题。这项任务的关键输入是从各种来源征求的事实、建议和意见，以及决策分析阶段获得的批准 ()。\n第1题:A、物理模型 B、原型系统 C、数据库模式 D、应用体系架构\n第2题:A、需求分析 B、问题分析 C、因果分析 D、决策分析\n第3题:A、实体联系图 B、物理数据流图 C、数据流图 D、物理数据库模型\n第4题:A、系统用户 B、系统分析师 C、系统所有者 D、项目经理\n第5题:A、 系统架构 B、系统建议书 C、技术模型 D、 业务流程\n13 2021年 # 原文 The prevailing distributed computing model of the current era is called client/server computing. A( 1 )is a solution in which the presentation,presentation logic,applicatio nlogic,data manipulation and data layers are distributed between client PCs and one o r moreservers. A( 2 ) is a personal computer that does not have to be very powerfu lin terms ofprocessor speed and memory because it only presents the interface to th e user. A( 3 )is apersonal computer.notebook computer,or workstation that is typic ally more powerful interms of processor speed,memory,and storage capacity. A(n)( 4 )hosts one or more shareddatabase but also executes all database commands and s ervices for information systems. A(n) ( 5 ) hosts Internet or intranet Web sites,it co mmunicates with clients by returning tothem documents and data.\n(1) A. Client/Server system B.Client-side C.Serve-sider D.Database\n(2) A. Serve-sider B.Browser C. Fat client D.Thin client\n(3) A. Cloud platform B. Cluster system C. Fat client D.Thin client\n(4) A.Transaction server B. Database serverer C.Application server D.Message server\n(5) A. Database server B.Message server C.Web server D.Application server\n学霸肯定对了 ↕ A、D、C、B、C\n现在主流的分布式计算是客户/服务器计算模式。客户/服务器系统是一种解决方案，其中表示层、表示逻辑层、应用逻辑、数据操作、数据层分布在客户的PC 端与一个或多个服务器端之间。瘦客户端指的是个人电脑在处理速度、内存方面无须很强大，因为它仅仅是展示接口给用户。胖客户端是指个人电脑、笔记本、工作站在处理速度、内存、存储容量方面都很强大的一类电脑。数据库服务器控制一个或多个共享数据库，同时也执行所有数据库命令以及服务于信息系统。web 服务器控制互联网、信息平台，与客户端通信，返回给客户端文件与数据。\n14 2022年 # 原文 Micro-service is a software development technology, which advocates dividing a single applicationinto a group of small services，which coordinates and cooperates with each other to provide ultimatevalue for users.The micro-service ( 1 ) has many important benefits.First, it solves the problem ofbusiness complexity.It decomposes the original huge single application into a group ofservices.Although the total amount of functions remains the same, the application has beendecomposed into manageable services.The development speed of a single service is much faster,and it is easier to understand and ( 2 ) Second.this architecture allows each service to be ( 3 ) independently by a team.Developers are free to choose any appropriate technology.Third,themicro-service architecture mode enables each service to be ( 4 )independently.Developers never needto coordinate the deployment of local changes to their services.These types of changes can bedeploved immediately after testing.Finally.the micro-service architecture enables each service to ( 5 ) independently.\n(1) A、architecture B、software C、application D、technology\n(2) A、develop B、maintain C、utilize D、deploy\n(3) A、planned B、developed C、utilized D、deployed\n(4) A、utilized B、developed C、tested D、deployed\n(5) A、analyze B、use C、design D、expand\n学霸肯定对了 ↕ 课后习题 # todo 习题\n"},{"id":26,"href":"/docs/example/architect-exam/3.14-%E5%85%B6%E4%BB%96/","title":"3.14 其他","section":"3. 高级软考 - 系统架构师","content":" 课程内容提要 # 区块链 人工智能 鸿蒙操作系统 霍尔三维 软件过程 软件开发环境 数据资产 数据管理能力成熟度模型 能力成熟度模型CMM 软件复杂度度量 系统移植 1 区块链 ✅ # 以区块链技术最成功的应用比特币为例，矿工的“挖坑行为，其动机是为了获得代币奖励，其技术本质是尝试计算一个Hash碰撞，从而完成工作量证明，对社区而言，成功挖矿的矿工获得记账权和代币奖励是区块链应用系统的激励机制，是社区自我维持的关键。然而，挖矿行为自身并不能防止双花攻击 (即一笔钱可以花出去两次)。\n2 人工智能 ✅ # 人工智能技术已成为当前国际科技竞争的核心技术之一，AI芯片是占据人工智能市场的法宝。AI芯片有别于通常处理器芯片，它应具备四种关键特征。新型计算范式、训练和推断、大数据处理能力、可重构能力是AI芯片的关键特点。\nAI芯片是当前人工智能技术发展的核心技术，其能力要支持训练和推理。通常,Al芯片的技术架构包括GPU、FPGA、ASIC三种。\n3 鸿蒙操作系统 ✅ # 鸿蒙操作系统整体架构采用分层的层次化设计，从下向上依次为:内核层、系统服务层、框架层和应用层。\n鸿蒙操作系统内核层采用微内核设计（注意不是宏内核）,拥有更强的安全特性和低时延特点。\n鸿蒙操作系统架构采用了分布式设计理念,实现了分布式软总线、分布式设系统的虚拟化、分布式数据管理和分布式任务调度等四种分布式能力。\n架构的系统安全性主要体现在搭载HarmonyoS的分布式终端上，可以保证“正确的人,通过正确的设备，正确地使用数据”\n4 霍尔三维 ✅ # 系统工程利用计算机作为工具，对系统的结构、元素、信息和反馈等进行分析，以达到最优规划、最优设计、最优管理和最优控制的目的。霍尔 (A.D.Hal)于1969年提出了系统方法的三维结构体系，通常称为霍尔三维结构，这是系统工程方法论的基础。霍尔的三维结构模式的出现，头解决大型复杂系统的规划、组织、管理问题提供了一种统的思想方法，因而在世界各国得到了广泛应用。\n霍尔三维结构是将系统工程整个活动过程分为前后紧密衔接的七个阶段和七个步骤，同时还考虑了为完成这些阶段和步骤所需要的各种专业知识和技能。这样，就形成了由时间维、逻辑维和知识维所组成的三维空间结构。其中，时间维表示系统工程活动从开始到结束按时间顺序排列的全过程，分为规划、拟定方案、研制、生产、安装、运行、更新七个时间阶段。逻辑维是指时间维的每一个阶段内所要进行的工作内容和应该遵循的思维程序，包括明确问题、确定目标、系统综合、系统分析、优化、决策、实施七个逻辑步骤。知识维列举需要运用包括工程、医学、建筑、商业、法律、管理、社会科学、艺术等各种知识和技能。三维结构体系形象地描述了系统工程研究的框架，对其中任一阶段和每一个步骤，又可进一步展开，形成了分层次的树状体系。可以看出，这些内容几乎覆盖了系统工程理论方法的各个方面。\n5 软件过程 ✅ # 软件工程中系统化的方法有时候也叫软件过程。所有软件过程都包含4个基本的活动，分别是：\n1、软件描述(客户和工程师定义所要生产的软件的功能也约束等);\n2、软件开发(软件得以设计和编程实现);\n3、软件有效性验证(软件经过检查以保证它就是客户所需要的);\n4、软件进化/演化(软件随不同的客户和变化的市场需求而进行修改)。\n6 软件开发环境 ✅ # 软件开发环境(Software Development Environment)是支持软件产品开发的软件系统。它由软件工具集和集成机制构成，软件工具集用来支持软件开发的相关过程、活动和任务;集成机制为工具集成和软件开发、维护和管理提供统一的支持，它通常包括数据集成、界面集成和控制集成。数据集成机制提供了存储或访问环境信息库的统一的数据接口规范，界面集成机制采用统一的界面形式，提供统一的操作方式，控制集成机制支持各开发活动之间的通信、切换、调度和协同工作。\n软件开发环境应支持多种集成机制。根据功能不同，可以将数据、界面和控制集成机制均分为三个部分:环境信息库用以存储与系统开发有关的信息，并支持信息的交流与共享;过程控制与消息服务器是实现过程集成和控制集成的基础，环境用户界面的统一性和一致性是软件开发环境的重要特征。\n7 数据资产 ✅ # 数据资产的特性包括:可控制，可量化，可变现，可共享，可增值，虚拟性、时效性、安全性、交换性和规模性。注意不可测试，不可维护。\n8 数据管理能力成熟度模型 ✅ # 数据管理能力成熟度模型DCMM评估内容包括数据战略、数据治理、数据架构、数据应用、数据安全、数据质量、数据标准和数据生存周期。\n9 能力成熟度模型 ✅ # 能力成熟度模型(Capability Maturity Model，CMM)描述了软件发展的演进过程，从毫无章法、不成熟的软件开发阶段到成熟软件开发阶段的过程。以CMM的架构而言，它涵盖了规划、软件工程、管理、软件开发及维护等技巧若能确实遵守规定的关键技巧，可协助提升软件部门的软件设计能力，达到成本、时程、功能与品质的目标。CMM在软件开发机构中被广泛用来指导软件过程改进。该模型描述了软件过程能力的5个成熟度级别，每一级都包含若干关键过程与KPA，CMM的第二级为可重复级，它包括了6个关键过程域，分别是:需求管理、软件项目计划、软件项目跟踪和监督、软件分包合同管理、软件质量保证和软件配置管理。需求管理的目标是为软件需求建立一个基线，提供给软件工程和管理使用:软件计划、产品和活动与软件需求保持一致。CMMI是CMM的最新版本。\n10 软件复杂度度量 ✅ # 软件源码复杂度度量方法主要有三种:代码行、Helstead方法、McCabe方法(环形复杂度)。\n1、代码行方法:是一种最简单的方法，该方法认为，代码行越多，软件越容易产生漏洞。\n2、Helstead方法:思路是根据程序中可执行代码行的操作符和操作数的数量来计算程序的复杂性。操作符和操作数的量越大，程序结构就越复杂。\n3、McCabe方法:环路复杂度用来定量度量程序的逻辑复杂度。\n11 系统移植 ✅ # 系统移植工作大体上分为计划阶段、准备阶段、转换阶段、测试阶段和验证阶段。为了有效地进行系统移植，就得使系统移植工作标准化；配备软件工具实现自动化；还要简化各阶段的工作。计划阶段要进行现有系统的调查整理，探讨如何转换成新系统，决定移植方法，确立移植工作体制及移植日程；准备阶段要进行移植方面的研究，准备转换所需的资料;转换阶段是将程序设计和数据转换成新机器能根据需要工作的阶段;测试阶段是进行程序单元、工作单元的测试，验证阶段是测试完的程序使新系统工作，最后核实系统，准备正式运行的阶段。\n12 基于网络的数据库管理系统 NDB ✅ # 基于网络的数据库系统(Netware Database SystemNDB)是基于4G/5G的移动通信之上，在逻辑上可以把嵌入式设备看作远程服务器的一个客户端。NDB主要由客户端、通信协议和远程服务器等三部分组成。NDB的客户端主要负责提供接口给嵌入式程序，通信协议负责规范客户端与远程服务器之间的通信，远程服务器负责维护服务器上的数据库数据。NDB是以文件方式存储数据库数据。即数据按照定格式储存在磁盘中，使用时由应用程序通过相应的驱动程序甚至直接对数据文件进行读写。NDB一般是嵌入式设备，裁剪性是嵌入式设备的特征。\n"},{"id":27,"href":"/docs/example/architect-exam/3.15-%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90%E4%B8%93%E6%A0%8F/","title":"3.15 案例分析专栏","section":"3. 高级软考 - 系统架构师","content":" 课程内容提要 # 软件工程篇 数据库系统篇 架构设计篇 其他篇 1 软件工程篇 # 1.1 需求分析 # 3.9 软件工程里面的需求工程，分为结构化需求分析SA和面向对象需求分析OOA，需要掌握其中用的的各种图。主要是用例图和类图，其中用例图是结构化需求分析的图，类图是面向对象需求分析的图。\n1.2 设计模式 # 3.9 软件工程里面的系统设计。\n2 数据库系统篇 # 3 架构设计篇 # 架构风格、架构评估、web应用架构。\n4 其他篇 # 时间与成本管理、系统安全性、系统可靠性。\n课后习题 # todo 习题\n"},{"id":28,"href":"/docs/example/architect-exam/3.16-%E8%AE%BA%E6%96%87%E5%86%99%E4%BD%9C%E4%B8%93%E6%A0%8F/","title":"3.16 论文写作专栏","section":"3. 高级软考 - 系统架构师","content":" 目录 # 本章内容无疑是各大考生最头疼的部分，占比75分，非常重要。注意摘要字数在400字以内，可分条叙述，不允许有图表；正文字数为2000到3000字。\n分析问题，考虑了哪些因素，做了哪些决定，具体怎么做的，如何实现的\n不变应万变，项目背景不变，这样从不同的层面，使得对单个项目的理解非常深入，项目的很多内容是可以直接复用的\n围绕“问题”来排版论文，一般来说，第一个问题都是“概要叙述你参与管理和开发的软件项目以及你在其中所担任的主要工作”\n题目：论数据分片技术及其应用 # 数据分片就是按照一定的规则，将数据集划分成相互独立正交的数据子集。然后将数据子集分布到不同的节点上，通过设计合理的数据分片规则，可将系统中的数据分布在不同的物理数据库中，达到提升应用系统数据处理速度的目的。\n请围绕“论数据分片技术及其应用”论题，依次从以下三个方面进行论述。\n1.概要叙述你参与管理和开发软件的项目以及承担的工作。\n2.Hash分片，一致性Hash分片和按照数据范围分片是三种常用的数据分片方式。\n3.具体阐述你参与管理和开发的项目，且采用了哪些分片方式，并且具体说明其实现过程和应用效果。\n题目：可靠性 # 题目：安全性 # "},{"id":29,"href":"/docs/example/golang/","title":"1. golang - 从入门到入土","section":"介绍","content":" 持续更新ing # "},{"id":30,"href":"/docs/example/gin/","title":"2. gin杂谈","section":"介绍","content":" 持续更新ing # "},{"id":31,"href":"/docs/example/architect-exam/","title":"3. 高级软考 - 系统架构师","section":"介绍","content":" 本章节只介绍“高级资格”里面的系统架构师，想考别的科目的朋友请参见官网 软考及其他资料 1、考试介绍 # 系统架构师考试包含：3个科目，满分均为75分，45分为过线，需三科同时过线才算考过。 2、考试时间 # 每年具体那天考试不太确定，大概都是11月份。科目一全为选择题、科目二为案例分析题(第1道必答，后4道题选答2道，总共做3个题)、科目三论文写作(四选一，不排除之后会变成二选一) 3、报名地址 # 需要格外注意的是：每个科目、每个省份的报名时间是不一样的，大概会在每年的4月和9月左右。系统架构师大概会在每年的9月左右。官方网站 软考\n4、考试内容 # 架构师考试内容太宽泛了，如果你和我一样是工作了才准备考的话，建议复习重点(如：软件工程、软件架构设计、操作系统和数据库系统等)，45分和75分没啥区别。 5、笔者过没过 # 算是比较幸运，我是一把过。希望学弟学妹们都能一把过。 6、备考资料 # 笔者的资料是从机构高价买的，现低价有偿分享给大家，所有资料打包 30元 即可获取，微信号：wys837。\n资料主要有：\n2009-2022年的按年的真题及详细解析； 2009-2022年的按知识点的真题及详细解析； 新版系统架构师教材(2022年11月出版)，鉴别新版教材tips：彩色，上下篇，总共20个章节； 某塞新版教材分析视频； 刷题小程序(非常适合上班族)； 按章节的知识点和真题排班的所有例题； 思维导图； 22年某赛讲义配套视频(309集，总共约48个小时的视频)； 相关的重要知识点补充、案例分析必背题目、示例论文精读、某赛彩色讲义(我主要的复习参考)、答题卡等等。 "},{"id":32,"href":"/docs/example/algorthem/","title":"4. 数据结构与算法","section":"介绍","content":" 持续更新ing # "},{"id":33,"href":"/docs/example/leetcode/","title":"5. leetcode","section":"介绍","content":" 持续更新ing # github地址：https://github.com/yswang837/golang-leetcode\n"},{"id":34,"href":"/docs/example/architect-exam/3.9-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/1-%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E6%96%B9%E6%B3%95/","title":"1) 软件开发方法","section":"3.9 软件工程","content":" 软件开发方法 ✌ # 常见的软件开发方法有4种：结构化法、面向对象方法、面向服务方法、原型法。\n软件开发方法(方法论)比软件开发模型大一号，一个开发方法下面可以挂载多个开发模型。\n整体图示如下图：\n1 结构化法 ✅✅✅✅ # 用户至上；\n严格区分工作阶段，每个阶段有任务和结果；\n强调系统开发过程的整体性和全局性；\n系统开发过程工程化，文档资料标准化；\n自顶向下，逐步分解(求精，先对最高层次中的问题进行定义、设计、编程和测试，而将其中未解决的问题作为一个子任务放到下一层次中去解决)。相对于自底向上方法，自顶向下方法可以更快地得到系统的演示原型。\n2 面向对象方法 ✅✅✅✅ # 拥有更好的复用性，更符合人们的思维习惯；\n自底向上(根据系统功能要求，从具体的器件、逻辑部件或者相似系统开始，通过对其进行相互连接、修改和扩大，构成所要求的系统)；\n分析、设计、实现三个阶段，界限不明确。\n3 面向服务方法 ✅✅✅✅ # 基于服务的架构SOA方法有三个主要的抽象级别：操作(级别低，如数据库的读写操作)、服务(级别中，代表操作的逻辑分组，粒度太小增加通信开销，粒度太大影响服务对需求变化的敏捷性)、业务流程(级别高，为实现特定业务目标而执行的一组长期的动作，通常包含多个服务的调用)；\n在软件架构风格中会详细说明“基于服务的架构SOA”\n4 原型法 ✅✅✅ # 适用于需求不明确的开发；一般主要用于需求分析阶段，对用户需求做出快速相应；可以和另外3中开发方法打配合。\n按结果分：包括抛弃型原型和进化型原型。按功能分分为：水平原型(界面)和垂直原型(算法)。\n5 其他重要的软件开发方法 ✅✅✅ # 形式化方法：所有东西均可证明/验证，而不是代码测试；形式化方法是一种具有坚实数学基础的方法，从而允许对系统和开发过程做严格处理和论证，适用于那些系统安全级别要求极高的软件的开发。形式化方法的主要优越性在于它能够数学地表述和研究应用问题及软件实现。但是它要求开发人员具备良好的数学基础。用形式化语言书写的大型应用问题的软件规格说明往往过于细节化，并且难于为用户和软件设计人员所理解。由于这些缺陷，形式化方法在目前的软件开发实践中并未得到普遍应用。\n统一过程方法UP：在软件开发模型-\u0026gt;统一过程模型UP/RUP；\n敏捷开发方法：在软件开发模型-\u0026gt;敏捷开发模型；\n基于架构的开发方法ABSD：在软件架构设计-\u0026gt;基于架构的软件开发。\n例题 学霸肯定对了 ↕ D A B "},{"id":35,"href":"/docs/example/architect-exam/3.9-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/2-%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E6%A8%A1%E5%9E%8B/","title":"2) 软件开发模型","section":"3.9 软件工程","content":" 软件开发模型 ✌ # 一个开发方法（方法论）下面可以有多个开发模型。各种开发模型之间是存在重合和交叠的，而不是完全隔离的。\n1 瀑布模型 ✅✅✅✅✅ # 严格先后完成每个阶段，上一阶段的输出时下一个阶段的输入，是结构化开发方法的典型模型，适合于需求明确的项目，对大型项目来说风险较大。\n2 迭代/演化模型 ✅✅ # 先快速开发出一个能用的丐版模型，之后再进行完善和优化，每一轮迭代均发布一个可用的产品。它的侧重点在于广。\n3 增量模型 ✅✅ # 先开发出最核心的组件，之后在再核心组件上开发出别的组件，每一次增量均发布一个可用的产品。增量式模型相比于瀑布模型的优点有：降低了适应用户需求变更的成本。它的侧重点在于深。\n4 螺旋模型 ✅✅✅✅✅ # 螺旋模型 = 原型 + 瀑布模型，首次引入风险分析，适合大型项目，螺旋模型是在快速模型的基础上扩展而成的。\n螺旋模型将整个软件开发过程分为多个阶段，每个阶段都由目标设定、风险分析、开发和有效性验证以及评审4个部分组成。\n例题 学霸肯定对了 ↕ B 5 原型模型 ✅✅✅✅ # 适合需求不明确的系统。若题目中指明“需求不明确”，选原型而不选螺旋模型。\n6 喷泉模型 ✅✅ # 早期著名的面向对象模型。它的特点是各个阶段之间没有明显的界限（区别于瀑布模型），各个阶段可以并发；但它非常不利于项目管理。\n7 V模型 ✅✅ # 测试提前做，测试贯穿于始终。\n8 构建组装模型 ✅✅✅✅✅ # 优点：快，成本低、高可靠。\n缺点：构建库的建立需要慢慢积累；放到个人来说就是，代码库的建立需要慢慢积累。\n软件构件是一个独立可部署的、可重用的、不可拆分的软件单元；作为第三方的组装单元、它没有外部的可见状态，构件外部通过接口访问构件提供的服务。\n构件组装是将构件库中的构件经适当修改后相互连接，或者将它们与当前开发项目中的软件元素相连接，最终构成新的目标软件。构件组装技术大致可分为基于功能、基于数据和面向对象的组装技术。\nJ2EE应用系统支持5种不同类型的构建模型，分别是：Applet、Servlet、JSP、EJB、Application Client；其中EJB是企业级Java构件，用于开发和部署多层结构的、分布式的、面向对象的Java应用系统。\n会话型构件负责完成服务端与客户端的交互；实体型构件用于数据持久化来简化数据库开发工作；消息驱动构件主要用来处理并发和异步访问操作。\nCOM+用来开发适用于Windows的、任务关键型的分布式应用程序。ASP即Active Server Pages，是Microsoft公司开发的服务器端脚本，可用来创建动态交互式网页并建立强大的web应用程序。\nCORBA服务端构建模型中，伺服对象(Servant)是CORBA对象的真正实现，负责完成客户端请求，可移植对象适配器(Portable Object Adapter, POA)的作用是在底层传输平台与接收调用并返回结果的对象实现之间进行协调。COM支持两种形式的对象组装：包含是一个对象拥有指向另一个对象的唯一引用、聚集是直接把内部对象接口用传给外部对象的客户，而不是再转发请求。\nCORBA标准中，OMG接口定义语言IDL文件包含了六种不同的元素，包括接口描述、模块定义、常量定义、类型定义、值类型和异常，其中，接口描述是一个IDL文件最核心的内容，模块定义将被映射为Java语言中的包和C++语言中的命名空间。对象管理组织(OMG)基于CORBA基础设施定义了4种构件标准：实体(Entity)构件需要长期持久化并主要用于事务性行为，由容器管理其持久化。加工(Process)构件同样需要容器管理其持久化，但没有客户端可访问的主键。会话(Session)构件不需要容器管理其持久化，其状态信息必须由构件自己管理。服务(Service)构件是无状态的。\n在基于构件的软件开发中，逻辑构件模型用功能描述系统的抽象设计，用接口描述每个服务集合以及功能之间如何交互以满足用户需求，它作为系统的设计蓝图以保证系统提供适当的功能。物理构件模型用技术设施产品、硬件分布和拓扑结构，以及用于绑定的网络和通信协议描述系统的物理设计，这种架构用于了解系统的性能、吞吐率等许多非功能性属性。\n软件构件是部署、版本控制和替换的基本单位。构件是一组通常需要同时部署的原子构件。原子构件通常成组地部署，但是它也能够被单独部署。构件与原子构件的区别在于，大多数原子构件永远都不会被单独部署，尽管它们可以被单独部署。大多数原子构件都属于一个构件家族，一次部署往往涉及整个家族。一个模块是不带单独资源的原子构件。\n基于构建的开发模型：需求分析和定义-\u0026gt;软件架构设计-\u0026gt;构件库的建立-\u0026gt;应用软件构建-\u0026gt;测试和发布。\n基于构件的软件开发中，已有的构建分类方法可以归纳为三大类：关键字分类法(根据领域分析的结果将应用领域的概念按照从抽象到具体的顺序逐次分解为树形或有向无回路图结构)；刻面分类法(利用刻面Facet描述构件执行的功能、被操作的数据、构件应用的语境或任意其他特征)；超文本方法(基于全文检索技术，使得检索者在阅读文档过程中可以按照人类的联想思维方式任意跳转到包含相关概念或构件的文档)。\n如果把软件系统看成是构件的集合，那么从构件的外部形态来看，构成一个系统的构件可分为4类：有限制的构件提供了接口，指出了使用的条件和前提；适应性构件进行了包装或使用了接口技术，把不兼容、资源冲突等进行了处理，可以直接使用；装配的构件在安装时，已经装配在操作系统、数据库管理系统或信息系统不同层次上，可以连续使用；可修改的构件可以进行版本替换，如果对原构件修改错误、增加新功能，可以利用重新“包装”或写接口来实现构件的替换。\n在构件组装过程中需要检测并解决架构失配问题。其中构建失配主要包括由于系统对构件基础设施、控制模型和数据模型的假设存在冲突引起的失配。连接子失配包括由于系统对构件交互协议、构件连接时数据格式的假设存在冲突引起的失配。\n面向构件的编程(Component Oriented Programming, COP)关注于如何支持建立面向构件的解决方案。面向构件的编程所需要的基本支持包括多态性、模块封装性、后期绑定和装载、安全性。它目前缺乏完善的方法学支持，构件交互的复杂性带来了很多问题，其中多线程问题会产生数据竞争和死锁现象。异步问题、多语言支持问题、调用者封装问题。\n为了被广泛的使用，接口同构建一样也有规范；接口标准化是对接口中的消息模式、格式和协议的标准化。\n软件重用可以区别为横向重用和纵向重用。横向重用是指重用不同应用领域中的软件元素，例如标准库函数、数据结构、分类算法和人机界面构建等。纵向重用是指在类具有较多公共性的应用领域之间进行软部件重用。纵向重用活动的主要关键点是领域分析：根据应用领域的特征及相似性预测软部件的可重用性。软件重用的元素包括：需求分析文档、设计文档、程序代码、测试用例和领域知识。\n9 快速应用开发模型RAD ✅✅✅ # 快速应用开发=瀑布模型(SDLC) + 构建组装模型(CBSD)，可认为它综合了二者的优点；当系统模块化程度较高时可采用该开发模型。\n10 统一过程模型UP/RUP ✅✅✅✅✅ # 三大特点：用例驱动、以架构为中心、迭代和增量。\n四个阶段：采用迭代和增量的方式来开发软件，每完成一次循环则会产生一代软件，这样做的好处是：在软件开发初期就可以对关键的影响大的风险进行处理。 初始：确定项目范围和边界； 细化：设计并确定架构体系、制定工作计划及资源要求； 构建：开发剩余的构建、构建组装与测试； 交付：制作发布版本。 RUP的9个工作流：商业建模、需求、分析和设计、实现、测试、部署、配置和变更管理、项目管理、环境。注意成本不属于其中。\n例题 学霸肯定对了 ↕ B A 11 敏捷开发模型 ✅✅✅✅ # 小步快跑的模式，适合小型项目。\n敏捷方法是以人为本的适应性方法，它介于无软件开发方法和传统软件开发方法(注重流程文档)之间；将更重要的注意力集中于可运行的代码本身，而不太重视各类文档、流程之类的。\n敏捷开发下的模型 例题 学霸肯定对了 ↕ C 学霸肯定对了 ↕ B 学霸肯定对了 ↕ B D "},{"id":36,"href":"/docs/example/architect-exam/3.9-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/3-%E9%9C%80%E6%B1%82%E5%B7%A5%E7%A8%8B/","title":"3) 需求工程","section":"3.9 软件工程","content":" 需求工程 ✌ # 1 概述 ✅✅✅✅ # 软件需求是指用户对系统在行为、功能、性能、设计约束等方面的期望。\n需求工程包括两个维度：需求开发维度(技术维度)和需求管理维度(管理维度)。\n需求定义的产出是：需求规格说明书SRS。\n对需求规格说明书SRS进行需要验证得到需求基线，需求管理的对象就是需求基线。\n在需求管理中，要求维持对用户原始需求和所有产品构件需求的双向跟踪；变更控制委员会对项目中任何基线工作产品的变更都可以做出决定。\n在需求工程之前可能还需要做可行性分析报告。主要包括：对系统开发的各种候选方案进行成本/效益分析；评价该项目实施后可能取得的无形收益；评估现有技术能力和信息技术是否足以支持系统目标的实现。\n例题 学霸肯定对了 ↕ D\nA项需求管理是对变更控制、版本控制、需求跟踪、需求状态跟踪的管理，C项需求开发并不是代码的开发\n2 需求获取 ✅✅✅ # 从技术维度可将需求分为： 1、用户需求(用户视角)\n2、业务需求(整体视角)\n3、系统需求(计算机视角，系统需求分为：功能需求、性能需求、设计约束需求(既不是功能需求、又不是性能需求的就属于设计约束需求，比如年龄0到100岁，性别只能是男女等))\n从管理维度可将需求分为： 1、基本需求(需求基线中明确要求要做的)\n2、期望需求(比较难把握，客户觉得你应该做的)\n3、兴奋需求(客户不要求你做的，但你做完了，这其实会加大系统开发的风险)\n联合需求计划JRP(联合讨论会)：在JRP实施之前，应制定详细的议程，并严格遵照议程进行；在讨论期间尽量避免使用专业术语；JRP是一种相对来说成本较高但十分有效的需求获取方法。\n3 需求分析 ✅✅✅✅✅ # 安全攸关系统在软件需求分析阶段，应提出安全性需求。软件安全性需求是指通过约束软件的行为，使其不会出现不可接受的违反系统安全的行为。软件安全需求的获取是根据己知的系统信息，如软件危害条件等以及其他一些类似的系统数据和通用惯例，完成通用软件安全性需求的裁剪和特定软件安全性需求的获取工作。\n需求获取完以后，需要对需求进行整理和分析(期间有两个目标：如何根据需求模型构建软件架构模型，如何保证模型转换的可追踪性)，需求分析包含两个方面： 1、结构化需求分析SA；\n2、面向对象需求分析OOA。\n3.1 结构化需求分析SA ✅✅✅✅✅ # SA要求完成功能模型(数据流图DFD，也叫分层数据流图)、行为模型(状态转换图STD)、数据模型(ER图：从数据的角度对现实世界进行建模)，其中数据字典起到解释的作用，比如学生关系包含学号、名字、年龄等。\n在数据库设计的需求分析阶段也产生数据流图和数据字典，以及需求说明书。\nDFD：Data Flow Diagram，反映的是系统跟外界实体之间的交互，以及数据加工和交换的方式。 DFD的平衡原则：用于DFD里面填空(类似于完形填空)，如上图的“注册请求”、“课程安排”等在父图和子图中应该是一致的。 DFD答题技巧 STD：State Transform Diagram，（状态建模）\nE-R图：实体关系图，（数据建模）\n例题 学霸肯定对了 ↕ C D\n用例图、对象图、通信图、顺序图和活动图都是面向对象的图，都是UML里面的图\n3.2 面向对象需求分析 ✅✅✅✅✅ # 面向对象需求分析简称OOA，相关概念如下。\n类的考察方法：\n实体类：用于永久保存数据信息。\n边界类：用于人机交互界面、系统交互接口。\n控制类：非实体类和非边界类就是控制类，如业务逻辑(订单结算等)。\n1）UML # UML全称Unified Modeling Language，统一建模语言，UML由构造块、规则和公共机制；构造块中最重要的是事物和图；事物中包含结构事物是静态部分、行为事物是动态部分。\nUML2.0中一共定义了14种图。其中结构图 (静态图)包括:类图、对象图、构件图、部署图、制品图、 包图、组合结构图;行为图 (动态图)包括:用例图、顺序图、通信图 (协作图)、定时图、交互概览图、活动图、状态图。\n在UML2.0中，顺序图用来描述对象之间的消息交互，其中循环、选择等复杂交互使用序列片段/区域表示，对象之间的消息类型包括：同步消息、异步消息、返回消息、参与者创建消息、参与者销毁消息。\n从UML2.0开始，整个UML规范被划分为基础结构和上层结构两个相对独立的部分，基础结构是元模型，它定义了构造UML模型的各种基本元素；而上层结构则定义了面向建模用户的名种UML模型的语法、语义和表示。\nUML图同事物一样，也分为静态部分和动态部分，静态图称为结构图，动态图为行为图(交互图)。得知道每种图大致是什么意思(标红的为重点，该部分在案例分析里面需要掌握的图有：类图、用例图、顺序图、通信图、状态图、活动图)。\n基于UML的需求分析过程大致可分为以下步骤:\n1、利用用例及用例图表示需求。从业务需求描述出发获取执行者和场景;对场景进行汇总、分类、抽象，形成用例，确定执行者与用例、用例与用例图之间的关系，生成用例图。\n2、利用包图和类图表示目标软件系统的总体框架结构。根据领域知识、业务需求描述和既往经验设计目标软件系统的顶层架构，从业务需求描述中提取“关键概念”，形成领域概念模型，从概念模型和用例出发，研究系统中主要的类之间的关系，生成类图。\n1) 类图 # 类图的关系 依赖关系好辨识：a调用b的函数，称为a依赖b。\n泛化关系：父子关系，父：一般；子：特殊。\n聚合关系：汽车和轮胎，汽车坏了，其零件还能用。\n组合关系：公司和部门，公司没了，部门自然也就没了。\n实现关系：接口和类\n例题 学霸肯定对了 ↕ D C 2) 用例图 # 用例的关系 包含关系(include直接理解为\u0026quot;必须要先\u0026quot;)：如上图的用户登录(查询外借信息和登记外借信息必须先登录，也就是说查询外借信息和登记外借信息包含了用户登录)。如何区分包含关系和扩展关系：前者是必须的，后者非必须。\n扩展关系(extend：执行基本功能时可选执行扩展功能)：如上图的查询书籍信息和修改书籍信息，只有查询书籍信息且信息不对时才会修改书籍信息，修改书籍信息是非必须执行的(也就是说：修改书籍信息是查询书籍信息的扩展)。\n泛化关系(generalize)：明显的父子的继承关系(比如说注册可通过手机号注册，也可通过邮箱注册；手机号注册和邮箱注册都继承于注册)，注意却别包含关系。\n细化用例描述，第一列包含9种用例规约：用例名称ID说明；前置后置条件；基本异常其他事件流；角色。 例题 学霸肯定对了 ↕ B C 案例分析例题 学霸肯定对了 ↕ 问题1：用例模型的参与者有：仓库管理员、仓库经理、系统管理员、时间、温度、温度调节系统。\n问题2：用例名称、用例ID、角色、用例说明、前置条件、后置条件、基本事件流、其他事件流、异常事件流。\n问题3：用例之间的关系包括：包含关系、扩展关系、泛化关系。“出入库操作”与“登录”属于包含关系；“查询统计报表”与“生成统计报表”属于扩展关系；“用户注册”与“邮件注册”和“电话注册”属于典型的泛化关系。\n3) 状态图 # 状态图可用于定义对象内部的行为。\n4) 活动图 # 活动图和状态图有点像，可以根据节点里面的内容是状态还是活动来进行区分。\n活动图对标的是流程图，流程图是结构化时代的，而活动图是面向对象的图。\n活动图中的两个粗线之间的活动是可以并行执行的。\n活动图描述的是对象活动的顺序关系所遵循的规则，它着重表现系统的行为，而非处理过程;而流程图着重描述处理过程。\n这些图都可以用来描述和表示业务流程模型：活动图可以用于描述系统的工作流程和并发行为，活动图其实可看作状态图的特殊形式，活动图中一个活动结束后将立即进入下一个活动。BPMN(Business Process Modeling Notation)指业务流程建模与标注，包括这些图元如何组合成一个业务流程图。Petri-Net是所有流程定义语言之母。\n泳道活动图 在活动图的基础上，增加区分各个活动发生在哪些角色中。\n案例分析例题 学霸肯定对了 ↕ 案例分析例题 学霸肯定对了 ↕ 5) 顺序图 # 强调对象之间消息传递的顺序性。\n6) 通信图(协作图) # 强调对象之间消息传递的关系，不关心时间。\n7) 定时图(计时图) # 例题 学霸肯定对了 ↕ B A\n第一空分析：交互过程建模，说明要选择动态图。第二空分析：执行流程，说明要选择动态图。\n8) 构建图与包图 # 构建图是对外提供的一个接口和功能，包图是为了管理方便，将相关的东西放在一个文件夹中。\n9) 部署图 # 描述的是硬件节点和软件构建之间的关系。\n10) UML4+1视图 # 同架构的4+1视图可以一一对应。例题可参考软件架构的概述。用例视图是最基本的需求分析模型。\n4 需求定义 ✅✅ # 把需求分析的成果落地成文档的过程就是需求定义的过程。需求定义的产物的是：需求规格说明书SRS。\n需求定义包含2大类： 严格定义法：过于理想化，同形式化开发方法类似。 原型法：同原型开发模型类似。 例题 学霸肯定对了 ↕ C 5 需求验证 ✅✅ # 对需求规格说明书SRS进行验证，需求甲方参与确认。最为最终的需求基线。\n6 需求变更控制 ✅✅ # 需求变更是每个项目中客观存在的。无法杜绝的。我们要做的是管理和控制好需求的变更。这样的管理软件应当具有：1、记录每一个状态变更的日期及变更者的功能；2、可以定义变更请求的数据项以及变更请求生存期的状态转换图；3、可以加强状态转换图使经授权的用户仅能做出所允许的状态变更。\n例题 学霸肯定对了 ↕ D B 7 需求版本控制 ✅✅ # 8 需求跟踪 ✅✅ # 需求工程的目标是获取用户最真实的需求，可往往在开发测试过程中会出现遗漏，这时候需要及时跟踪需求，以发现纰漏。\n用户的需求称为原始需求，软件需求可以认为是用例(功能)，UC-n没有打钩，表示这个功能多余了，用户其实不需要这个功能；FR-m没有打钩，表示这个功能漏做了。\n需求跟踪是将单个需求和其他系统元素之间的依赖关系和逻辑联系建立跟踪，这些元素包括各种类型的需求、业务规则、系统架构和构件、源代码、测试用例，以及帮助文件等。\n需求跟踪能力链(traceability link) 下图中的1是客户需求，2是软件需求。\n9 需求状态管理 ✅✅ # 又称为需求管理，一个需求确认以后，往往会有多个状态的变迁。\n"},{"id":37,"href":"/docs/example/architect-exam/3.9-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/4-%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/","title":"4) 系统设计","section":"3.9 软件工程","content":" 系统设计 # 1 界面设计 # 界面设计的三个原则 置于用户控制之下 减少用户的记忆负担 保持界面的一致性 系统输入设计应该属于界面设计的一种。人的因素在系统输入设计中扮演了很重要的角色。输入应该尽可能地简单，以降低错误发生的可能性，如对于范围可控的数据，使用选择的方式替代用户输入，只输入变化的数据等。输入应该尽可能使用已有含义明确的设计，需要采用模仿的方式而非创新。为了避免用户理解的二义性，应该对表格中输入的数据给出提示信息。数据类型检查确保输入了正确的数据类型，自检位用于对主关键字进行基于校验位的检查；城检查用于验证数据是否位于合法的取值范围；格式检查按照已知的数据格式对照检查输入数据的格式。\n例题 学霸肯定对了 ↕ A 2 软件设计 # 体系结构设计就是架构设计，软件设计包含4个方面：接口架构过程数据。\n例题 学霸肯定对了 ↕ B A D 2.1 结构化设计 SD # 外部和内部、高内聚和低耦合的角度都是模块(模块是指执行某一特定任务的数据结构和程序代码；每个模块完成相对独立的特定子功能，与其他模块之间的关系最简单；)，符合自顶向下的原则。扇入：别人调自己，扇出：自己调别人。\n概要设计(外部设计) 外部设计(高层设计/总体设计)处于软件设计的开始阶段，主要是将软件需求转化为数据结构和软件的系统结构，设计出各个功能部分的功能和接口，确定系统功能模块及其相互关系，主要采用模块结构图、层次图、HIPO图描述程序的结构。\n详细设计(内部设计) 内部设计(底层设计)处于软件工程中的详细设计阶段，按照外部设计中确立的系统软件结构，来细化此系统各个功能部件以及各个部件接口的设计，并且详细给出各个功能部件详细的数据结构与算法。\n需要知道内聚和耦合的两个极端。最高内聚为：功能内聚；最低内聚为：偶然内聚。最高耦合：内容/内部耦合；最低耦合：非直接耦合和数据耦合。\n2.2 面向对象设计 OOD # 面向对象设计OOD的基本任务是把面向对象分析模型(顶层架构图、用例与用例图、领域概念模型构成)转换为面向对象设计模型(以包图表示的软件体系结构图、以交互图表示的用例实现图，完整精确的类图，针对复杂对象的状态图和用以描述流程化处理的活动图等)。\n面向对象的设计原则如下： 对于违反里氏替换原则的两个类A和B，可以采用：尽量将一些需要扩展的类或者存在变化的类设计为抽象类或者接口，并将其作为基类，在程序中尽量使用基类对象进行编程。\n信息隐蔽是开发整体程序结构时使用的法则，即将每个程序的成分隐蔽或封装在一个单的设计模块中，并且尽可能少地暴露其内部的处理过程。通过信息隐蔽可以提高软件的可修改性、可测试性和可移植性，它也是现代软件设计的一个关键性原则。\n例题 学霸肯定对了 ↕ C 设计模式 设计模式-github代码\n设计模式属于OOD里面的内容，详情见 3 设计模式\n2.3 软件架构设计 # 见“软件架构设计“章节。\n3 23种设计模式 # 设计模式属于面向对象设计里面的一个点，设计模式放大一层就是架构风格。\n学习设计模式需要关注的点：\n1、模式的三种类型的定位\n2、设计模式的分类\n3、设计模式应用场景(能解决什么样的问题)及特点\n3.1 模式的种类 # 例题 学霸肯定对了 ↕ A B B 3.2 设计模式的分类 # 创建型模式：用于创建对象，为设计类实例化新对象提供指南。 结构型模式：用于处理类或对象的组合，对类如何设计以形成更大的结构提供指南。 行为型模式：用于描述类或对象的交互以及职责的分配，对类之间交互以及分配责任的方式提供指南。 也可分为：类模式（类似于类的静态方法，不用初始化对象，直接通过类名来调用）和对象模式。\n3.3 创建型模式 # 1) 工厂方法模式(Factory Method) # 2) 抽象工厂模式(Abstract Factory) # 创建一系列相关的对象。\n3) 构建器模式(Builder) # 创建复杂对象。\n4) 原型模式(Prototype) # 允许对象在不了解要创建对象的确切类以及如何创建等细节的情况下创建自定义对象。如对象的直接克隆。\n5) 单例模式(Singleton) # 确保一个类只有一个实例。例如数据库的连接。\n3.4 结构型模式 # 6) 适配器模式(Adapter) # 7) 桥接模式(Bridge) # 将类的抽象部分和它的实现部分分离开来，使它们可以独立变化。跟docker网络的桥接模式不一样。\n8) 组合模式(Composite) # 9) 代理模式(Proxy) # 应用程序的快捷方式。房东房子很多，需要卖房的时候，他把房子全权代理给房屋代理机构，让该机构负责，它可决定介绍哪些买家给买家。注意跟中介模式、适配器模式区分。\n10) 装饰模式(Decorator) # 动态的附加、补充、扩展一些简单的职能，比静态继承具有更大的灵活性。原始的咖啡加糖，加冰等等。\n11) 外观模式(Facade) # 子系统的一组接口对外提供一个统一的接口。比如说：一键开会(拉下幕布，打开投影仪，灯光降低，关闭窗帘)，一键开会这个接口使得子系统更易使用。\n12) 享元模式(Flyweight) # 汉字编码。常用汉字也就几千字，如果在word中有几十万字，那么大多数都是重复的常用汉字，那么这些常用汉字可以共享空间。\n3.5 行为型模式 # 13) 中介模式(Mediator) # 解决买房和卖房信息不对称的矛盾，两个对象之间的两两交互过于麻烦，中介可以屏蔽双方的差异，简化流程。比如银联、央行。\n14) 职责链模式(Chain of Responsibility) # 提交的请假如果本层解决不了，则层层网上传递(有一定顺序)，这就形成一个职责链(看做是踢皮球就好理解了)。\n15) 命令模式(Command) # 日志记录，可撤销。将命令封装在对象里面，如word的各种撤销(及时性的东西)等等。\n16) 解释器模式(Interpreter) # 如架构风格里面的虚拟机风格。可为特定的、自定义的场景做出解释，如迷宫。\n17) 迭代器模式(Iterator) # 若高级语言里面的可迭代对象。数据的某些迭代操作。\n18) 备忘录模式(Memento) # 快照。可以在不向外界公开具体细节的时候恢复到最初的状态，游戏存档，git版本存档。命令模式是撤销一些及时性的东西。\n19) 观察者模式(Observer) # 订阅、广播、联动。在Execl中，A1=10,A2=20,A3=A1+A2，当A1或A2变化时A3也会随之变化。\n20) 状态模式(State) # 将状态变成类，可以很好地管理状态之间的变迁。不同的状态对应不同的复杂的行为和属性。订酒店：房间有空闲状态，入住状态，待清洁状态等等。会员的升级等。\n21) 策略模式(Strategy) # 多方案、多策略的切换。随着场景变化而变化。如商场打折。\n22) 模板方法模式(Template Method) # PPT模板、简历模板等。如软件开发里面的框架。\n23) 访问者模式(Visitor) # 数据与操作分离，将变的和不变的分离开来。因为操作老是会变，而数据基本不变。\n例题 学霸肯定对了 ↕ A D C B 案例分析例题 学霸肯定对了 ↕ "},{"id":38,"href":"/docs/example/architect-exam/3.9-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/5-%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%BB%BA%E6%A8%A1/","title":"5) 软件系统建模","section":"3.9 软件工程","content":" 软件系统建模方法 # 1 逆向工程 # 山寨，比如说军事领域的航母。\n软件逆向工程就是分析已有的程序，寻求比源代码更高级的抽象表现形式。在逆向工程导出信息的四个抽象层次中， 结构级包括反映程序各部分之间相互依赖关系的信息; 功能级包括反映程序段功能及程序段之间关系的信息。\n例题 学霸肯定对了 ↕ B C 1.1 再工程(重构) # 在论文里面考过，通过图示可以看见，新旧系统的物理模型对应于软件设计，新旧系统的逻辑模型对应于需求分析，所以里面可以写的点还是挺多的。\n论文例题 学霸肯定对了 ↕ "},{"id":39,"href":"/docs/example/architect-exam/3.9-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/6-%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E4%B8%8E%E8%B0%83%E8%AF%95/","title":"6) 软件测试与调试","section":"3.9 软件工程","content":" 软件测试与调试 # 1 软件测试方法 # 测试的原则 尽早、不断的进行测试 程序员避免测试自己设计的程序 既要选择有效、合理的数据，也要选择无效、不合理的数据 修改后应进行回归测试 尚未发现的错误数量与该程序已发现错误数成正比 1.1 测试类型的划分 # 动态测试 黑盒测试是根据程序外部功能来设计测试用例。\n等价类划分：各个阶段的测试用例各选一个，如1-1000分为普卡用户，1001-3000为金卡用户，大于等于3001为砖石卡。无效等价类也需要给测试用例。\n在黑盒测试中,判定表方法最适合描述在多个逻辑条件取值组合所构成的复杂情况下，分别要执行哪些不同的动作。\n边界值分析通过选择等价类边界作为测试用例，不仅重视输入条件边界，而且也必须考虑输出域边界。\n因果图方法是从用自然语言书写的程序规格说明的摧述中找出因 (输入条件)和果 (输出或程序状态的改变)，可以通过因果图转换为判定表。\n正交试验设计法，就是使用已经造好了的正交表格来安排试验并进行数据分析的一种方法，目的是用最少的测试用例达到最高的测试覆盖率。\n白盒测试就是根据程序内部结构和内部逻辑，测试其功能是否正确，在白盒测试中测试强度最高的是路径覆盖。\n语句覆盖要求设计足够多的测试用例，使程序中每多语句至少被执行一次。\n判定/条件覆盖准则的缺点是未考虑条件的组合情况。\n与判定覆盖相比，条件覆盖增加对符合判定情况的测试，增加了测试路径。\n静态测试 静态测试是指被测试程序不在机器上运行，而采用人工检测和计算机辅助静态分析的手段对程序进行检测。静态测试包括对文档的静态测试和对代码的静态测试。对文档的静态测试主要以检查单的形式进行，而对代码的静态测试般采用桌前检查、代码审查和代码走查；静态测试一般测试的是：\n1、控制流分析：可检查被测程序是否存在没有使用的语句或子程序、是否调用并不存在的子程序,以及是否存在无法达到的语句等。\n2、数据流分析：例如，引用未定义的变量、对以前未使用的变量再次陆值等程序差错或异常情况。\n3、接口分析：例如可以检查函数形参与实现的数量、顺序、类型和使用的一致性。\n4、表达式分析：例如，括号不配对、数组引用越界、除数为零，以及浮点数变量比较时的误差等错误。\n5、信息流分析阶段：找出输入变量和输出变量之间的依赖关系；\n6、路径分析阶段找出程序中所有可能的路径并画出在此路径中执行的语句。\n例题 学霸肯定对了 ↕ A C 1.2 结构化测试阶段 # 单元测试 驱动模块用来调用被测模块，自顶向下的单元测试中不需要另外编写驱动模块。桩模块用来模拟被测模块所调用的子模块，自顶向下的单元测试中需要另外编写桩模块。驱动模块用来模拟被测模块所调用的子模块，自底向上的单元测试中需要另外编写驱动模块。\n单元测试的技术依据是软件详细设计说明书。\n集成测试 程序的单元测试通过后进行模块之间的集成测试，主要测试各模块之间的接口是否正常起作用，并验证已集成的软件是否符合设计要求，集成测试的技术依据是概要设计文档。\n系统测试 系统测试的对象是完整的计算机系统，系统测试的目的是在真实系统工作环境下，验证完整的软件配置项能否和系统正确连接。系统测试的技术依据是用户需求或开发合同；强度测试、恢复测试、安全性测试、性能测试、可靠性测试和安装测试都是系统测试的内容。\n配置项测试 配置项测试的目的是检验软件配置项与SRS要求的是否一致。配置项测试的技术依据是需求规格说明书SRS(或者是需求基线)。\n确认测试 确认测试主要验证软件的功能、性能和其他特性是否与用户需求一致，确认测试的技术依据是需求规格说明书SRS(或者是需求基线)；根据用户的参与程度，通常包括以下四种类型:内部确认测试 (由软件开发组织内部按软件需求说明书进行测试)、Alpha测试 (由用户在开发环境下进行测试)、Beta测试 (由用户在实际使用环境下进行测试)和验收测试 (针对软件需求说明书，在交付前以用户为主进行的测试)。\n验收测试 在软件交付前以用户为主的测试，验收测试的技术依据是需求规格说明书SRS(或者是需求基线)。\n回归测试 软件变更后，测试变更是否都软件的正确性有影响。\n强度测试 是对系统在异常情况下的承受能力的测试是检查系统在极限状态下运行时，性能下降的幅度是否在允许的范围内。\n恢复测试 恢复测试监测系统的容错能力。\n安全性测试 系统的安全性测试是检测系统的安全机制、保密措施是否完善，主要是为了检验系统的防范能力。\n性能测试 测试响应时间、处理速度、吞吐量、处理精度等。\n可靠性测试 测试MTBF和MTTR等指标。\n安装测试 测试安装过程中是否出错、遗漏等。\n例题 学霸肯定对了 ↕ A 学霸肯定对了 ↕ A D 1.3 面向对象测试 # 和结构化测试基本上一一对应，但它只需要了解每个层大概有什么测试方法就行，不用掌握每一种方法。\n与传统的结构化系统相比，面向对象系统具有三个明显特征，即封装性、继承性与多态性。封装性决定了面向对象系统的测试必须考虑到信息隐蔽原则对测试的影响，以及对象状态与类的测试序列，因此在测试一个类时，仅对该类的每个方法进行测试是不够的，继承性决定了面向对象系统的测试必须考虑到继承对测试充分性的影响，以及误用引起的错误，多态性决定了面向对象系统的测试必须考虑到动态绑定对测试充分性的影响、抽象类的测试以及误用对测试的影响。\n1.4 自动化测试 # 自动化测试工具主要使用脚本技术来生成测试用例，脚本是一组测试工具执行的指令集合。脚本的基本结构主要有五种:线性脚本是录制手工测试的测试用例时得到的脚本，结构化脚本具有各种逻辑结构和函数调用功能；共享脚本是指一个脚本可以被多个测试用例使用，数据驱动脚本是指将测试输入存储在独立的数据文件中，而不是脚本中，关键字驱动脚本是数据驱动脚本的逻辑扩展，用测试文件描述测试用例。\n2 软件调试 # 2.1 软件调试方法 # 原因排除法：正向找错，回溯法：反向找错。\n2.2 调试和测试的区别 # "},{"id":40,"href":"/docs/example/architect-exam/3.9-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/7-%E7%B3%BB%E7%BB%9F%E8%BF%90%E8%A1%8C%E4%B8%8E%E8%BD%AF%E4%BB%B6%E7%BB%B4%E6%8A%A4/","title":"7) 系统运行与软件维护","section":"3.9 软件工程","content":" 系统运行与维护 # 1 遗留系统的处置问题 # 基于JavaEE平台的基础功能服务构建应用系统时，JCA、JMS和Java IDL可用来集成遗产系统，注意JDBC是用来连接数据库的。\n例题 学霸肯定对了 ↕ D 2 新旧系统的转换策略 # 3 数据转换与迁移 # 4 系统运行与维护 # 例题 学霸肯定对了 ↕ A D C "},{"id":41,"href":"/docs/example/hidden/","title":"Hidden","section":"介绍","content":" This page is hidden in menu # Quondam non pater est dignior ille Eurotas # Latent te facies # Lorem markdownum arma ignoscas vocavit quoque ille texit mandata mentis ultimus, frementes, qui in vel. Hippotades Peleus pennas conscia cuiquam Caeneus quas.\nPater demittere evincitque reddunt Maxime adhuc pressit huc Danaas quid freta Soror ego Luctus linguam saxa ultroque prior Tatiumque inquit Saepe liquitur subita superata dederat Anius sudor Cum honorum Latona # O fallor in sustinui iussorum equidem. Nymphae operi oris alii fronde parens dumque, in auro ait mox ingenti proxima iamdudum maius?\nreality(burnDocking(apache_nanometer), pad.property_data_programming.sectorBrowserPpga(dataMask, 37, recycleRup)); intellectualVaporwareUser += -5 * 4; traceroute_key_upnp /= lag_optical(android.smb(thyristorTftp)); surge_host_golden = mca_compact_device(dual_dpi_opengl, 33, commerce_add_ppc); if (lun_ipv) { verticalExtranet(1, thumbnail_ttl, 3); bar_graphics_jpeg(chipset - sector_xmp_beta); } Fronde cetera dextrae sequens pennis voce muneris # Acta cretus diem restet utque; move integer, oscula non inspirat, noctisque scelus! Nantemque in suas vobis quamvis, et labori!\nvar runtimeDiskCompiler = home - array_ad_software; if (internic \u0026gt; disk) { emoticonLockCron += 37 + bps - 4; wan_ansi_honeypot.cardGigaflops = artificialStorageCgi; simplex -= downloadAccess; } var volumeHardeningAndroid = pixel + tftp + onProcessorUnmount; sector(memory(firewire + interlaced, wired)); "},{"id":42,"href":"/docs/example/leetcode/1-hot100/","title":"1) Hot100","section":"5. leetcode","content":" hot100 # 项目代码：https://github.com/yswang837/golang-leetcode\n"}]