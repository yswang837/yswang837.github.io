[{"id":0,"href":"/docs/example/architect-exam/3.4-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/1-%E6%9E%B6%E6%9E%84%E7%9A%84%E6%A6%82%E8%BF%B0/","title":"1) 软件架构的概述","section":"3.4 软件架构设计","content":" 1.软件架构的概述 # 1.1 软件架构的概念 # 软件架构即软件体系结构，软件架构设计就是需求的再分配，即将满足需求的职责分配到组件上。它搭建起了需求分析与软件设计之间的鸿沟。如下图： 架构的本质\n1. 软件架构为软件系统提供了一个结构、行为和属性的高级抽象。\n2. 软件架构风格是特定应用领域的管用模式，架构定义了一个词汇表和一组约束。\\ 架构的作用\n1. 软件架构是项目干系人进行交流的手段。\n2. 软件架构是可传递和可复用的模型。\n3. 软件架构使推理和控制的更改更加简单，有助于循序渐进的原型设计。 例题 学霸肯定对了 ↕ D 1.2 软件架构的发展 # 软件架构的发展经历了无架构模式(汇编语言)、萌芽阶段(程序结构设计)、初级阶段(统一建模语言UML)、高级阶段(4+1视图)。\n4+1视图如下： 。\n例题 学霸肯定对了 ↕ A D C "},{"id":1,"href":"/docs/example/","title":"介绍","section":"Docs","content":" 关于博客 # 这个博客是我个人开设的第二个博客，主要用于记录作者在计算机行业摸爬滚打10余年的经历、各类资料干货以及学习心得等，持续更新中\u0026hellip;\u0026hellip;\n本项目的所有的免费资源均挂载在github，地址为：https://github.com/yswang837/yswang837.github.io，同时欢迎热爱开源的朋友fork下来，提交给我你的代码，让我们一起完善这个项目吧；如果你认为本博客帮助了你，欢迎star。\n请你在阅读本站内容时，时刻持有一种质疑的态度，这样不仅能够帮助自己思考，也能发现我文章的不足之处；文章中难免引用到来自网络的各类资料，如果你觉得侵犯了你的版权，请联系我，我将立即删除；如果文章中有什么错漏的地方请大家见谅，也欢迎大家随时加我微信wys837帮我指正，希望与大家一起进步。感谢！\n关于作者 # 笔名：小钻风\n微信：wys837\ngithub: https://github.com/yswang837\n"},{"id":2,"href":"/docs/example/architect-exam/3.4-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/2-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E9%A3%8E%E6%A0%BC/","title":"2) 软件架构风格","section":"3.4 软件架构设计","content":" 2.软件架构风格 # 架构风格反映了领域中众多系统所共有的结构和语义特性，并指导如何将各个构件有效地组织成一个完整的系统。架构风格定义了用于描述系统的术语表和一组指导构建系统的规则。下图是架构师考试中常见的架构风格及其子风格，接下来会详细介绍每一种风格。 2.1 数据流风格 # 数据流风格以数据驱动的方式推进项目，其的典型应用有传统编译器、网络报文处理，它包含2个子风格：\n1、批处理。做题要点：大量整体数据、无需用户交互\n2、管道过滤器。做题要点：流式数据、弱用户交互\n具体如下图： 2.2 调用/返回风格 # 调用/返回风格包含3个子风格：\n1、主程序/子程序风格\n2、面向对象风格\n3、分层风格\n2.3 独立构建风格 # 独立构建区别于返回/调用风格的点在于，相对松耦合，且放弃了对子程序的控制，它包含2个子风格：\n1、进程通信\n2、事件驱动系统（隐式调用）\n2.4 虚拟机风格 # 虚拟机风格包含2个子风格：\n1、解释器风格，做题关键字：需要自定义规则的场景\n2、规则系统，做题关键字：在解释器的基础上增加经验规则\n2.5 仓库风格 # 仓库风格包含2个子风格：\n1、数据库系统\n2、黑板系统 2.6 闭环控制风格(过程风格) # 2.7 C2架构风格 # \\\n例题 答案： 答案： 答案：\n2.8 架构风格具体实例 # 没有最好的架构，只有更适合具体业务场景的架构。\n2.8.1 从 C/S -\u0026gt; B/S -\u0026gt; 混合架构 # 双层C/S架构\n通过图示可以看出非常明显的缺点：将业务逻辑的代码嵌入进客户端，在早期互联网并不普及的情况下，频繁变更的业务逻辑代码和难以推广升级的客户端存在巨大矛盾。 三层C/S架构\n相比于双层C/S架构，三层C/S架构的优势在于：将业务逻辑层单独拆分出来(独立于数据库服务器、用户客户端)放在单独的服务器上，经常变更的业务逻辑代码并不会直接影响到客户端的使用。其劣势依然需要用户安装客户端(你可以认为就是手机中的APP) B/S架构\n相比于C/S架构，B/S架构也有自己的优缺点\n优势：推广容易，不需要用户下载什么客户端之类的，只需要浏览器访问对应地址即可，这也就是早期各大厂都是从门户网站起家的。\n劣势：响应速度较慢，早期只能整个提交页面数据(不能局部刷新)、其安全性较低等。 混合架构\n结合了C/S和B/S的优势，左图适用于企业内部的软件，对系统的维护有优势；右图适用于主流互联网公司的架构，查询用B/S、修改用C/S架构。 2.8.2 MVC架构风格 # MVC(Model-View-Controller)，Model(模型) 是应用程序中用于处理应用程序数据逻辑的部分，通常模型对象负责在数 据库中存取数据。View(视图) 是应用程序中处理数据显示的部分，通常视图是依据模型数据创建的。Controller(控制器)是应用程序中处理用户交互的部分，通常控制器负责从视图读取数据，控制用户输入，并向模型发送数据。\nMVC分为主动MVC和被动MVC(具体不用了解)，MVC架构的缺点在于MV之间没有解耦，不是严格的分层架构(严格的分层架构：当前层之和上下层之间有联系) 在J2EE中（java相关的框架在考试中经常被拿来举例子，因此会java的很有优势），Model是Entity Bean/Session Bean，View是JSP，Controller是Servlet。\n2.8.3 MVP架构风格 # MVP(Model-View-Presenter)，注意：它不是LOL中的MVP，它是MVC的变种，它实现了MV之间的解耦。 2.8.4 MVVM架构风格 # MVVM(Model-ViewModel-View),类似于vue中的双向数据绑定，View改变则ViewModel也改变，反之亦然。 2.8.5 RIA架构风格 # RIA(富互联网架构)类似于综合了C/S和B/S架构的优点(C/S反应快，交互强，B/S易传播)，它在首次加载初期比较慢，一旦加载完成使用就快多了。典型的例子就是在线网游。\n2.8.6 基于服务的架构(SOA) # 1、服务构件粗粒度，传统构件细粒度居多。\n2、服务构件的接口是标准的，主要是WSDL接口，传统构件常以具体API形式出现。\n3、服务构件的实现与语言无关，传统构件绑定某种特定语言。\n4、服务构件可以通过构件容器提供OoS的服务，传统构件完全由程序代码直接控制。 SOA的实现方式：WebService；WSDL就是WebService接口对应的WSDL文件，该文件通过xml格式说明如何调用可以看作WebService的接口文档 (使用说明书)。 SOA的实现方式：ESB 2.8.7 微服务 # 微服务顾名思义，就是很小的服务，所以它属于面向服务架构的一种。 微服务架构是一种架构模式，它提倡将单一应用程序划分成一组小的服务，服务之间互相协调、互相配合，为用户提供最终价值。每个服务运行在其独立的进程中，服务与服务间采用轻量级的通信机制互相沟通 (通常是基于HTTP协议的RESTfulAPI)。每个服务都围绕着具体业务进行构建，并且能够被独立的部署到生产环境、类生产环境等。另外，应当尽量避免统一的、集中式的服务管理机制，对具体的一个服务而言，应根据业务上下文，选择合适的语言、工具对其进行构建。 其特点有：\n1、小,且专注于做一件事情。\n2、轻量级的通信机制。\n3、松耦合、独立部署。\n微服务的优势：\n1、技术异构\n2、弹性扩展\n3、在自动化部署情况下，能简化部署\n4、可组织性\n微服务的挑战：\n1、分布式系统的复杂度\n2、运维成本\n3、服务间的依赖管理和测试\n4、部署自动化\\\nSOA与微服务的对比 2.8.8 MDA # "},{"id":3,"href":"/docs/example/architect-exam/3.4-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/3-%E6%9E%B6%E6%9E%84%E6%8F%8F%E8%BF%B0%E8%AF%AD%E8%A8%80/","title":"3) 架构描述语言","section":"3.4 软件架构设计","content":" 架构描述语言 # ADL(Architect Describe Language)，它由三个基本的元素构成：\n1、构件：计算或者存储数据的单元。\n2、连接件：用于构件之间交互建模的连接块。\n3、架构配置：描述架构的构件与连接件的连接图。 学霸做对了没\n"},{"id":4,"href":"/docs/example/architect-exam/3.4-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/4-%E7%89%B9%E5%AE%9A%E9%A2%86%E5%9F%9F%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84/","title":"4) 特定领域软件架构","section":"3.4 软件架构设计","content":" 特定领域软件架构 DSSA # DSSA全称为Domain Specific Software Architecture\n基本活动 领域分析机制 三层次模型 \\\n例题 学霸做对了没\n"},{"id":5,"href":"/docs/example/architect-exam/3.4-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/5-%E5%9F%BA%E4%BA%8E%E6%9E%B6%E6%9E%84%E7%9A%84%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/","title":"5) 基于架构的软件开发","section":"3.4 软件架构设计","content":" 基于架构的软件开发ABSD # 基于架构的软件开发ABSD(Architecture-Based Software Design)。它能很好地支持重用。\n1、ABSD方法是架构驱动，即强调由业务、质量和功能需求的组合驱动架构设计。\n2、ABSD方法有三个基础。第一个基础是功能的分解。在功能分解中，ABSD方法使用已有的基于模块的内聚和耦合技术，第二个基础是通过选择架构风格来实现质量和业务需求，第三个基础是软件模板的使用。\n3、视角与视图:从不同的视角来检查，所以会有不同的视图。\n4、用例用来捕获功能需求、特定场景用来捕获质量需求。\n4.1 开发过程 # 4.1.1 架构需求 # 4.1.2 架构设计 # 4.1.3 架构文档化 # 4.1.4 架构复审 # 架构复审的目的是标识潜在的风险，及早发现架构设计中的缺陷和错误。\n4.1.5 架构实现 # 4.1.6 架构演化 # 例题 学霸做对了没 学霸做对了没\n"},{"id":6,"href":"/docs/example/architect-exam/3.4-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/6-%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E5%B1%9E%E6%80%A7/","title":"6) 软件质量属性","section":"3.4 软件架构设计","content":" 软件质量属性 # 1 性能 # 性能 (performance) 是指系统的响应能力，即要经过多长时间才能对某个事件做出响应，或者在某段时间内系统所能处理的事件的个数。例如：\n1、同时支持1000并发；\n2、响应时间小于1ms；\n3、显示分辨率达到4k； 2 可用性 # 可用性(availability)是系统能够正常运行的时间比例。经常用两次故障之间的时间长度或在出现故障时系统能够恢复正常的速度来表示。例如：\n1、主服务器故障，一分钟内切换至备用服务器；\n2、系统故障，1小时内修复；\n3、系统支持 7 x 24 小时工作。 3 安全性 # 安全性(security)是指系统在向合法用户提供服务的同时能够阻止非授权用户使用的企图或拒绝服务的能力。安全性又可划分为机密性、完整性、不可否认性及可控性等特性。例如：\n1、可抵御sql注入攻击；\n2、对计算机的操作都有完整记录；\n3、用户信息数据库授权必须保证99.9%可用。 4 可修改性 # 可修改性(modifiability)是指能够快速地以较高的性能价格比对系统进行变更的能力。通常以某些具体的变更为基准，通过考察这些变更的代价衡量可修改性。例如：\n1、更改系统报表模块，2人在两周内必须完成；\n2、对Web界面风格进行修改，修改必须在2个月内完成。 例题 学霸做对了没 学霸做对了没\n基本不考的几个属性 # 可靠性、功能性、可变性、互操作性\n"},{"id":7,"href":"/docs/example/architect-exam/3.4-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/7-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AF%84%E4%BC%B0/","title":"7) 软件架构评估","section":"3.4 软件架构设计","content":" 软件架构评估 # "},{"id":8,"href":"/docs/example/architect-exam/3.4-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/8-%E8%BD%AF%E4%BB%B6%E4%BA%A7%E5%93%81%E7%BA%BF/","title":"8) 软件产品线","section":"3.4 软件架构设计","content":" 软件产品线 # "},{"id":9,"href":"/docs/example/architect-exam/3.4-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/9-%E6%9E%84%E5%BB%BA%E4%B8%8E%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%8A%80%E6%9C%AF/","title":"9) 构建与中间件技术","section":"3.4 软件架构设计","content":" 构建与中间件技术 # "},{"id":10,"href":"/docs/example/architect-exam/3.4-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/10-web%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/","title":"10) web架构设计","section":"3.4 软件架构设计","content":" web架构设计 # "},{"id":11,"href":"/docs/example/golang/","title":"1. golang - 从入门到入土","section":"介绍","content":" 持续更新ing # "},{"id":12,"href":"/docs/example/gin/","title":"2. gin杂谈","section":"介绍","content":" 持续更新ing # "},{"id":13,"href":"/docs/example/architect-exam/","title":"3. 高级软考 - 系统架构师","section":"介绍","content":" 本博客只介绍“高级资格”里面的系统架构师，想考别的科目的朋友请参见官网 软考 1、考试介绍 # 系统架构师考试包含：3个科目，满分均为75分，45分为过线，需三科同时过线才算考过。 2、考试时间 # 每年具体那天考试不太确定，大概都是11月份。科目一全为选择题、科目二为案例分析题(第1道必答，后4道题选答2道，总共做3个题)、科目三论文作(四选一，不排除之后会变成二选一) 3、报名地址 # 需要格外注意的是：每个科目、每个省份的报名时间是不一样的，大概会在每年的4月和10月左右。系统架构师大概会在每年的10月左右。官方网站 软考\n4、考试内容 # 架构师考试内容太宽泛了，如果你和我一样是工作了才准备考的话，建议复习重点，45分和75分没啥区别 5、笔者过没过 # 算是比较幸运，我是一把过。希望学弟学妹们都能一把过。 6、备考资料 # 笔者的资料是从机构高价买的，现低价有偿分享给大家，所有资料打包 30元 即可获取，微信号：wys837，博主唯一的恰饭来源 😅\n资料主要有：\n2009-2022年的按年的真题及详细解析 2009-2022年的按知识点的真题及详细解析 新版系统架构师教材(2022年11月出版)，鉴别新版教材tips：新版教材分上下篇，总共20个章节 某塞新版教材分析视频 刷题小程序(非常适合上班族) 按章节的知识点和真题排班的所有例题 思维导图 相关的重要知识点补充、案例分析必背题目、示例论文精读、某赛讲义(我主要的复习参考)、答题卡等等 "},{"id":14,"href":"/docs/example/algorthem/","title":"4. 数据结构与算法","section":"介绍","content":" 持续更新ing # "},{"id":15,"href":"/docs/example/leetcode/","title":"5. leetcode","section":"介绍","content":" 持续更新ing # "},{"id":16,"href":"/docs/example/architect-exam/3.1-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B8%8E%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/","title":"3.1 计算机组成与体系结构","section":"3. 高级软考 - 系统架构师","content":" 课程内容提要 # 1.计算机结构 ✅ 2.存储系统 ✅✅✅✅ 3.数据传输控制方式 ✅ 4.总线 ✅✅ 5.CISC与RISC ✅✅ 6.流水线 ✅✅ 7.校验码 ✅ 8.嵌入式 ✅ 1 计算机结构 # 计算机的硬件包含5大组成：控制器、运算器、存储器、输入设备和输出设备。这也是著名的冯诺依曼结构，CPU依据指令周期的不同阶段来区分二进制的指令和数据，因为在指令周期的不同阶段指令会命令CPU分别去取指令或者数据。它们之间的交互如下图： 别的部件会在后面的章节详细讲解，这里是说运算器和控制器。\n1.1 运算器 # 算术逻辑单元ALU：实现对数据的算术和逻辑运算。\n累加寄存器AC：运算结果或源操作数的存放区。\n数据缓冲寄存器DR：暂时存放内存的指令或数据。\n状态条件寄存器PSW：保存指令运行结果的条件码内容，如溢出标志等。\n1.2 控制器 # 程序计数器PC：存储下一条要执行指令的地址。\n指令寄存器IR：存储即将执行的指令。\n指令译码器ID：对指令中的操作码字段进行分析解释。\n时序部件：提供时序控制信号。\n例题 学霸肯定对了 ↕ A 2 存储系统 # 整体采用分层的思想，主要是解决速度、容量和成本之间的矛盾。如下图：\n\\\n2.1 高速缓存Cache # 高速缓存Cache用来存储当前最活跃的程序和数据，直接与CPU交互，位于CPU和主存之间,容量小，速度为内存的5-10倍，其内容是主存(内存)的拷贝，对于程序员来说是透明的。Cache由控制部分和存储器组成，存储器存储数据，控制部分判断CPU要访问的数据是否在Cache中，在则命中不在则依据一定的算法从主存中替换。\n地址映射：在CPU工作时，送出的是主存单元的地址，而应从Cache存储器中读/写信息。这就需要将主存地址转换为Cache存储器地址，这种地址的转换称为地址映像，由硬件自动完成映射。\nCache的功能：\n1.提高CPU数据输入输出的速率，突破冯·诺依曼瓶颈，即突破CPU与存储系统间数据传送带宽限制。\n2.在计算机的存储系统体系中(除cpu中的寄存器外)，Cache是访问速度最快的层次。\n3.Cache对程序员来说是透明的。\n4.使用Cache改善系统性能的依据是程序的局部性原理(总的来说，在CPU运行时，所访问的数据会趋向于一个较小的局部时空内。包括下面两个方面: 时间局部性原理:如果一个数据项正在被访问，那么在近期它很可能会被再次访问，即在相邻的时间里会访问同一个数据项。空间局部性原理:在最近的将来会用到的数据的地址和现在正在访问的数据地址很可能是相近的，即相邻的空间地址会被连续访问。)\nCache的命中率：\n当CPU所访问的数据在Cache中时，命中，直接丛Cache中读取数据，设读取一次Cache时间为1ns，若CPU访问的数据不在Cache中，则需要从内存中读取，设读取一次内存的时间为1000ns，若在CPU多次读取数据过程中，有90%命中Cache，则CPU读取一次的平均时间为(90% * 1 + 10% * 1000)ns\\\n例题 学霸肯定对了 ↕ B 学霸肯定对了 ↕ D 2.2 主存(内存)编址计算 # 主存如图所示，可以看图试着回答红色框线里面的问题，看完应该知道32位机器和64位机器大概是啥意思了。 特别提醒：不要硬算，要化简为2的幂指数来算。 存储单元个数=最大地址-最小地址+1\n编址方式 按字编址：一个存储单元存储的是一个字，最小寻址单位是一个字。 按字节编址：一个存储单元存储的是一个字节，最小寻址单位是一个字节。 总容量=存储单元个数*单个存储单元所占大小\n单位换算：1GB=1024MB，1MB=1024KB，1KB=1024Byte，1Byte=8bit。\n例题 学霸做对了没\n2.3 磁盘管理 # 磁盘有正反两个盘面，每个盘面有多个同心圆，每个同心圆是一个磁道，每个同心圆又被划分为多个扇区，数据就被存放在一个个扇区中。\n磁头首先要寻找到对应的磁道，然后等待磁盘进行周期旋转，旋转到指定的扇区，才能读取到对应的数据，因此，会产生寻道时间和等待时间。其公式为： 存取时间=寻道时间+等待时间(平均定位时间+转动延迟)\n磁盘调度算法 先来先服务FCFS:根据进程请求访问磁盘的先后顺序进行调度。 最短寻道时间优先SSTF:请求访问的磁道与当前磁道最进的进程优先调度，使得每次的寻道时间最短。会产生“饥饿”现象，即远处进程可能永远无法访问。 扫描算法SCAN:又称“电梯算法”，磁头在磁盘上双向移动，其会选择离磁头当前所在磁道最近的请求访问的磁道，并且与磁头移动方向一致，磁头永远都是从里向外或者从外向里一直移动完才掉头。 单向扫描调度算法CSCAN: 与电梯算法类似，与SCAN不同的是，其只做单向移动，即只能从里向外或者从外向里。 例题 学霸做对了没 学霸做对了没\n3 数据传输控制方式 # 3.1 程序查询方式 # 程序控制(查询)方式:CPU主动查询外设是否完成数据传输，效率极低。\n3.2 程序中断方式 # 程序中断方式: 外设完成数据传输后，向CPU发送中断，等待CPU处理数据，效率相对较高，中断响应时间指的是从发出中断请求到开始进入中断处理程序;中断处理时间指的是从中断处理开始到中断处理结束。中断向量提供中断服务程序的入口地址。多级中断嵌套，使用堆栈来保护断点和现场。\n3.3 DMA方式 # DMA方式(直接主存存取):CPU只需完成必要的初始化等操作，数据传输的整个过程都申。 DMA控制器来完成，在主存和外设之间建立直接的数据通路，效率很高。\n例题 学霸做对了没 学霸做对了没\n4 总线 # 总线(Bus)，是指计算机设备和设备之间传输信息的公共数据通道。总线是连接计算机硬件系统内多种设备的通信线路，它的一个重要特征是由总线上的所有设备共享，因此可以将计算机系统内的多种设备连接到总线上。一条总线同一时刻仅允许一个设备发送，但允许多个设备接收，所以总线是半双工模式。\n总线具体分为数据总线(并行数据传输位数)、地址总线(系统可管理的内存空间的大小) 、控制总线(传送控制命令)。\n例题 学霸做对了没 学霸做对了没\n5 CISC与RISC # 6 流水线 # 流水线时间计算\n流水线周期:指令分成不同执行段(取址、分析、执行)，其中执行时间最长的段为流水线周期。\n流水线执行时间:1条指令总执行时间+ (总指令条数-1)*流水线周期。\n流水线吞吐率计算:吞叶率即单位时间内执行的指今条数。即：指令条数/流水线执行时间\n流水线的加速比计算:加速比即使用流水线后的效率提升度，即比不使用流水线快了多少倍，越高表明流水线效率越高。即：不使用流水线执行时间/使用流水线执行时间。\n例题 学霸做对了没\n7 校验码 # 7.1 奇偶校验码 # 奇偶校验码:在编码中增加1位校验位来使编码中1的个数为奇数(奇校验)或者偶数(偶校验)，编码中，含有奇数个1，发送给接收方，接收方收到后，会计算收到的编码有多少个1，如果是奇数个，则无误，是偶数个，则有误。\n7.2 循环冗余码 # 例题 学霸做对了没\n7.3 海明码 # 例题 学霸做对了没\n8 嵌入式 # "},{"id":17,"href":"/docs/example/architect-exam/3.2-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/","title":"3.2 操作系统","section":"3. 高级软考 - 系统架构师","content":" 课程内容提要 # 1.操作系统的组成及作用 ✅✅✅ 2.操作系统的特性 ✅✅✅ 3.操作系统的分类 ✅✅✅ 4.进程管理 进程的状态 ✅✅✅ 前趋图 ✅✅✅✅ 信号量与P/V操作 ✅✅✅✅ 死锁及银行家算法 ✅ 5.存储管理 页式存储 ✅✅✅ 段式存储 ✅✅✅ 页面置换算法 ✅ 6.文件管理 绝对路径与相对路径 ✅ 索引文件 ✅✅✅ 位示图 ✅ 7.设备管理 ✅✅ 1 操作系统的组成及作用 # 1.1 操作系统的组成 # 通常由操作系统内核 (Kernel) 和其他许多附加的配套软件所组成，包括图形用户界面程序、为支持应用软件开发和运行的各种软件构件(如应用框架、编译器和程序库等)、常用的应用程序(如任务管理器、防火墙、网络浏览器等)。\n其中，内核指的是能提供进程管理(任务管理)、存储管理、文件管理和设备管理等功能的那些软件模块，它们是操作系统中最基本的部分，用于为众多应用程序访问计算机硬件提供服务。由于应用程序直接对硬件操作非常复杂，所以操作系统内核对硬件设备进行了抽象，为应用软件提供了一套简洁、统一的接口(称为系统调用接口或应用程序接口 API)。内核通常都驻留在内存中，它以 CPU 的最高优先级运行，能执行指令系统中的特权指令，具有直接访问各种外设和全部主存空间的特权，负责对系统资源进行管理和分配。\n1.2 操作系统的作用 # 操作系统主要有以下 3 个方面的重要作用：\n(1) 管理计算机中运行的程序和分配各种软硬件资源。计算机中一般总有多个程序在运行.这些程序在运行时都可能要求使用系统中的资源(如访问硬盘，在屏幕上显示信息等)，此时操作系统就承担着资源的调度和分配任务，以避免冲突，保证程序正常有序地运行。操作系统的资源管理功能主要包括处理器管理、存储管理、文件管理、I/O 设备管理等几个方面。\n(2) 为用户提供友善的人机界面。人机界面的任务是实现用户与计算机之间的通信(对话)。几乎所有操作系统都向用户提供图形用户界面 (GUI)。\n(3) 为应用程序的开发和运行提供一个高效率的平台。操作系统屏蔽了几乎所有物理设备的技术细节，它以规范、高效的方式 (例如系统调用、库函数等)向应用程序提供了有力的支持，从而为开发和运行其他系统软件及各种应用软件提供了一个平台。\n2 操作系统的特性 # 2.1 并发性 # 在多道程序环境下，并发性是指在一段时间内，宏观上有多个程序同时运行，但实际上在单CPU的运行环境，每一个时刻只有一个程序在执行。因此，从微观上来说，各个程序是交替、轮流执行的，如果计算机系统中有多个 CPU，则可将多个程序分配到不同 CPU 上实现并行运行。\n2.2 共享性 # 共享是指操作系统中的资源(包括硬件资源和信息资源)可以被多个并发执行的进程(线程)共同使用，而不是被一个进程所独占。\n2.3 不确定性 # 但由于资源有限，在多数情况下进程的执行不是一贯到底的，而是“走走停停”。例如一个进程，在 CPU上运行一段时间后，由于等待资源或某事件发生，它被暂停执行，将 CPU 转让给另一个进程执行。系统中的进程何时执行，何时暂停，以什么样的速度向前推进，进程总共要花多少时间执行才能完成，这些都是不可预知的。\n3 操作系统的分类 # 3.1 批处理操作系统 # 单道批处理系统 单道批处理操作系统是一种早期的操作系统，用户可以向系统提交多个作业，“单道”的含义是指一次只有一个作业装入内存执行。作业由用户程序、数据和作业说明书(作业控制语言)3个部分组成。当一个作业运行结束后，随即自动调入同批的下一个作业，从而节省了作业之间的人工干预时间，提高了资源的利用率。 多道批处理操作系统 允许多个作业装入内存执行，在任意一个时刻，作业都处于开始点和终止点之间。每当运行中的一个作业由于输入/输出操作需要调用外部设备时，就把 CPU 交给另一个等待运行的作业，从而将主机与外部设备的工作由串行改变为并行，进一步避免了因主机等待外设完成任务而浪费宝贵的 CPU 时间。多道批处理系统主要有3 个特点:多道、宏观上并行运行和微观上串行运行。 3.2 分时操作系统 # 在分时操作系统中，一个计算机系统与多个终端设备连接。分时操作系统是将 CPU 的工作时间划分为许多很短的时间片，轮流为各个终端的用户服务。例如，一个带 20 个终端的分时系统，若每个用户每次分配一个 50ms 的时间片，则每隔 1s 即可为所有的用户服务一遍。因此,尽管各个终端上的作业是断续运行的，但由于操作系统每次对用户程序都能做出及时响应，因此用户感觉整个系统均归其一人占用。\n3.3 实时操作系统 # 实时是指计算机对于外来信息能够以足够快的速度进行处理，并在被控对象允许的时间范围内做出快速反应。实时系统对交互能力要求不高，但要求可靠性有保障。\n实时系统分为实时控制系统和实时信息处理系统。实时控制系统主要用于生产过程的自动控制，例如数据自动采集、武器控制、火炮自动控制、飞机自动驾驶和导弹的制导系统等。实时信息处理系统主要用于实时信息处理，例如飞机订票系统、情报检索系统等。\n3.4 网络操作系统 # 网络操作系统是使联网计算机能方便而有效地共享网络资源，为网络用户提供各种服务的软件和有关协议的集合。\n3.5 分布式操作系统 # 分布式计算机系统是由多个分散的计算机经连接而成的计算机系统，系统中的计算机无主次之分，任意两台计算机可以通过通信交换信息。通常，为分布式计算机系统配置的操作系统称为分布式操作系统。分布式操作系统能直接对系统中的各类资源进行动态分配和调度、任务划分、信息传输协调工作，并为用户提供一个统一的界面与标准的接口，用户通过这一界面实现所需要的操作和使用系统资源，使系统中若干台计算机相互协作完成共同的任务，有效地控制和协调诸任务的并行执行。分布式操作系统是网络操作系统的更高级形式，它保持网络系统所拥有的全部功能，同时又有透明性、可靠性和高性能等特性。\n3.6 微型计算机操作系统 # 微型计算机操作系统简称微机操作系统，常用的有 Windows、Mac OS、Linux。\n3.7 嵌入式操作系统 # 嵌入式操作系统运行在嵌入式智能设备环境中微型化，其主要特点如下：微型化、可定制、实时性、可靠性、易移植性\n4 进程管理 # 进程由进程控制块PCB(唯一标识)+程序(描述进程要做什么)+数据(存放进程执行所需的数据)。\n4.1 进程的三态图 # 4.2 同步互斥 # 临界资源：各进程间需要以互斥方式对其进行访问的资源。\n临界区：指进程中对临界资源实施操作的那段程序。本质是一段程序代码。\n互斥：某资源 (即临界资源)在同一时间内只能由一个任务单独使用，使用时需要加锁，使用完后解锁才能被其他任务使用;如打印机。\n同步：多个任务可以并发执行，只不过有速度上的差异，在一定情况下停下等待，不存在资源是否单独或共享的问题;如自行车和汽车。\n互斥信号量：对临界资源采用互斥访问，使用互斥信号量后其他进程无法访问，初值为1。\n同步信号量：同步信号量:对共享资源的访问控制，初值一般是共享资源的数量；如公司电脑数量。 4.3 前趋图与PV操作 # P操作：申请资源，S=S-1，若S)0，则执行P操作的进程继续执行;若S\u0026lt;0，则置该进程为阻塞状态 (因为无可用资源)，并将其插入阻塞队列。\nV操作：释放资源，S=S+1，若S\u0026gt;0，则执行V操作的进程继续执行:若S\u0026lt;=0，则从阻塞状态唤醒一个进程，并将其插入就绪队列(此时因为缺少资源被P操作阻塞的进程可以继续执行，然后执行V操作的进程继续。\n4.4 死锁 # 死锁就考一个死锁资源的计算。\n5 存储管理 # 5.1 分页存储管理 # 逻辑页分为页号和页内地址，页内地址就是物理偏移地址，而页号与物理块号并非按序对应的需要查询页表，才能得知页号对应的物理块号，再用物理块号加上偏移地址才得出了真正运行时的物理地址。\n页面置换算法\n最优算法:0PT，理论上的算法，无法实现，是在进程执行完后进行的最佳效率计算，用来让其他算法比较差距。原理是选择未来最长时间内不被访问的页面置换，这样可以保证未来执行的都是马上要访问的。\n先进先出算法:FIFO，先调入内存的页先被置换淘汰，会产生抖动现象，即分配的页帧数越多缺页率可能越多(即效率越低)。\n最近最少使用:LRU，在最近的过去，进程执行过程中，过去最少使用的页面被置换淘汰，根据局部性原理，这种方式效率高，且不会产生抖动现象，使用大量计数器，但是没有LFU多。\n淘汰原则:优先淘汰最近未访问的，而后淘汰最近未被修改的页面。\n快表:是一块小容量的相联存储器，由快速存储器组成，按内容访问，速度快，并且可以从硬件上保证按内容并行查找，一般用来存放当前访问最频繁的少数活动页面的页号。快表是将页表存于Cache中;慢表是将页表存于内存上。慢表需要访问两次内存才能取出页，而快表是访问一次Cache和一次内存，因此更快。\n5.2 分段存储管理 # 将进程空间分为一个个段，每段也有段号和段内地址，与页式存储不同的是，每段物理大小不同，分段是根据逻辑整体分段的，因此，段表也与页表的内容不同，页表中直接是逻辑页号对应物理块号，而下图所示，段表有段长和基址两个属性，才能确定一个逻辑段在物理段中的位置。\n6 设备管理 # 6.1 I/O软件层次 # 1/0设备管理软件的所有层次及每一层功能如下图：\n实例：当用户程序试图读一个硬盘文件时，需要通过操作系统实现这一操作。与设备无关软件检查高速缓存中有无要读的数据块，若没有，则调用设备驱动程序，向1/0 硬件发出一个请求。然后，用户进程阻塞并等待磁盘操作的完成。当磁盘操作完成时，硬件产生一个中断，转入中断处理程序。中断处理程序检查中断的原因，认识到这时磁盘读取操作已经完成，于是唤醒用户进程取回从磁盘读取的信息，从而结束此次1/0 请求。用户进程在得到了所需的硬盘文件内容之，后继续运行。\n6.2 SPOOLING技术 # 虚拟性是OS的四大特性之一。如果说可以通过多道程序技术将一台物理CPU虚拟为多台逻辑CPU，从而允许多个用户共享一台主机，那么，通过SPOOling技术便可将一台物理I/O设备虚拟为多台逻辑I/O设备，同样允许多个用户共享一台物理I/O设备。\n7 文件管理 # 7.1 索引文件结构 # 如图所示，系统中有13个索引节点，0-9为直接索引,即每个索引节点存放的是内容，假设每个物理盘大小为4KB，共可存4KB*10=40KB数据。\n10号索引节点为一级间接索引节点，大小为4KB，存放的并非直接数据，而是链接到直接物理盘块的地址，假设每个地址占4B，则共有4KB/4B = 1024个地址，对应1024个物理盘，可存1024*4KB=4096KB数据。\n11号索引节点为二级索引节点，直接盘存放一级地址，一级地址再存放物理盘快地址，而后链接到存放数据的物理盘块，容量又扩大了一个数量级，为1024 * 1024 * 4KB数据。\n学霸做对了没\n7.2 文件目录 # 相对路径：是从当前路径开始的路径。\n绝对路径：是从根目录开始的路径。\n全文件名=绝对路径+文件名。要注意，绝对路径和相对路径是不加最后的文件名的，只是单纯的路径序列。\n7.3 位示图 # 位示图是用于记录文件存储器的使用情况。每一位对应文件存储器上的一个物理块，取值 0 和 1 分别表示空闲和占用。\n"},{"id":18,"href":"/docs/example/architect-exam/3.3-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/","title":"3.3 软件工程","section":"3. 高级软考 - 系统架构师","content":" 软件工程 # "},{"id":19,"href":"/docs/example/architect-exam/3.4-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/","title":"3.4 软件架构设计","section":"3. 高级软考 - 系统架构师","content":" 课程内容提要 # 1.软件架构的概述 ✅✅✅ 2.软件架构风格 ✅✅✅✅✅ 3.架构描述语言 ✅✅✅ 4.特定领域软件架构 ✅✅✅ 5.基于架构的软件开发 ✅✅✅✅ 6.软件质量属性 ✅✅✅✅✅ 7.软件架构评估 ✅✅✅✅✅ 8.软件产品线 ✅✅✅ 9.构建与中间件技术 ✅✅✅✅ 10.web架构设计 ✅✅✅✅✅ "},{"id":20,"href":"/docs/example/hidden/","title":"Hidden","section":"介绍","content":" This page is hidden in menu # Quondam non pater est dignior ille Eurotas # Latent te facies # Lorem markdownum arma ignoscas vocavit quoque ille texit mandata mentis ultimus, frementes, qui in vel. Hippotades Peleus pennas conscia cuiquam Caeneus quas.\nPater demittere evincitque reddunt Maxime adhuc pressit huc Danaas quid freta Soror ego Luctus linguam saxa ultroque prior Tatiumque inquit Saepe liquitur subita superata dederat Anius sudor Cum honorum Latona # O fallor in sustinui iussorum equidem. Nymphae operi oris alii fronde parens dumque, in auro ait mox ingenti proxima iamdudum maius?\nreality(burnDocking(apache_nanometer), pad.property_data_programming.sectorBrowserPpga(dataMask, 37, recycleRup)); intellectualVaporwareUser += -5 * 4; traceroute_key_upnp /= lag_optical(android.smb(thyristorTftp)); surge_host_golden = mca_compact_device(dual_dpi_opengl, 33, commerce_add_ppc); if (lun_ipv) { verticalExtranet(1, thumbnail_ttl, 3); bar_graphics_jpeg(chipset - sector_xmp_beta); } Fronde cetera dextrae sequens pennis voce muneris # Acta cretus diem restet utque; move integer, oscula non inspirat, noctisque scelus! Nantemque in suas vobis quamvis, et labori!\nvar runtimeDiskCompiler = home - array_ad_software; if (internic \u0026gt; disk) { emoticonLockCron += 37 + bps - 4; wan_ansi_honeypot.cardGigaflops = artificialStorageCgi; simplex -= downloadAccess; } var volumeHardeningAndroid = pixel + tftp + onProcessorUnmount; sector(memory(firewire + interlaced, wired)); "}]